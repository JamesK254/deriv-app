{"version":3,"file":"cfd/js/cfd.cfd-app.b564c4f0c6d48f94558c.js","mappings":"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","sources":["webpack://@deriv/cfd/../api/src/APIProvider.tsx","webpack://@deriv/cfd/../api/src/useSubscription.ts","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/index.tsx","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-derived.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-financial.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-cfds.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-derivez.svg","webpack://@deriv/cfd/./src/Assets/svgs/trading-platform/ic-appstore-swap-free.svg","webpack://@deriv/cfd/./src/Components/cfd-account-copy.tsx","webpack://@deriv/cfd/./src/Components/success-dialog.jsx","webpack://@deriv/cfd/./src/Containers/cfd-change-password-confirmation.tsx","webpack://@deriv/cfd/./src/Containers/cfd-dbvi-onboarding.tsx","webpack://@deriv/cfd/../hooks/src/useIsAccountStatusPresent.ts","webpack://@deriv/cfd/./src/Components/cfd-personal-details-form.tsx","webpack://@deriv/cfd/./src/Components/cfd-poa.tsx","webpack://@deriv/cfd/./src/Components/cfd-poi.tsx","webpack://@deriv/cfd/./src/Containers/cfd-personal-details-container.tsx","webpack://@deriv/cfd/./src/Containers/cfd-financial-stp-real-account-signup.tsx","webpack://@deriv/cfd/./src/Containers/trading-password-manager.tsx","webpack://@deriv/cfd/./src/Containers/investor-password-manager.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-manager-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-reset-password-modal.tsx","webpack://@deriv/cfd/./src/Containers/cfd-server-error-dialog.tsx","webpack://@deriv/cfd/./src/Containers/cfd-top-up-demo-modal.tsx","webpack://@deriv/cfd/./src/Containers/compare-accounts-content.tsx","webpack://@deriv/cfd/./src/Constants/cfd_compare_account_content.ts","webpack://@deriv/cfd/./src/Containers/mt5-compare-table-content.tsx","webpack://@deriv/cfd/./src/Components/cfd-dxtrade-compare-content.tsx","webpack://@deriv/cfd/./src/Containers/compare-accounts-modal.tsx","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-verification-contents.ts","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-back.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-clickable-description.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-title-indicator.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-section.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card-front.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-card.tsx","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-svg-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-bvi-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-vanuatu-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction-labuan-contents.ts","webpack://@deriv/cfd/./src/Constants/jurisdiction-contents/jurisdiction_maltainvest_contents.ts","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-content.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-checkbox.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-foot-note.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal-content-wrapper.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-modal/jurisdiction-modal.tsx","webpack://@deriv/cfd/./src/Containers/dmt5-trade-modal.tsx","webpack://@deriv/cfd/./src/Containers/mt5-trade-modal.tsx","webpack://@deriv/cfd/./src/Helpers/config.tsx","webpack://@deriv/cfd/./src/Components/specbox.tsx","webpack://@deriv/cfd/./src/Components/passwordbox.tsx","webpack://@deriv/cfd/./src/Containers/trade-modal.tsx","webpack://@deriv/cfd/./src/Helpers/constants.ts","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/cfd-config.ts","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/useCfdStores.tsx","webpack://@deriv/cfd/./src/Utils/Validator/errors.js","webpack://@deriv/cfd/./src/Utils/Validator/validator.js","webpack://@deriv/cfd/./src/Utils/Validator/index.js","webpack://@deriv/cfd/./src/Stores/base-store.js","webpack://@deriv/cfd/./src/Stores/Modules/CFD/cfd-store.js","webpack://@deriv/cfd/./src/_common/utility.js","webpack://@deriv/cfd/./src/Containers/missing-real-account.tsx","webpack://@deriv/cfd/./src/templates/_common/components/loading.tsx","webpack://@deriv/cfd/./src/Containers/loading-cfd-real-account-display.tsx","webpack://@deriv/cfd/./src/Constants/cfd-shared-strings.js","webpack://@deriv/cfd/./src/Components/cfd-download-container.tsx","webpack://@deriv/cfd/./src/Containers/switch-to-real-account.tsx","webpack://@deriv/cfd/./src/Components/cfd-account-card.tsx","webpack://@deriv/cfd/./src/Constants/cfd-specifications.ts","webpack://@deriv/cfd/./src/Components/cfd-dxtrade-demo-account-display.tsx","webpack://@deriv/cfd/./src/Components/cfd-mt5-demo-account-display.tsx","webpack://@deriv/cfd/./src/Components/cfd-real-account-display.tsx","webpack://@deriv/cfd/./src/Containers/cfd-dashboard.tsx","webpack://@deriv/cfd/./src/Containers/index.js","webpack://@deriv/cfd/./src/Constants/routes-config.js","webpack://@deriv/cfd/./src/Components/Routes/helpers.js","webpack://@deriv/cfd/./src/Components/Routes/binary-link.jsx","webpack://@deriv/cfd/./src/Components/Routes/route-with-sub-routes.jsx","webpack://@deriv/cfd/./src/Components/Routes/binary-routes.jsx","webpack://@deriv/cfd/./src/Components/Routes/index.js","webpack://@deriv/cfd/./src/Components/Errors/error-component.jsx","webpack://@deriv/cfd/./src/Containers/routes.jsx","webpack://@deriv/cfd/./src/Stores/Modules/index.js","webpack://@deriv/cfd/./src/Stores/index.js","webpack://@deriv/cfd/./src/_common/base/server_time.js","webpack://@deriv/cfd/./src/init-store.js","webpack://@deriv/cfd/./src/cfd-providers.tsx","webpack://@deriv/cfd/./src/app.tsx","webpack://@deriv/cfd/../stores/src/storeContext.ts","webpack://@deriv/cfd/../stores/src/useStore.ts","webpack://@deriv/cfd/../stores/src/providers/ExchangeRatesProvider.tsx","webpack://@deriv/cfd/../stores/src/stores/BaseStore.ts","webpack://@deriv/cfd/../stores/src/stores/ExchangeRatesStore.ts","webpack://@deriv/cfd/../stores/src/stores/FeatureFlagsStore.ts","webpack://@deriv/cfd/../stores/src/storeProvider.tsx"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n\nconst queryClient = new QueryClient();\n\nconst APIProvider = ({ children }: PropsWithChildren<unknown>) => (\n    <QueryClientProvider client={queryClient}>\n        {children}\n        <ReactQueryDevtools />\n    </QueryClientProvider>\n);\n\nexport default APIProvider;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useWS } from '@deriv/shared';\nimport type {\n    TSocketAcceptableProps,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nconst useSubscription = <T extends TSocketSubscribableEndpointNames>(name: T) => {\n    const [is_loading, setIsLoading] = useState(false);\n    const [is_subscribed, setSubscribed] = useState(false);\n    const [error, setError] = useState<unknown>();\n    const [data, setData] = useState<TSocketResponseData<T>>();\n    const subscriber = useRef<{ unsubscribe?: VoidFunction }>();\n    const WS = useWS();\n\n    const subscribe = useCallback(\n        (...props: TSocketAcceptableProps<T>) => {\n            const prop = props?.[0];\n            const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n            setIsLoading(true);\n            setSubscribed(true);\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const onData = (response: any) => {\n                setData(response);\n                setIsLoading(false);\n            };\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const onError = (response: any) => {\n                setError(response.error);\n                setIsLoading(false);\n            };\n\n            try {\n                subscriber.current = WS.subscribe({ [name]: 1, subscribe: 1, ...(payload || {}) }).subscribe(\n                    onData,\n                    onError\n                );\n            } catch (e) {\n                setError(e);\n            }\n        },\n        [WS, name]\n    );\n\n    const unsubscribe = useCallback(() => {\n        subscriber.current?.unsubscribe?.();\n        setSubscribed(false);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            unsubscribe();\n        };\n    }, [unsubscribe]);\n\n    return { subscribe, unsubscribe, is_loading, is_subscribed, error, data };\n};\n\nexport default useSubscription;\n","import React from 'react';\nimport Derived from './ic-appstore-derived.svg';\nimport Financial from './ic-appstore-financial.svg';\nimport CFDs from './ic-appstore-cfds.svg';\nimport DerivEz from './ic-appstore-derivez.svg';\nimport SwapFree from './ic-appstore-swap-free.svg';\n\nexport interface IconProps<T> {\n    icon: T;\n    className?: string;\n    size?: number;\n    onClick?: () => void;\n}\n\nexport const PlatformIcons = {\n    Derived,\n    Financial,\n    CFDs,\n    DerivEz,\n    SwapFree,\n};\n\nconst TradingPlatformIcon = ({ icon, className, size, onClick }: IconProps<keyof typeof PlatformIcons>) => {\n    const PlatformIcon = PlatformIcons[icon] as React.ElementType;\n\n    return PlatformIcon ? (\n        <PlatformIcon className={className} style={{ width: size, height: size }} onClick={onClick} />\n    ) : null;\n};\n\nexport default TradingPlatformIcon;\n","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#2A3052\" /><path d=\"M26.7 23H0V6.18l29.91-4.73c.22.2.43.4.62.62L26.7 23z\" fill=\"#0364B9\" /><path d=\"M0 6a6 6 0 016-6h20c1.5 0 2.86.55 3.92 1.45L0 6.17V6zm26.7 17l3.83-20.93A5.97 5.97 0 0132 6v17h-5.3z\" fill=\"#0A559E\" /><path d=\"M7.34 9.68c.15.27.31.6.5.99.19.38.38.8.58 1.26.21.45.41.9.61 1.38l.57 1.33.56-1.33a78.87 78.87 0 011.19-2.64l.5-.99h1.7a52.27 52.27 0 01.4 4l.15 2.22.12 2.1h-1.83c-.02-.8-.05-1.69-.1-2.64-.03-.95-.1-1.91-.17-2.88a517.56 517.56 0 01-1.01 2.34 108.94 108.94 0 01-.9 2.12h-1.3a118.46 118.46 0 00-.92-2.12l-.52-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.71 18H4.9L5 15.9l.15-2.22a47.67 47.67 0 01.4-4h1.8zm14.02 0v1.6h-2.51V18h-1.88v-6.72h-2.5v-1.6h6.89zm3.96 5.87a1.18 1.18 0 00-.16-.61c-.1-.18-.28-.34-.54-.46a3.8 3.8 0 00-1.03-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.13.15 6.41 6.41 0 01-.68-.1 7.3 7.3 0 01-.59-.14 2.3 2.3 0 01-.4-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32.24-.22.37-.48.37-.78zM10.87 28.81l.15.02h.21c.47 0 .82-.12 1.04-.36.23-.23.34-.56.34-.98 0-.43-.1-.76-.32-.99-.22-.22-.56-.33-1.03-.33a3.37 3.37 0 00-.39.02v2.62zm2.7-1.32c0 .36-.05.68-.16.95a1.73 1.73 0 01-.48.66 2 2 0 01-.75.4 3.5 3.5 0 01-1 .13c-.16 0-.36 0-.58-.02a4.51 4.51 0 01-.66-.09v-4.05a9.16 9.16 0 011.28-.1c.35 0 .67.04.96.12.3.08.54.2.75.38.2.17.37.39.48.66.11.27.17.59.17.96zm2-2.12c.63 0 1.1.11 1.44.34.33.22.5.56.5 1.03 0 .29-.07.53-.2.71-.14.18-.33.32-.58.43a5.31 5.31 0 01.53.78 10.05 10.05 0 01.5.92h-1.05a49.79 49.79 0 00-.23-.42 6.82 6.82 0 00-.24-.4 7.53 7.53 0 00-.24-.38 3.8 3.8 0 00-.24-.32h-.47v1.52h-.93v-4.1a5.31 5.31 0 01.63-.09 8.2 8.2 0 01.59-.02zm.06.8a2.63 2.63 0 00-.34.02v1.12h.27c.35 0 .6-.04.75-.13.16-.09.23-.24.23-.45 0-.2-.07-.35-.23-.43a1.38 1.38 0 00-.68-.13zm3.88 3.4a31.27 31.27 0 01-.94-2.2 58.21 58.21 0 01-.72-1.95h1.03l.26.78.3.83.28.79.26.65a17.1 17.1 0 00.54-1.44 96.8 96.8 0 00.55-1.61h1l-.32.9a37.71 37.71 0 01-.86 2.17l-.48 1.09h-.9z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#71BD0E\" /><path d=\"M26.7 23H0V6.18l29.91-4.73c.22.2.43.4.62.62L26.7 23z\" fill=\"#0364B9\" /><path d=\"M0 6a6 6 0 016-6h20c1.5 0 2.86.55 3.92 1.45L0 6.17V6zm26.7 17l3.83-20.93A5.97 5.97 0 0132 6v17h-5.3z\" fill=\"#0A559E\" /><path d=\"M7.34 9.68c.15.27.31.6.5.99.19.38.38.8.58 1.26.21.45.41.9.61 1.38l.57 1.33.56-1.33a78.87 78.87 0 011.19-2.64l.5-.99h1.7a52.27 52.27 0 01.4 4l.15 2.22.12 2.1h-1.83c-.02-.8-.05-1.69-.1-2.64-.03-.95-.1-1.91-.17-2.88a517.56 517.56 0 01-1.01 2.34 108.94 108.94 0 01-.9 2.12h-1.3a118.46 118.46 0 00-.92-2.12l-.52-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.71 18H4.9L5 15.9l.15-2.22a47.67 47.67 0 01.4-4h1.8zm14.02 0v1.6h-2.51V18h-1.88v-6.72h-2.5v-1.6h6.89zm3.96 5.87a1.18 1.18 0 00-.16-.61c-.1-.18-.28-.34-.54-.46a3.8 3.8 0 00-1.03-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.13.15 6.41 6.41 0 01-.68-.1 7.3 7.3 0 01-.59-.14 2.3 2.3 0 01-.4-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32.24-.22.37-.48.37-.78zM11.54 29.58v-4.16h2.78v.79h-1.84v.87h1.64v.78h-1.64v1.72h-.94zm3.45-4.16h.93v4.16H15v-4.16zm4.68 4.16a20.92 20.92 0 00-.87-1.41 14.33 14.33 0 00-1-1.32v2.73h-.92v-4.16h.77a7.33 7.33 0 01.92 1.1 15.66 15.66 0 01.96 1.35v-2.45h.93v4.16h-.79z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#FF8C00\" /><path d=\"M26.7 23H0V6.18l29.91-4.73c.22.2.43.4.62.62L26.7 23z\" fill=\"#0364B9\" /><path d=\"M0 6a6 6 0 016-6h20c1.5 0 2.86.55 3.92 1.45L0 6.17V6zm26.7 17l3.83-20.93A5.97 5.97 0 0132 6v17h-5.3z\" fill=\"#0A559E\" /><path d=\"M7.35 9.68l.49.99a44.57 44.57 0 011.2 2.64l.56 1.33.57-1.33a78.87 78.87 0 011.18-2.64l.5-.99h1.71a52.27 52.27 0 01.4 4l.14 2.22.12 2.1H12.4l-.1-2.64c-.04-.95-.1-1.91-.18-2.88a517.56 517.56 0 01-1 2.34 108.94 108.94 0 01-.9 2.12H8.9a118.46 118.46 0 00-.92-2.12l-.51-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.72 18H4.9l.1-2.1.15-2.22.18-2.14c.07-.68.15-1.3.23-1.86h1.79zm14 0v1.6h-2.5V18h-1.87v-6.72h-2.51v-1.6h6.89zm3.97 5.87a1.18 1.18 0 00-.15-.61c-.1-.18-.29-.34-.54-.46a3.8 3.8 0 00-1.04-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.12.15 6.41 6.41 0 01-.69-.1 7.3 7.3 0 01-.58-.14 2.3 2.3 0 01-.41-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32s.37-.48.37-.78zm-14.3 14.12c-.68 0-1.2-.19-1.55-.57-.36-.37-.53-.9-.53-1.6 0-.34.05-.65.16-.91a1.84 1.84 0 011.12-1.11 2.42 2.42 0 011.32-.1c.15.02.27.05.38.08a1.68 1.68 0 01.43.19l-.27.76a2.25 2.25 0 00-.45-.18 2.1 2.1 0 00-.58-.07c-.14 0-.29.02-.43.07a.97.97 0 00-.36.24c-.1.1-.19.24-.25.4a1.72 1.72 0 00-.1.62c0 .19.02.37.06.54.04.16.11.3.2.42.1.12.22.22.38.29.15.07.33.1.55.1a2.52 2.52 0 00.65-.08 1.77 1.77 0 00.22-.07l.18-.08.26.75a2.2 2.2 0 01-.56.21c-.24.07-.52.1-.84.1zm1.99-.09v-4.15h2.78v.78h-1.84v.87h1.64v.79h-1.65v1.72h-.93zm4.38-.76l.15.02h.21c.47 0 .81-.12 1.04-.36.23-.23.34-.56.34-.98 0-.43-.1-.76-.32-.99-.22-.22-.56-.33-1.03-.33a3.37 3.37 0 00-.39.02v2.62zm2.7-1.32c0 .36-.05.68-.16.95a1.73 1.73 0 01-.48.66 2 2 0 01-.75.4 3.5 3.5 0 01-1 .13c-.17 0-.36 0-.59-.02a4.51 4.51 0 01-.66-.09v-4.05a9.16 9.16 0 011.28-.1c.36 0 .68.04.97.12.29.08.54.2.75.38.2.17.37.39.48.66.11.27.17.59.17.96zm1.63 1.44a.9.9 0 00.35-.04c.07-.04.1-.1.1-.2 0-.06-.04-.12-.13-.18a2.31 2.31 0 00-.4-.18 4.45 4.45 0 01-.38-.16 1.18 1.18 0 01-.3-.2.84.84 0 01-.18-.28 1.03 1.03 0 01-.06-.4c0-.3.1-.52.33-.7.22-.17.52-.25.9-.25a2.75 2.75 0 01.97.16l-.15.7a3.2 3.2 0 00-.34-.1 1.8 1.8 0 00-.41-.04c-.28 0-.42.07-.42.23 0 .04 0 .07.02.1a.23.23 0 00.07.08 1.77 1.77 0 00.38.18c.2.07.36.14.49.22.13.06.23.14.3.22.07.08.13.17.15.27.04.1.05.22.05.35a.8.8 0 01-.35.7c-.23.17-.56.25-1 .25a2.9 2.9 0 01-.7-.07 2.85 2.85 0 01-.38-.12l.15-.73a2.41 2.41 0 00.94.2z\" fill=\"#fff\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 32 32\" {...props}><path fill=\"#FF444F\" d=\"M0 6a6 6 0 016-6h20a6 6 0 016 6v20a6 6 0 01-6 6H6a6 6 0 01-6-6V6z\" /><path fill=\"#E12E3A\" d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm24.53 2.07L25.04 32H26a6 6 0 006-6V6c0-1.5-.55-2.88-1.47-3.93z\" /><path fill=\"#fff\" d=\"M8.53 20.85v-9.7h6.55v1.83h-4.37v1.9h3.88v1.8h-3.88v2.34h4.7v1.83H8.52zm14.79-8.19a21.5 21.5 0 00-1.07 1.2 38.6 38.6 0 00-1.27 1.6 55.39 55.39 0 00-1.3 1.8c-.43.6-.82 1.2-1.15 1.76h4.94v1.83h-7.63v-1.3c.26-.48.58-1 .95-1.58.39-.6.78-1.18 1.2-1.77a43.21 43.21 0 011.24-1.72c.43-.56.82-1.06 1.19-1.5h-4.36v-1.83h7.26v1.51z\" /></svg>);","import React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => <svg viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}><path d=\"M26 0H6a6 6 0 00-6 6v17.5h32V6a6 6 0 00-6-6z\" fill=\"#0364B9\" /><path d=\"M6 0a6 6 0 00-6 6v.17l29.91-4.72A5.98 5.98 0 0026 0H6zm26 6c0-1.5-.55-2.88-1.47-3.93L26.6 23.5H32V6z\" fill=\"#0A559E\" /><path d=\"M0 23h32v3a6 6 0 01-6 6H6a6 6 0 01-6-6v-3z\" fill=\"#0CC\" /><path d=\"M7.35 9.68l.49.99a44.57 44.57 0 011.2 2.64l.56 1.33.57-1.33a78.87 78.87 0 011.18-2.64l.5-.99h1.71a52.27 52.27 0 01.4 4l.14 2.22.12 2.1H12.4l-.1-2.64c-.04-.95-.1-1.91-.18-2.88a517.56 517.56 0 01-1 2.34 108.94 108.94 0 01-.9 2.12H8.9a118.46 118.46 0 00-.92-2.12l-.51-1.22L7 12.48c-.08.97-.14 1.93-.18 2.88L6.72 18H4.9l.1-2.1.15-2.22.18-2.14c.07-.68.15-1.3.23-1.86h1.79zm14 0v1.6h-2.5V18h-1.87v-6.72h-2.51v-1.6h6.89zm3.97 5.87a1.18 1.18 0 00-.15-.61c-.1-.18-.29-.34-.54-.46a3.8 3.8 0 00-1.04-.27 11.46 11.46 0 00-1.63-.1 50.7 50.7 0 00.35-4.43h4.5v1.5h-3a25.92 25.92 0 01-.12 1.54 4.4 4.4 0 012.58.83c.56.46.84 1.11.84 1.94 0 .39-.07.74-.2 1.07a2.3 2.3 0 01-.62.85 2.9 2.9 0 01-1.03.57 4.56 4.56 0 01-2.12.15 6.41 6.41 0 01-.69-.1 7.3 7.3 0 01-.58-.14 2.3 2.3 0 01-.41-.14l.32-1.48a5.02 5.02 0 001.97.38c.55 0 .95-.1 1.2-.32s.37-.48.37-.78zM11.31 28.87c.13 0 .24 0 .32-.03a.69.69 0 00.21-.09.32.32 0 00.11-.14.48.48 0 00.03-.17c0-.14-.06-.25-.19-.34-.13-.09-.35-.19-.66-.3a5.76 5.76 0 01-.4-.15 1.63 1.63 0 01-.38-.24 1.17 1.17 0 01-.26-.34 1.09 1.09 0 01-.1-.5 1.11 1.11 0 01.41-.91c.14-.1.3-.18.48-.24.2-.06.4-.09.64-.09a2.59 2.59 0 011.23.29l-.27.74a2.33 2.33 0 00-.39-.16 1.58 1.58 0 00-.51-.07.93.93 0 00-.49.1c-.1.05-.14.15-.14.28 0 .07.02.14.05.19.04.05.09.1.15.14l.23.12.29.1c.22.08.4.16.56.24.16.07.3.16.4.27a.97.97 0 01.24.36c.05.14.08.31.08.51 0 .4-.14.7-.41.91-.27.21-.68.32-1.23.32-.18 0-.35-.01-.5-.04a2.48 2.48 0 01-.69-.18 2.41 2.41 0 01-.2-.1l.26-.74c.13.06.28.13.46.18a2.5 2.5 0 00.67.08zm5.09-3l.15.56.2.63.2.66c.06.22.13.43.2.62a18.97 18.97 0 00.3-1.41 62.02 62.02 0 00.28-1.5h.97a40.98 40.98 0 01-.49 2.11c-.18.72-.37 1.4-.59 2.04h-.85a28.26 28.26 0 01-.41-1.2l-.4-1.27-.38 1.27c-.13.42-.26.82-.4 1.2h-.86a32 32 0 01-.6-2.04c-.17-.71-.33-1.42-.47-2.11h1.01a43.02 43.02 0 00.28 1.5 58.65 58.65 0 00.33 1.4 12.62 12.62 0 00.4-1.28l.18-.63.15-.55h.8zm2.9 3.71v-4.15h2.78v.78h-1.84v.87h1.64v.79h-1.64v1.72h-.94z\" fill=\"#fff\" /></svg>);","import React from 'react';\nimport { Clipboard } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { TCFDAccountCopy } from './props.types';\n\nconst CFDAccountCopy = ({ text, className }: TCFDAccountCopy) => {\n    return (\n        <div className={className} data-testid='cfd_account_copy_main_div'>\n            <Clipboard\n                text_copy={text}\n                info_message={isMobile() ? '' : localize('copy')}\n                success_message={localize('copied!')}\n                popoverAlignment={isMobile() ? 'left' : 'bottom'}\n            />\n        </div>\n    );\n};\n\nexport { CFDAccountCopy };\n","import PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Button, Icon, Modal, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\n\nconst Checkmark = ({ className }) => (\n    <Icon className={className} icon='IcCheckmarkCircle' custom_color='var(--status-success)' size={24} />\n);\n\nconst SuccessDialog = ({\n    classNameMessage = '',\n    has_cancel,\n    has_submit,\n    icon,\n    message,\n    onCancel,\n    onSubmit,\n    heading,\n    icon_size,\n    text_submit,\n    text_cancel,\n    is_open,\n    toggleModal,\n    title,\n    has_close_icon,\n    width = '',\n    is_medium_button,\n}) => {\n    return (\n        <Modal\n            className='cfd-success-dialog'\n            is_open={is_open}\n            toggleModal={toggleModal}\n            has_close_icon={has_close_icon}\n            small={!title}\n            title={title}\n            width={width}\n        >\n            <Modal.Body>\n                <div\n                    className={classNames('success-change__icon-area', {\n                        'success-change__icon-area--large': icon_size === 'large',\n                        'success-change__icon-area--xlarge': icon_size === 'xlarge',\n                    })}\n                >\n                    {icon}\n                    <Checkmark className='bottom-right-overlay' />\n                </div>\n                {!heading && (\n                    <Text as='h2' weight='bold' size='s' className='dc-modal-header__title'>\n                        <Localize i18n_default_text='Success!' />\n                    </Text>\n                )}\n                {heading && heading}\n                {React.isValidElement(message) && message}\n                {!React.isValidElement(message) && <p className={classNameMessage}>{message}</p>}\n            </Modal.Body>\n            <Modal.Footer>\n                {has_cancel && (\n                    <Button\n                        onClick={onCancel}\n                        has_effect\n                        text={text_cancel || localize('Maybe later')}\n                        secondary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n                {has_submit && (\n                    <Button\n                        has_effect\n                        onClick={onSubmit}\n                        text={text_submit}\n                        primary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nSuccessDialog.defaultProps = {\n    icon_size: 'large',\n    has_cancel: false,\n    has_submit: true,\n};\n\nSuccessDialog.propTypes = {\n    classNameMessage: PropTypes.string,\n    has_cancel: PropTypes.bool,\n    has_close_icon: PropTypes.bool,\n    has_submit: PropTypes.bool,\n    heading: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    icon: PropTypes.object,\n    icon_size: PropTypes.string,\n    icon_type: PropTypes.string,\n    is_medium_button: PropTypes.bool,\n    is_open: PropTypes.bool,\n    message: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    onCancel: PropTypes.func,\n    onSubmit: PropTypes.func,\n    text_cancel: PropTypes.string,\n    text_submit: PropTypes.string,\n    title: PropTypes.string,\n    toggleModal: PropTypes.func,\n    width: PropTypes.string,\n};\n\nexport default SuccessDialog;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik } from 'formik';\nimport { Text, Icon, FormSubmitButton } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { CFD_PLATFORMS, getCFDPlatformLabel } from '@deriv/shared';\nimport { TCFDChangePasswordConfirmationProps } from './props.types';\n\nconst ChangePasswordConfirmation = ({\n    confirm_label,\n    className,\n    platform,\n    onConfirm,\n    onCancel,\n    context,\n}: TCFDChangePasswordConfirmationProps) => (\n    <Formik\n        initialValues={{\n            password: '',\n        }}\n        onSubmit={onConfirm}\n    >\n        {({ isSubmitting, handleSubmit }) => (\n            <form onSubmit={handleSubmit} data-testid='dt_cfd_change_password_form'>\n                <div\n                    className={classNames('cfd-change-password-confirmation__wrapper', {\n                        [`${className}-wrapper`]: className,\n                    })}\n                >\n                    <div className={classNames('cfd-change-password-confirmation', className)}>\n                        <Icon\n                            className='cfd-change-password__icon'\n                            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n                            width='122'\n                            height='108'\n                        />\n                        <Text as='p' align='center' size='s' weight='bold'>\n                            <Localize\n                                i18n_default_text='Confirm to change your {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text\n                            className='cfd-change-password-confirmation__description'\n                            as='p'\n                            align='center'\n                            color='loss-danger'\n                            size='xs'\n                        >\n                            <Localize\n                                i18n_default_text='This will change the password to all of your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <FormSubmitButton\n                            is_center={true}\n                            label={confirm_label || localize('Create')}\n                            cancel_label={localize('Cancel')}\n                            is_loading={isSubmitting}\n                            has_cancel={true}\n                            onCancel={onCancel}\n                            context={context}\n                        />\n                    </div>\n                </div>\n            </form>\n        )}\n    </Formik>\n);\n\nexport default ChangePasswordConfirmation;\n","import React from 'react';\nimport { PoiPoaDocsSubmitted } from '@deriv/account';\nimport { AccountStatusResponse } from '@deriv/api-types';\nimport {\n    Button,\n    DesktopWrapper,\n    Icon,\n    Loading,\n    MobileDialog,\n    MobileWrapper,\n    Modal,\n    Text,\n    UILoader,\n} from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getAuthenticationStatusInfo, isMobile, WS, Jurisdiction } from '@deriv/shared';\nimport CFDFinancialStpRealAccountSignup from './cfd-financial-stp-real-account-signup';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst SwitchToRealAccountMessage = ({ onClickOk }: { onClickOk: () => void }) => (\n    <div className='da-icon-with-message'>\n        <Icon icon={'IcPoaLock'} size={128} />\n        <Text className='da-icon-with-message__text' as='p' size={isMobile() ? 'xs' : 's'} weight='bold'>\n            {localize('Switch to your real account to submit your documents')}\n        </Text>\n        <Button\n            has_effect\n            text={localize('Ok')}\n            onClick={() => {\n                onClickOk();\n            }}\n            className='da-icon-with-message__button'\n            primary\n        />\n    </div>\n);\n\nconst CFDDbviOnboarding = observer(() => {\n    const { client, ui } = useStore();\n\n    const { account_status, fetchAccountSettings, is_virtual, updateAccountStatus, updateMT5Status } = client;\n    const { disableApp, enableApp } = ui;\n\n    const {\n        has_created_account_for_selected_jurisdiction,\n        has_submitted_cfd_personal_details,\n        is_cfd_verification_modal_visible,\n        jurisdiction_selected_shortcode,\n        enableCFDPasswordModal,\n        toggleCFDVerificationModal,\n    } = useCfdStore();\n\n    const [showSubmittedModal, setShowSubmittedModal] = React.useState(true);\n    const [is_loading, setIsLoading] = React.useState(false);\n\n    const getAccountStatusFromAPI = () => {\n        WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n            const { get_account_status } = response;\n\n            if (get_account_status?.authentication) {\n                const {\n                    poi_acknowledged_for_maltainvest,\n                    poi_acknowledged_for_bvi_labuan_vanuatu,\n                    poa_acknowledged,\n                    poa_resubmit_for_labuan,\n                    need_poa_submission,\n                } = getAuthenticationStatusInfo(get_account_status);\n                if (jurisdiction_selected_shortcode === Jurisdiction.MALTA_INVEST) {\n                    setShowSubmittedModal(poi_acknowledged_for_maltainvest && poa_acknowledged);\n                } else if (jurisdiction_selected_shortcode === Jurisdiction.LABUAN) {\n                    /* When verified with IDV+ Photo ID, POA is auto verified */\n                    const is_poa_submitted = poa_resubmit_for_labuan ? false : !need_poa_submission;\n                    setShowSubmittedModal(\n                        poi_acknowledged_for_bvi_labuan_vanuatu &&\n                            has_submitted_cfd_personal_details &&\n                            is_poa_submitted\n                    );\n                } else\n                    setShowSubmittedModal(\n                        poi_acknowledged_for_bvi_labuan_vanuatu &&\n                            poa_acknowledged &&\n                            has_submitted_cfd_personal_details\n                    );\n            }\n\n            setIsLoading(false);\n        });\n        setIsLoading(false);\n    };\n\n    React.useEffect(() => {\n        if (is_cfd_verification_modal_visible) {\n            setIsLoading(true);\n            getAccountStatusFromAPI();\n            fetchAccountSettings();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_cfd_verification_modal_visible]);\n\n    const getModalContent = () => {\n        if (is_loading) {\n            return <Loading is_fullscreen={false} />;\n        } else if (is_virtual) {\n            return <SwitchToRealAccountMessage onClickOk={toggleCFDVerificationModal} />;\n        }\n        return showSubmittedModal ? (\n            <PoiPoaDocsSubmitted\n                onClickOK={toggleCFDVerificationModal}\n                updateAccountStatus={updateAccountStatus}\n                account_status={account_status}\n                jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                has_created_account_for_selected_jurisdiction={has_created_account_for_selected_jurisdiction}\n                openPasswordModal={enableCFDPasswordModal}\n            />\n        ) : (\n            <CFDFinancialStpRealAccountSignup\n                onFinish={() => {\n                    updateMT5Status();\n                    if (has_created_account_for_selected_jurisdiction) {\n                        setShowSubmittedModal(true);\n                    } else {\n                        toggleCFDVerificationModal();\n                        enableCFDPasswordModal();\n                    }\n                }}\n            />\n        );\n    };\n\n    const getModalTitle = () =>\n        has_created_account_for_selected_jurisdiction\n            ? localize('Submit your proof of identity and address')\n            : localize('Add a real MT5 account');\n\n    return (\n        <React.Suspense fallback={<UILoader />}>\n            <DesktopWrapper>\n                <Modal\n                    className='cfd-financial-stp-modal'\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    is_open={is_cfd_verification_modal_visible}\n                    title={getModalTitle()}\n                    toggleModal={toggleCFDVerificationModal}\n                    height='700px'\n                    width='996px'\n                    onMount={() => getAccountStatusFromAPI()}\n                    exit_classname='cfd-modal--custom-exit'\n                >\n                    {getModalContent()}\n                </Modal>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <MobileDialog\n                    portal_element_id='deriv_app'\n                    title={getModalTitle()}\n                    wrapper_classname='cfd-financial-stp-modal'\n                    visible={is_cfd_verification_modal_visible}\n                    onClose={toggleCFDVerificationModal}\n                >\n                    {getModalContent()}\n                </MobileDialog>\n            </MobileWrapper>\n        </React.Suspense>\n    );\n});\n\nexport default CFDDbviOnboarding;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst AccountStatusList = [\n    'address_verified',\n    'age_verification',\n    'allow_document_upload',\n    'allow_poa_resubmission',\n    'allow_poi_resubmission',\n    'authenticated',\n    'authenticated_with_idv_photoid',\n    'cashier_locked',\n    'crs_tin_information',\n    'deposit_attempt',\n    'deposit_locked',\n    'df_deposit_requires_poi',\n    'disabled',\n    'document_expired',\n    'document_expiring_soon',\n    'document_under_review',\n    'dxtrade_password_not_set',\n    'financial_assessment_not_complete',\n    'financial_information_not_complete',\n    'financial_risk_approval',\n    'idv_revoked',\n    'max_turnover_limit_not_set',\n    'mt5_password_not_set',\n    'mt5_withdrawal_locked',\n    'needs_affiliate_coc_approval',\n    'no_trading',\n    'no_withdrawal_or_trading',\n    'p2p_blocked_for_pa',\n    'pa_withdrawal_explicitly_allowed',\n    'password_reset_required',\n    'personal_details_locked',\n    'poi_name_mismatch',\n    'professional',\n    'professional_requested',\n    'professional_rejected',\n    'shared_payment_method',\n    'social_signup',\n    'transfers_blocked',\n    'trading_experience_not_complete',\n    'ukgc_funds_protection',\n    'unwelcome',\n    'withdrawal_locked',\n] as const;\n\ntype TAccountStatus = typeof AccountStatusList[number];\n\nexport const useIsAccountStatusPresent = (status: TAccountStatus) => {\n    const {\n        client: { account_status },\n    } = useStore();\n\n    const status_list = account_status?.status;\n\n    return React.useMemo(() => status_list?.includes(status) ?? false, [status_list, status]);\n};\n","import { Field, FieldProps, Formik, FormikHelpers as FormikActions, FormikProps } from 'formik';\nimport React from 'react';\nimport { LandingCompany, ResidenceList } from '@deriv/api-types';\nimport {\n    Autocomplete,\n    AutoHeightWrapper,\n    DesktopWrapper,\n    Div100vhContainer,\n    Dropdown,\n    FormSubmitButton,\n    FormSubmitErrorMessage,\n    Input,\n    Loading,\n    MobileWrapper,\n    Modal,\n    SelectNative,\n    Text,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport { isDeepEqual, isDesktop, isMobile } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\ntype TCFDPersonalDetailsFormProps = {\n    changeable_fields?: string[];\n    form_error?: string;\n    index: number;\n    is_loading: boolean;\n    landing_company: LandingCompany;\n    onSubmit: TOnSubmit;\n    residence_list: ResidenceList;\n    value: TFormValues;\n};\n\ntype TValidatePersonalDetailsParams = {\n    values: TFormValues;\n    residence_list: ResidenceList;\n    account_opening_reason: TAccountOpeningReasonList;\n    is_tin_required: boolean;\n};\n\ntype TFindDefaultValuesInResidenceList = (params: {\n    residence_list: ResidenceList;\n    citizen_text: string;\n    tax_residence_text: string;\n    place_of_birth_text?: string;\n}) => {\n    citizen?: ResidenceList[0];\n    place_of_birth?: ResidenceList[0];\n    tax_residence?: ResidenceList[0];\n};\n\ntype TCFDInputFieldProps = {\n    id?: string;\n    value?: string;\n    name: string;\n    maxLength?: number;\n    label: string;\n    optional?: boolean;\n    required?: boolean;\n    placeholder: string;\n    disabled?: boolean;\n    onBlur: (e: React.FocusEvent<HTMLInputElement>) => void;\n};\n\ntype TFormValues = { [key: string]: string };\n\ntype TOnSubmit = (\n    index: number,\n    value: TFormValues,\n    setSubmitting: (isSubmitting: boolean) => void,\n    is_dirty?: boolean\n) => void;\n\ntype TSubmitForm = (\n    values: TFormValues,\n    actions: FormikActions<TFormValues>,\n    idx: number,\n    onSubmitFn: TOnSubmit,\n    is_dirty: boolean,\n    residence_list: ResidenceList\n) => void;\n\ntype TAccountOpeningReasonList = {\n    text: string;\n    value: string;\n}[];\n\nconst getAccountOpeningReasonList = (): TAccountOpeningReasonList => [\n    {\n        text: localize('Hedging'),\n        value: 'Hedging',\n    },\n    {\n        text: localize('Income Earning'),\n        value: 'Income Earning',\n    },\n    {\n        text: localize('Speculative'),\n        value: 'Speculative',\n    },\n    {\n        text: localize('Peer-to-peer exchange'),\n        value: 'Peer-to-peer exchange',\n    },\n];\n\nexport const InputField = ({ maxLength, name, optional = false, ...props }: TCFDInputFieldProps) => (\n    <Field name={name}>\n        {({ field, form: { errors, touched } }: FieldProps<string, TFormValues>) => (\n            <Input\n                {...field}\n                type='text'\n                required={!optional}\n                name={name}\n                autoComplete='off'\n                maxLength={maxLength || 30}\n                error={touched[field.name as keyof TFormValues] && errors[field.name as keyof TFormValues]}\n                {...props}\n            />\n        )}\n    </Field>\n);\n\nconst validatePersonalDetails = ({\n    values,\n    residence_list,\n    account_opening_reason,\n    is_tin_required,\n}: TValidatePersonalDetailsParams) => {\n    const [tax_residence_obj] = residence_list.filter(res => res.text === values.tax_residence && res.tin_format);\n\n    const tin_format = tax_residence_obj?.tin_format;\n\n    const tin_regex = tin_format || ['^[A-Za-z0-9./s-]{0,25}$']; // fallback to API's default rule check\n\n    const validations: { [key: string]: ((v: string) => boolean | RegExpMatchArray | null)[] } = {\n        citizen: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n        tax_residence: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n        tax_identification_number: [\n            (v: string) => ((!values.tax_residence && is_tin_required) || tin_format ? !!v : true),\n            (v: string) => (tin_regex ? tin_regex?.some(regex => v.match(regex)) : true),\n        ],\n        account_opening_reason: [\n            (v: string) => !!v,\n            (v: string) => account_opening_reason.map(i => i.value).includes(v),\n        ],\n        place_of_birth: [(v: string) => !!v, (v: string) => residence_list.map(i => i.text).includes(v)],\n    };\n    const mappedKey: { [key: string]: string } = {\n        citizen: localize('Citizenship'),\n        tax_residence: localize('Tax residence'),\n        tax_identification_number: localize('Tax identification number'),\n        account_opening_reason: localize('Account opening reason'),\n        place_of_birth: localize('Place of birth'),\n    };\n\n    const field_error_messages = (field_name: string): string[] => [\n        localize('{{field_name}} is required', { field_name }),\n        localize('{{field_name}} is not properly formatted.', { field_name }),\n    ];\n\n    const errors: { [key: string]: React.ReactNode } = {};\n\n    Object.entries(validations).forEach(([key, rules]) => {\n        const error_index = rules.findIndex(v => !v(values[key as 'citizen']));\n        if (error_index !== -1) {\n            errors[key] = field_error_messages(mappedKey[key])[error_index];\n        }\n    });\n\n    return errors;\n};\n\nconst findDefaultValuesInResidenceList: TFindDefaultValuesInResidenceList = ({\n    residence_list,\n    citizen_text,\n    tax_residence_text,\n    place_of_birth_text,\n}) => {\n    let citizen, tax_residence, place_of_birth;\n    residence_list?.forEach((item: ResidenceList[0]) => {\n        if (item.text === citizen_text) {\n            citizen = item;\n        }\n        if (item.text === place_of_birth_text) {\n            place_of_birth = item;\n        }\n        if (item.text === tax_residence_text) {\n            tax_residence = item;\n        }\n    });\n    return { citizen, place_of_birth, tax_residence };\n};\n\nconst submitForm: TSubmitForm = (values, actions, idx, onSubmit, is_dirty, residence_list) => {\n    const { citizen, place_of_birth, tax_residence } = findDefaultValuesInResidenceList({\n        residence_list,\n        citizen_text: values.citizen,\n        tax_residence_text: values.tax_residence,\n        place_of_birth_text: values.place_of_birth,\n    });\n\n    const payload = {\n        ...values,\n        citizen: citizen?.value || '',\n        place_of_birth: place_of_birth?.value || '',\n        tax_residence: tax_residence?.value || '',\n    };\n    onSubmit(idx, payload, actions.setSubmitting, is_dirty);\n};\n\nconst CFDPersonalDetailsForm = ({\n    changeable_fields,\n    is_loading,\n    landing_company,\n    residence_list,\n    onSubmit,\n    value,\n    index,\n    form_error,\n}: TCFDPersonalDetailsFormProps) => {\n    const account_opening_reason = getAccountOpeningReasonList();\n    const is_tin_required = !!(landing_company?.config?.tax_details_required ?? false);\n\n    const onSubmitForm = (values: TFormValues, actions: FormikActions<TFormValues>) =>\n        submitForm(values, actions, index, onSubmit, !isDeepEqual(value, values), residence_list);\n\n    if (residence_list.length === 0) return <Loading is_fullscreen={false} />;\n    if (is_loading) return <Loading is_fullscreen={false} />;\n\n    return (\n        <Formik\n            initialValues={{ ...value }}\n            validateOnChange\n            validateOnBlur\n            validate={values =>\n                validatePersonalDetails({\n                    values,\n                    residence_list,\n                    account_opening_reason,\n                    is_tin_required,\n                })\n            }\n            onSubmit={onSubmitForm}\n            validateOnMount\n        >\n            {({\n                handleSubmit,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                errors,\n                touched,\n                values,\n                setFieldValue,\n                isValid,\n            }: FormikProps<TFormValues>) => {\n                const citizenship_error = touched.citizen && errors.citizen;\n                const place_of_birth_error = touched.place_of_birth && errors.place_of_birth;\n                const tax_residence_error = touched.tax_residence && errors.tax_residence;\n                const account_opening_reason_error = touched.account_opening_reason && errors.account_opening_reason;\n\n                const is_citizenship_disabled = !!value.citizen && !changeable_fields?.includes('citizen');\n                const is_place_of_birth_disabled =\n                    !!value.place_of_birth && !changeable_fields?.includes('place_of_birth');\n                const is_tax_residence_disabled =\n                    !!value.tax_residence && !changeable_fields?.includes('tax_residence');\n                const is_account_opening_reason_disabled =\n                    !!value.account_opening_reason && !changeable_fields?.includes('account_opening_reason');\n                const handleItemSelection = (item: ResidenceList[0], _field: string) => {\n                    const item_value = item.value ? item.text : '';\n                    setFieldValue(_field, item_value, true);\n                };\n                const tin_field_label = residence_list.find(res => res.text === values.tax_residence && res.tin_format)\n                    ?.tin_format\n                    ? localize('Tax identification number*')\n                    : localize('Tax identification number');\n\n                return (\n                    <AutoHeightWrapper default_height={200} height_offset={isDesktop() ? 148 : null}>\n                        {({ setRef }: { setRef: (instance: HTMLFormElement | null) => void }) => (\n                            <form\n                                className='cfd-personal-details-modal__form'\n                                ref={setRef}\n                                onSubmit={handleSubmit}\n                                autoComplete='off'\n                                noValidate\n                            >\n                                <Div100vhContainer\n                                    className='details-form'\n                                    max_autoheight_offset='179px'\n                                    is_disabled={isDesktop()}\n                                >\n                                    <Text\n                                        as='p'\n                                        size='xxs'\n                                        align='center'\n                                        className='details-form__description'\n                                        data-testid='dt_cfd_details_form_description'\n                                    >\n                                        <Localize\n                                            i18n_default_text={\n                                                'Any information you provide is confidential and will be used for verification purposes only.'\n                                            }\n                                        />\n                                    </Text>\n                                    <ThemedScrollbars height='512px' is_bypassed={isMobile()}>\n                                        <div className='details-form__elements'>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='citizen'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                {...field}\n                                                                id='real_mt5_citizenship'\n                                                                data-lpignore='true'\n                                                                autoComplete='off'\n                                                                type='text'\n                                                                label={localize('Citizenship*')}\n                                                                error={citizenship_error}\n                                                                disabled={is_citizenship_disabled}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'citizen')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                required\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Citizenship*')}\n                                                        value={values.citizen}\n                                                        list_items={residence_list}\n                                                        error={citizenship_error}\n                                                        disabled={is_citizenship_disabled}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('citizen', e.target.value, true)\n                                                        }\n                                                        required\n                                                        should_hide_disabled_options={false}\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='place_of_birth'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                {...field}\n                                                                id='real_mt5_place_of_birth'\n                                                                data-lpignore='true'\n                                                                autoComplete='off'\n                                                                type='text'\n                                                                label={localize('Place of birth*')}\n                                                                error={place_of_birth_error}\n                                                                disabled={is_place_of_birth_disabled}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'place_of_birth')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                required\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Place of birth*')}\n                                                        value={values.place_of_birth}\n                                                        list_items={residence_list}\n                                                        error={place_of_birth_error}\n                                                        disabled={is_place_of_birth_disabled}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('place_of_birth', e.target.value, true)\n                                                        }\n                                                        required\n                                                        should_hide_disabled_options={false}\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <DesktopWrapper>\n                                                    <Field name='tax_residence'>\n                                                        {({ field }: FieldProps<string, TFormValues>) => (\n                                                            <Autocomplete\n                                                                id='real_mt5_tax_residence'\n                                                                data-lpignore='true'\n                                                                type='text'\n                                                                autoComplete='off'\n                                                                label={localize('Tax residence*')}\n                                                                error={tax_residence_error}\n                                                                disabled={is_tax_residence_disabled}\n                                                                list_items={residence_list}\n                                                                onItemSelection={(item: ResidenceList[0]) =>\n                                                                    handleItemSelection(item, 'tax_residence')\n                                                                }\n                                                                list_portal_id='modal_root'\n                                                                {...field}\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        placeholder={localize('Please select')}\n                                                        label={localize('Tax residence*')}\n                                                        value={values.tax_residence}\n                                                        error={tax_residence_error}\n                                                        disabled={is_tax_residence_disabled}\n                                                        list_items={residence_list}\n                                                        use_text={true}\n                                                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                                                            setFieldValue('tax_residence', e.target.value, true)\n                                                        }\n                                                        required\n                                                    />\n                                                </MobileWrapper>\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <InputField\n                                                    id='real_mt5_tax_identification_number'\n                                                    name='tax_identification_number'\n                                                    label={tin_field_label}\n                                                    placeholder={tin_field_label}\n                                                    value={values.tax_identification_number}\n                                                    onBlur={handleBlur}\n                                                    disabled={\n                                                        !!value.tax_identification_number &&\n                                                        !changeable_fields?.includes('tax_identification_number')\n                                                    }\n                                                    optional\n                                                />\n                                            </fieldset>\n                                            <Field name='account_opening_reason'>\n                                                {({ field }: FieldProps<string, TFormValues>) => (\n                                                    <React.Fragment>\n                                                        <DesktopWrapper>\n                                                            <Dropdown\n                                                                {...field}\n                                                                placeholder={localize('Account opening reason*')}\n                                                                is_align_text_left\n                                                                name={field.name}\n                                                                list={account_opening_reason}\n                                                                value={values.account_opening_reason}\n                                                                disabled={is_account_opening_reason_disabled}\n                                                                onChange={handleChange}\n                                                                handleBlur={handleBlur}\n                                                                error={account_opening_reason_error}\n                                                                list_portal_id='modal_root'\n                                                            />\n                                                        </DesktopWrapper>\n                                                        <MobileWrapper>\n                                                            <SelectNative\n                                                                {...field}\n                                                                placeholder={localize('Please select')}\n                                                                name={field.name}\n                                                                label={localize('Account opening reason*')}\n                                                                list_items={account_opening_reason}\n                                                                value={values.account_opening_reason}\n                                                                disabled={is_account_opening_reason_disabled}\n                                                                error={account_opening_reason_error}\n                                                                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                                                    handleChange(e);\n                                                                    setFieldValue(\n                                                                        'account_opening_reason',\n                                                                        e.target.value,\n                                                                        true\n                                                                    );\n                                                                }}\n                                                                data_testid='account_opening_reason_mobile'\n                                                            />\n                                                        </MobileWrapper>\n                                                    </React.Fragment>\n                                                )}\n                                            </Field>\n                                        </div>\n                                    </ThemedScrollbars>\n                                </Div100vhContainer>\n                                <Modal.Footer is_bypassed={isMobile()} has_separator>\n                                    {form_error && <FormSubmitErrorMessage message={form_error} />}\n                                    <FormSubmitButton\n                                        is_disabled={isSubmitting || !isValid || Object.keys(errors).length > 0}\n                                        is_absolute={isMobile()}\n                                        label={localize('Next')}\n                                    />\n                                </Modal.Footer>\n                            </form>\n                        )}\n                    </AutoHeightWrapper>\n                );\n            }}\n        </Formik>\n    );\n};\n\nexport default CFDPersonalDetailsForm;\n","import React from 'react';\nimport { Field, FieldProps, Formik, FormikErrors, FormikHelpers, FormikProps } from 'formik';\nimport { AccountStatusResponse, GetSettings, StatesList } from '@deriv/api-types';\nimport {\n    AutoHeightWrapper,\n    DesktopWrapper,\n    Div100vhContainer,\n    Dropdown,\n    FormSubmitButton,\n    Loading,\n    MobileWrapper,\n    Modal,\n    SelectNative,\n    Text,\n    ThemedScrollbars,\n    useStateCallback,\n} from '@deriv/components';\nimport { FileUploaderContainer, FormSubHeader, PoaStatusCodes } from '@deriv/account';\nimport { localize } from '@deriv/translations';\nimport { WS, isDesktop, isMobile, validAddress, validLength, validLetterSymbol, validPostCode } from '@deriv/shared';\nimport { InputField } from './cfd-personal-details-form';\nimport { TJurisdiction } from '../../types';\n\ntype TErrors = {\n    code: string;\n    message: string;\n};\n\ntype TFile = {\n    path: string;\n    lastModified: number;\n    lastModifiedDate: Date;\n    name: string;\n    size: number;\n    type: string;\n    webkitRelativePath: string;\n};\n\ntype TObjDocumentFile = {\n    errors: TErrors[];\n    file: TFile;\n};\n\ntype TFormValuesInputs = {\n    address_city?: string;\n    address_line_1?: string;\n    address_line_2?: string;\n    address_postcode?: string;\n    address_state?: string;\n};\n\ntype TDocumentFile = {\n    document_file?: Array<TObjDocumentFile>;\n    files?: Array<TObjDocumentFile>;\n};\n\ntype TFormValues = TFormValuesInputs & TDocumentFile;\n\ntype TFormValue = GetSettings;\n\ntype TApiResponse = {\n    document_upload: {\n        call_type: number;\n        checksum: string;\n        size: number;\n        status: string;\n        upload_id: number;\n    };\n    passthrough: {\n        document_upload: boolean;\n    };\n    warning?: string;\n};\n\ntype TStoreProofOfAddress = (file_uploader_ref: React.RefObject<(HTMLElement | null) & TUpload>) => void;\n\nexport type TCFDPOAProps = {\n    onSave: (index: number, values: TFormValues) => void;\n    index: number;\n    onSubmit: (index: number, value: TFormValues) => void;\n    refreshNotifications: () => void;\n    form_error: string;\n    account_settings: GetSettings;\n    height: string;\n    states_list: StatesList;\n    storeProofOfAddress: TStoreProofOfAddress;\n    value: TFormValue;\n    jurisdiction_selected_shortcode: TJurisdiction;\n    is_authenticated_with_idv_photoid: boolean;\n};\ntype TUpload = {\n    upload: () => void;\n};\n\nlet file_uploader_ref: React.RefObject<HTMLElement & TUpload>;\n\nconst CFDPOA = ({\n    onSave,\n    index,\n    onSubmit,\n    refreshNotifications,\n    jurisdiction_selected_shortcode,\n    is_authenticated_with_idv_photoid,\n    ...props\n}: TCFDPOAProps) => {\n    const form = React.useRef<FormikProps<TFormValues> | null>(null);\n\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [form_state, setFormState] = useStateCallback({\n        poa_status: 'none',\n        has_poi: false,\n        form_error: '',\n    });\n    const [document_upload, setDocumentUpload] = useStateCallback({ files: [], error_message: null });\n    const [hasPOAFailed, sethasPOAfailed] = React.useState(false);\n\n    const validateForm = (values: TFormValuesInputs) => {\n        // No need to validate if we are waiting for confirmation.\n        if ([PoaStatusCodes.verified, PoaStatusCodes.pending].includes(form_state.poa_status)) {\n            return {};\n        }\n\n        const validations: Record<string, Array<(value: string) => boolean>> = {\n            address_line_1: [\n                (v: string) => !!v && !v.match(/^\\s*$/),\n                (v: string) => validLength(v, { max: 70 }),\n                (v: string) => validAddress(v).is_ok,\n            ],\n            address_line_2: [(v: string) => validLength(v, { max: 70 }), (v: string) => validAddress(v).is_ok],\n            address_city: [\n                (v: string) => !!v && !v.match(/^\\s*$/),\n                (v: string) => validLength(v, { min: 1, max: 35 }),\n                (v: string) => validLetterSymbol(v),\n            ],\n            address_state: [(v: string) => validLength(v, { max: 35 })],\n            address_postcode: [(v: string) => validLength(v, { max: 20 }), (v: string) => !v || validPostCode(v)],\n        };\n\n        const validation_errors: Record<string, Array<string>> = {\n            address_line_1: [\n                localize('First line of address is required'),\n                localize('This should not exceed {{max}} characters.', { max: 70 }),\n                localize('First line of address is not in a proper format.'),\n            ],\n            address_line_2: [\n                localize('This should not exceed {{max}} characters.', { max: 70 }),\n                localize('Second line of address is not in a proper format.'),\n            ],\n            address_city: [\n                localize('Town/City is required.'),\n                localize('This should not exceed {{max_number}} characters.', {\n                    max_number: 35,\n                }),\n                localize('Town/City is not in a proper format.'),\n            ],\n            address_state: [localize('State/Province is not in a proper format.')],\n            address_postcode: [\n                localize('This should not exceed {{max_number}} characters.', {\n                    max_number: 20,\n                }),\n                localize('Only letters, numbers, space, and hyphen are allowed.'),\n            ],\n        };\n\n        const errors: Record<string, string> = {};\n\n        Object.entries(validations).forEach(([key, rules]) => {\n            const error_index = rules.findIndex(v => !v(values[key as keyof TFormValuesInputs] as string));\n            if (error_index !== -1) {\n                errors[key] = validation_errors[key][error_index];\n            }\n        });\n\n        return errors;\n    };\n\n    const onFileDrop = (\n        files: TObjDocumentFile,\n        error_message: string,\n        setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void,\n        setFieldValue: (field: string, files_array: TObjDocumentFile) => void,\n        values: TFormValues\n    ) => {\n        setFieldTouched('document_file', true);\n        setFieldValue('document_file', files);\n        setDocumentUpload({ files, error_message }, () => {\n            // To resolve sync issues with value states (form_values in container component and formik values)\n            // This ensures container values are updated before being validated in runtime  (mt5-financial-stp-real-account-signup.jsx)\n            if (typeof onSave === 'function') {\n                onSave(index, { ...values, ...({ document_file: files } as unknown as TDocumentFile) });\n            }\n        });\n    };\n\n    const onSubmitValues = async (values: TFormValues, actions: FormikHelpers<TFormValues>) => {\n        const uploadables = { ...values };\n        delete uploadables.document_file;\n\n        actions.setSubmitting(true);\n        const data = await WS.setSettings(uploadables);\n        if (data.error) {\n            setFormState({ ...form_state, ...{ form_error: data.error.message } });\n            actions.setSubmitting(false);\n            return;\n        }\n        const { error } = await WS.authorized.storage.getSettings();\n        if (error) {\n            setFormState({ ...form_state, ...{ form_error: error.message } });\n            return;\n        }\n\n        setFormState({ ...form_state, ...{ form_error: '' } });\n\n        try {\n            const api_response = await file_uploader_ref.current?.upload();\n\n            if (api_response && (api_response as TApiResponse)?.warning) {\n                setFormState({ ...form_state, ...{ form_error: (api_response as TApiResponse).warning } });\n                actions.setSubmitting(false);\n                return;\n            }\n            const { error: e } = await WS.authorized.storage.getAccountStatus();\n            if (e) {\n                setFormState({ ...form_state, ...{ form_error: error.message } });\n                actions.setSubmitting(false);\n                return;\n            }\n        } catch (e: unknown) {\n            setFormState({ ...form_state, ...{ form_error: (e as Error).message } });\n        }\n\n        actions.setSubmitting(false);\n        onSave(index, values);\n        onSubmit(index, values);\n    };\n\n    // didMount hook\n    React.useEffect(() => {\n        WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n            WS.wait('states_list').then(() => {\n                const poa_status = response.get_account_status?.authentication?.document?.status;\n                const poi_status = response.get_account_status?.authentication?.identity?.status;\n                const poa_failed_status = ['rejected', 'expired', 'suspected'];\n                if (poa_status && poi_status) {\n                    const needs_poi = poi_status === 'none';\n                    setFormState({ ...form_state, ...{ poa_status, needs_poi, identity_status: poi_status } }, () => {\n                        setIsLoading(false);\n                        refreshNotifications();\n                    });\n                }\n\n                if (poa_status && poa_failed_status.includes(poa_status)) {\n                    sethasPOAfailed(true);\n                }\n            });\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [refreshNotifications, setFormState]);\n\n    const isFormDisabled = (dirty: boolean, errors: FormikErrors<TFormValues>) => {\n        if (form_state.poa_status === PoaStatusCodes.verified) {\n            return false;\n        }\n        return Object.keys(errors).length !== 0;\n    };\n\n    const {\n        states_list,\n        value: { address_line_1, address_line_2, address_city, address_state, address_postcode },\n    } = props;\n    const { form_error, poa_status } = form_state;\n\n    const is_form_visible =\n        !is_loading && (poa_status !== PoaStatusCodes.verified || is_authenticated_with_idv_photoid);\n\n    return (\n        <Formik\n            initialValues={{\n                address_line_1,\n                address_line_2,\n                address_city,\n                address_state,\n                address_postcode,\n                document_file: document_upload.files,\n            }}\n            validateOnMount\n            validate={validateForm}\n            enableReinitialize\n            onSubmit={onSubmitValues}\n            innerRef={form}\n        >\n            {({\n                dirty,\n                errors,\n                handleSubmit,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                setFieldTouched,\n                setFieldValue,\n                values,\n                touched,\n            }: FormikProps<TFormValues>) => {\n                return (\n                    <AutoHeightWrapper default_height={200}>\n                        {({\n                            setRef,\n                            height,\n                        }: {\n                            setRef: (instance: HTMLFormElement | null) => void;\n                            height: number;\n                        }) => (\n                            <form ref={setRef} onSubmit={handleSubmit} className='cfd-proof-of-address'>\n                                <Div100vhContainer\n                                    className='details-form'\n                                    height_offset='100px'\n                                    is_disabled={isDesktop()}\n                                >\n                                    {is_loading && <Loading is_fullscreen={false} />}\n                                    {is_form_visible && (\n                                        <ThemedScrollbars\n                                            autohide={false}\n                                            height={`${height - 77}px`}\n                                            is_bypassed={isMobile()}\n                                        >\n                                            <div className='cfd-proof-of-address__field-area'>\n                                                {hasPOAFailed && (\n                                                    <Text size='xs' align='center' color='loss-danger'>\n                                                        {localize(\n                                                            'We were unable to verify your address with the details you provided. Please check and resubmit or choose a different document type.'\n                                                        )}\n                                                    </Text>\n                                                )}\n                                                <FormSubHeader title={localize('Address information')} />\n                                                <InputField\n                                                    name='address_line_1'\n                                                    maxLength={255}\n                                                    required\n                                                    label={localize('First line of address*')}\n                                                    placeholder={localize('First line of address*')}\n                                                    onBlur={handleBlur}\n                                                />\n                                                <InputField\n                                                    name='address_line_2'\n                                                    maxLength={255}\n                                                    label={localize('Second line of address (optional)')}\n                                                    optional\n                                                    placeholder={localize('Second line of address')}\n                                                    onBlur={handleBlur}\n                                                />\n                                                <div className='cfd-proof-of-address__inline-fields'>\n                                                    <InputField\n                                                        maxLength={255}\n                                                        name='address_city'\n                                                        required\n                                                        label={localize('Town/City*')}\n                                                        placeholder={localize('Town/City*')}\n                                                        onBlur={handleBlur}\n                                                    />\n                                                    <fieldset className='address-state__fieldset'>\n                                                        {states_list?.length > 0 ? (\n                                                            <React.Fragment>\n                                                                <DesktopWrapper>\n                                                                    <Field name='address_state'>\n                                                                        {({\n                                                                            field,\n                                                                        }: FieldProps<string, TFormValues>) => (\n                                                                            <Dropdown\n                                                                                id='address_state'\n                                                                                className='address_state-dropdown'\n                                                                                is_align_text_left\n                                                                                list={states_list}\n                                                                                error={\n                                                                                    touched[\n                                                                                        field.name as keyof TFormValues\n                                                                                    ] &&\n                                                                                    errors[\n                                                                                        field.name as keyof TFormValues\n                                                                                    ]\n                                                                                }\n                                                                                name='address_state'\n                                                                                value={values.address_state}\n                                                                                onChange={handleChange}\n                                                                                placeholder={localize('State/Province')}\n                                                                                list_portal_id='modal_root'\n                                                                            />\n                                                                        )}\n                                                                    </Field>\n                                                                </DesktopWrapper>\n                                                                <MobileWrapper>\n                                                                    <SelectNative\n                                                                        label={localize('State/Province')}\n                                                                        value={values.address_state}\n                                                                        list_items={states_list}\n                                                                        error={\n                                                                            touched.address_state &&\n                                                                            errors.address_state\n                                                                        }\n                                                                        onChange={(\n                                                                            e: React.ChangeEvent<HTMLSelectElement>\n                                                                        ) => {\n                                                                            handleChange(e);\n                                                                            setFieldValue(\n                                                                                'address_state',\n                                                                                e.target.value,\n                                                                                true\n                                                                            );\n                                                                        }}\n                                                                    />\n                                                                </MobileWrapper>\n                                                            </React.Fragment>\n                                                        ) : (\n                                                            // Fallback to input field when states list is empty / unavailable for country\n                                                            <InputField\n                                                                name='address_state'\n                                                                label={localize('State/Province')}\n                                                                placeholder={localize('State/Province')}\n                                                                value={values.address_state}\n                                                                onBlur={handleBlur}\n                                                            />\n                                                        )}\n                                                    </fieldset>\n                                                    <InputField\n                                                        maxLength={255}\n                                                        name='address_postcode'\n                                                        label={localize('Postal/ZIP code')}\n                                                        placeholder={localize('Postal/ZIP code')}\n                                                        onBlur={handleBlur}\n                                                        optional\n                                                    />\n                                                </div>\n                                                <div className='cfd-proof-of-address__file-upload'>\n                                                    <FileUploaderContainer\n                                                        onRef={(ref: React.RefObject<(HTMLElement | null) & TUpload>) =>\n                                                            (file_uploader_ref = ref)\n                                                        }\n                                                        getSocket={WS.getSocket}\n                                                        onFileDrop={(df: {\n                                                            files: TObjDocumentFile;\n                                                            error_message: string;\n                                                        }) =>\n                                                            onFileDrop(\n                                                                df.files,\n                                                                df.error_message,\n                                                                setFieldTouched,\n                                                                setFieldValue,\n                                                                values as TFormValues\n                                                            )\n                                                        }\n                                                    />\n                                                </div>\n                                            </div>\n                                        </ThemedScrollbars>\n                                    )}\n\n                                    <Modal.Footer is_bypassed={isMobile()}>\n                                        {(poa_status === PoaStatusCodes.none || is_form_visible) && (\n                                            <FormSubmitButton\n                                                is_disabled={\n                                                    isFormDisabled(dirty, errors) ||\n                                                    (poa_status !== PoaStatusCodes.verified &&\n                                                        document_upload.files &&\n                                                        document_upload.files.length < 1) ||\n                                                    !!document_upload.error_message\n                                                }\n                                                label={\n                                                    poa_status === PoaStatusCodes.verified\n                                                        ? localize('Submit')\n                                                        : localize('Next')\n                                                }\n                                                is_absolute={isMobile()}\n                                                is_loading={isSubmitting}\n                                                form_error={form_error}\n                                            />\n                                        )}\n                                    </Modal.Footer>\n                                </Div100vhContainer>\n                            </form>\n                        )}\n                    </AutoHeightWrapper>\n                );\n            }}\n        </Formik>\n    );\n};\n\nexport default CFDPOA;\n","import { ProofOfIdentityContainerForMt5 } from '@deriv/account';\nimport React from 'react';\nimport { useStore, observer } from '@deriv/stores';\n\ntype TCFDValue = {\n    poi_state: string;\n};\n\ntype TFormValues = {\n    poi_state?: string;\n};\n\ntype TCFDNotificationByKey = {\n    key: string;\n};\ntype TCFDNotificationMessage = {\n    key: string;\n    should_show_again: string;\n};\n\nexport type TCFDPOIProps = {\n    index: number;\n    onSubmit: (index: number, value: TCFDValue) => void;\n    value: TCFDValue;\n    addNotificationMessageByKey: (key: string) => void;\n    height: string;\n    onSave: (index: number, values: TFormValues) => void;\n    removeNotificationByKey: (key: TCFDNotificationByKey) => void;\n    removeNotificationMessage: (key: TCFDNotificationMessage) => void;\n    jurisdiction_selected_shortcode: string;\n};\n\nconst CFDPOI = observer(({ index, onSave, onSubmit, height, ...props }: TCFDPOIProps) => {\n    const { client, common, notifications, traders_hub } = useStore();\n\n    const {\n        account_status,\n        fetchResidenceList,\n        is_switching,\n        is_virtual,\n        is_high_risk,\n        is_withdrawal_lock,\n        should_allow_authentication,\n        account_settings,\n        residence_list,\n        getChangeableFields,\n        updateAccountStatus,\n    } = client;\n    const { routeBackInApp, app_routing_history } = common;\n    const { refreshNotifications } = notifications;\n    const { is_eu_user } = traders_hub;\n\n    const poi_props = {\n        account_status,\n        fetchResidenceList,\n        is_switching,\n        is_virtual,\n        is_high_risk,\n        is_withdrawal_lock,\n        should_allow_authentication,\n        account_settings,\n        residence_list,\n        routeBackInApp,\n        app_routing_history,\n        refreshNotifications,\n        getChangeableFields,\n        updateAccountStatus,\n        is_eu_user,\n        ...props,\n    };\n\n    const [poi_state, setPOIState] = React.useState<string>('none');\n    const citizen = account_settings?.citizen || account_settings?.country_code;\n    const citizen_data = residence_list?.find(item => item.value === citizen);\n\n    const onStateChange = (status: string) => {\n        setPOIState(status);\n        onSave(index, { poi_state: status });\n        onSubmit(index, { poi_state });\n    };\n    return (\n        <ProofOfIdentityContainerForMt5\n            {...poi_props}\n            height={height}\n            is_from_external={true}\n            onStateChange={(status: string) => onStateChange(status)}\n            citizen_data={citizen_data}\n        />\n    );\n});\n\nexport default CFDPOI;\n","import React from 'react';\nimport { DesktopWrapper, Div100vhContainer, MobileWrapper, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { TCFDPersonalDetailsContainerProps } from './props.types';\nimport CFDPersonalDetailsForm from '../Components/cfd-personal-details-form';\nimport { getPropertyValue, isDesktop, WS } from '@deriv/shared';\nimport { GetSettings } from '@deriv/api-types';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TFormValues = { [key: string]: string };\ntype TSetSubmitting = (isSubmitting: boolean) => void;\n\nconst CFDPersonalDetailsContainer = observer(({ onSubmit }: TCFDPersonalDetailsContainerProps) => {\n    const { client } = useStore();\n\n    const { account_settings, getChangeableFields, landing_company, residence_list, setAccountSettings } = client;\n\n    const [form_error, setFormError] = React.useState('');\n    const [is_loading, setIsLoading] = React.useState(false);\n    const [form_values, setFormValues] = React.useState<TFormValues>({\n        citizen: '',\n        place_of_birth: '',\n        tax_residence: '',\n        tax_identification_number: '',\n        account_opening_reason: '',\n    });\n\n    const initiatePersonalDetails = async (setSubmitting?: TSetSubmitting) => {\n        // force request to update settings cache since settings have been updated\n        let get_settings_response: GetSettings;\n        if (!account_settings) {\n            const response = await WS.authorized.storage.getSettings();\n\n            if (response.error) {\n                setFormError(response.error.message);\n                if (typeof setSubmitting === 'function') {\n                    setSubmitting(false);\n                }\n                return;\n            }\n            get_settings_response = response.get_settings;\n        } else {\n            get_settings_response = account_settings;\n        }\n\n        const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n            get_settings_response;\n\n        setFormValues({\n            ...form_values,\n            citizen: transform(citizen) || '',\n            place_of_birth: transform(place_of_birth) || '',\n            tax_residence: transform(tax_residence) || '',\n            tax_identification_number: tax_identification_number || '',\n            account_opening_reason: account_opening_reason || '',\n        });\n    };\n\n    React.useEffect(() => {\n        setIsLoading(true);\n        initiatePersonalDetails().then(() => {\n            setIsLoading(false);\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const transform = (value: unknown) => {\n        const [result] = residence_list?.filter(item => item.value === value);\n        return getPropertyValue(result, ['text']) || value;\n    };\n\n    const saveFormData = (_index: number, value: TFormValues) => {\n        setFormValues({\n            ...value,\n            citizen: transform(value.citizen),\n            place_of_birth: transform(value.place_of_birth),\n            tax_residence: transform(value.tax_residence),\n        });\n    };\n\n    const updateValue = async (index: number, value: TFormValues, setSubmitting: TSetSubmitting, is_dirty = true) => {\n        if (is_dirty) {\n            // Set account settings\n            const data = await WS.setSettings(value);\n            if (data.error) {\n                setFormError(data.error.message);\n                setSubmitting(false);\n                return;\n            }\n            initiatePersonalDetails(setSubmitting);\n        }\n        saveFormData(index, value);\n        setAccountSettings({ ...account_settings, ...value });\n        onSubmit(index, value);\n    };\n\n    const getPersonalDetailsForm = () => (\n        <Div100vhContainer\n            className='cfd-personal-details-modal'\n            id='cfd-personal-details-modal'\n            is_disabled={isDesktop()}\n            height_offset='40px'\n        >\n            <div className='cfd-personal-details-modal__heading-container'>\n                <Text as='p' weight='bold' align='center' size='s'>\n                    {localize('Complete your personal details')}\n                </Text>\n            </div>\n            <div className='cfd-personal-details-modal__body'>\n                <CFDPersonalDetailsForm\n                    form_error={form_error}\n                    index={2}\n                    is_loading={is_loading}\n                    landing_company={landing_company}\n                    onSubmit={updateValue}\n                    residence_list={residence_list}\n                    changeable_fields={getChangeableFields()}\n                    value={form_values}\n                />\n            </div>\n        </Div100vhContainer>\n    );\n\n    return (\n        <React.Fragment>\n            <DesktopWrapper>{getPersonalDetailsForm()}</DesktopWrapper>\n            <MobileWrapper>{getPersonalDetailsForm()}</MobileWrapper>\n        </React.Fragment>\n    );\n});\n\nexport default CFDPersonalDetailsContainer;\n","import React from 'react';\nimport { Div100vhContainer } from '@deriv/components';\nimport { useIsAccountStatusPresent } from '@deriv/hooks';\nimport { isDesktop, getAuthenticationStatusInfo, Jurisdiction } from '@deriv/shared';\nimport CFDPOA from '../Components/cfd-poa';\nimport CFDPOI from '../Components/cfd-poi';\nimport CFDPersonalDetailsContainer from './cfd-personal-details-container';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { TCoreStores } from '@deriv/stores/types';\n\ntype TCFDFinancialStpRealAccountSignupProps = {\n    onFinish: () => void;\n};\n\ntype TNextStep = (index: number, value: { [key: string]: string | undefined }) => void;\n\ntype TItem = {\n    refreshNotifications: TCoreStores['notifications']['refreshNotifications'];\n    removeNotificationMessage: TCoreStores['notifications']['removeNotificationMessage'];\n    removeNotificationByKey: TCoreStores['notifications']['removeNotificationByKey'];\n    addNotificationMessageByKey: TCoreStores['notifications']['addNotificationMessageByKey'];\n    authentication_status: TCoreStores['client']['authentication_status'];\n    account_settings: TCoreStores['client']['account_settings'];\n    email: TCoreStores['client']['email'];\n    is_fully_authenticated: TCoreStores['client']['is_fully_authenticated'];\n    landing_company: TCoreStores['client']['landing_company'];\n    residence_list: TCoreStores['client']['residence_list'];\n    states_list: TCoreStores['client']['states_list'];\n    fetchStatesList: TCoreStores['client']['fetchStatesList'];\n    account_status: TCoreStores['client']['account_status'];\n    storeProofOfAddress: TCoreStores['modules']['cfd']['storeProofOfAddress'];\n    jurisdiction_selected_shortcode: TCoreStores['modules']['cfd']['jurisdiction_selected_shortcode'];\n    has_submitted_cfd_personal_details: TCoreStores['modules']['cfd']['has_submitted_cfd_personal_details'];\n    onFinish: TCFDFinancialStpRealAccountSignupProps['onFinish'];\n};\n\ntype TItemsState<T extends TItem> = {\n    body: typeof CFDPOI | typeof CFDPOA | typeof CFDPersonalDetailsContainer;\n    form_value: { [key: string]: string | undefined };\n    forwarded_props: Array<Partial<keyof T>>;\n};\n\nconst CFDFinancialStpRealAccountSignup = observer(({ onFinish }: TCFDFinancialStpRealAccountSignupProps) => {\n    const { notifications, client } = useStore();\n\n    const { refreshNotifications, removeNotificationMessage, removeNotificationByKey, addNotificationMessageByKey } =\n        notifications;\n\n    const {\n        authentication_status,\n        account_settings,\n        email,\n        is_fully_authenticated,\n        landing_company,\n        residence_list,\n        states_list,\n        fetchStatesList,\n        account_status,\n    } = client;\n\n    const { storeProofOfAddress, jurisdiction_selected_shortcode, has_submitted_cfd_personal_details } = useCfdStore();\n\n    const passthroughProps = {\n        refreshNotifications,\n        removeNotificationMessage,\n        removeNotificationByKey,\n        addNotificationMessageByKey,\n        authentication_status,\n        account_settings,\n        email,\n        is_fully_authenticated,\n        landing_company,\n        residence_list,\n        states_list,\n        fetchStatesList,\n        account_status,\n        storeProofOfAddress,\n        jurisdiction_selected_shortcode,\n        has_submitted_cfd_personal_details,\n        onFinish,\n    } as const;\n\n    const [step, setStep] = React.useState(0);\n    const [form_error, setFormError] = React.useState('');\n    const state_index = step;\n    let is_mounted = React.useRef(true).current;\n\n    const { need_poi_for_maltainvest, need_poi_for_bvi_labuan_vanuatu } = getAuthenticationStatusInfo(account_status);\n\n    const is_authenticated_with_idv_photoid = useIsAccountStatusPresent('authenticated_with_idv_photoid');\n\n    const poi_config: TItemsState<typeof passthroughProps> = {\n        body: CFDPOI,\n        form_value: {\n            poi_state: 'unknown',\n        },\n        forwarded_props: [\n            'addNotificationMessageByKey',\n            'authentication_status',\n            'refreshNotifications',\n            'removeNotificationMessage',\n            'removeNotificationByKey',\n            'jurisdiction_selected_shortcode',\n        ],\n    };\n\n    const poa_config: TItemsState<typeof passthroughProps> = {\n        body: CFDPOA,\n        form_value: {\n            address_line_1: account_settings.address_line_1,\n            address_line_2: account_settings.address_line_2,\n            address_city: account_settings.address_city,\n            address_state: account_settings.address_state,\n            address_postcode: account_settings.address_postcode,\n            upload_file: '',\n        },\n        forwarded_props: [\n            'states_list',\n            'account_settings',\n            'storeProofOfAddress',\n            'refreshNotifications',\n            'jurisdiction_selected_shortcode',\n        ],\n    };\n\n    const personal_details_config: TItemsState<typeof passthroughProps> = {\n        body: CFDPersonalDetailsContainer,\n        form_value: {\n            citizen: '',\n            place_of_birth: '',\n            tax_residence: '',\n            tax_identification_number: '',\n            account_opening_reason: '',\n        },\n        forwarded_props: ['residence_list', 'landing_company'],\n    };\n\n    const should_show_poi = () => {\n        if (jurisdiction_selected_shortcode === Jurisdiction.MALTA_INVEST) {\n            return need_poi_for_maltainvest;\n        }\n        return need_poi_for_bvi_labuan_vanuatu;\n    };\n\n    const shouldShowPOA = () => {\n        if (Jurisdiction.LABUAN === jurisdiction_selected_shortcode && is_authenticated_with_idv_photoid) {\n            return true;\n        }\n        return !['pending', 'verified'].includes(authentication_status.document_status);\n    };\n\n    const should_show_personal_details =\n        !has_submitted_cfd_personal_details && jurisdiction_selected_shortcode !== Jurisdiction.MALTA_INVEST;\n\n    const verification_configs = [\n        ...(should_show_poi() ? [poi_config] : []),\n        ...(shouldShowPOA() ? [poa_config] : []),\n        ...(should_show_personal_details ? [personal_details_config] : []),\n    ];\n\n    const [items, setItems] = React.useState<TItemsState<typeof passthroughProps>[]>(verification_configs);\n\n    const clearError = () => {\n        setFormError('');\n    };\n\n    React.useEffect(() => {\n        refreshNotifications();\n    }, [items, refreshNotifications]);\n\n    React.useEffect(() => {\n        fetchStatesList();\n    }, [fetchStatesList]);\n\n    const unmount = () => {\n        is_mounted = false;\n        onFinish();\n    };\n\n    const saveFormData = (index: number, value: { [key: string]: string | undefined }) => {\n        if (!is_mounted) return; // avoiding state update on unmounted component\n        const cloned_items: TItemsState<typeof passthroughProps>[] = [...items];\n        cloned_items[index].form_value = value;\n        setItems(cloned_items);\n    };\n\n    const nextStep: TNextStep = (index, value) => {\n        clearError();\n        if (step + 1 < items.length) {\n            saveFormData(index, value);\n            setStep(step + 1);\n        } else unmount();\n    };\n\n    const prevStep = () => {\n        if (step - 1 >= 0) {\n            setStep(step - 1);\n            setFormError('');\n        } else unmount();\n    };\n\n    const getCurrent = (key?: keyof TItemsState<typeof passthroughProps>) => {\n        return key ? items[state_index][key] : items[state_index];\n    };\n\n    const BodyComponent = getCurrent('body') as typeof CFDPOI & typeof CFDPOA & typeof CFDPersonalDetailsContainer;\n\n    const form_value = getCurrent('form_value');\n\n    const passthrough: Partial<TCFDFinancialStpRealAccountSignupProps> & {\n        is_authenticated_with_idv_photoid?: boolean;\n    } = ((getCurrent('forwarded_props') || []) as TItemsState<typeof passthroughProps>['forwarded_props']).reduce(\n        (forwarded_prop, item) => {\n            return Object.assign(forwarded_prop, {\n                [item]: passthroughProps[item],\n            });\n        },\n        {}\n    );\n\n    if (shouldShowPOA()) {\n        passthrough.is_authenticated_with_idv_photoid = is_authenticated_with_idv_photoid;\n    }\n\n    return (\n        <Div100vhContainer\n            className='cfd-financial-stp-modal'\n            id='real_mt5_financial_stp_account_opening'\n            is_disabled={isDesktop()}\n            height_offset='40px'\n        >\n            <div className='cfd-financial-stp-modal__body' data-testid='dt_cfd_financial_stp_modal_body'>\n                <BodyComponent\n                    /** TODO: Body component is 3 different component in which one of them does not have prop `value`\n                     * it needs a refactor\n                     */\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    value={form_value}\n                    index={state_index}\n                    onSubmit={nextStep}\n                    height='auto'\n                    onCancel={prevStep}\n                    onSave={saveFormData}\n                    form_error={form_error}\n                    {...passthrough}\n                />\n            </div>\n        </Div100vhContainer>\n    );\n});\n\nexport default CFDFinancialStpRealAccountSignup;\n","import React from 'react';\nimport { Text, Button, Icon, MultiStep, SendEmailTemplate } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { getCFDPlatformLabel, CFD_PLATFORMS, WS } from '@deriv/shared';\nimport ChangePasswordConfirmation from './cfd-change-password-confirmation';\nimport { TChangePassword, TPasswordResetAndTradingPasswordManager } from './props.types';\n\nconst ChangePassword = ({ platform, onConfirm }: TChangePassword) => (\n    <div className='cfd-change-password'>\n        <Icon\n            className='cfd-change-password__icon'\n            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n            width='122'\n            height='108'\n        />\n        <Text as='p' align='center' size='s' weight='bold'>\n            <Localize\n                i18n_default_text='{{platform}} password'\n                values={{\n                    platform: getCFDPlatformLabel(platform),\n                }}\n            />\n        </Text>\n        <Text as='p' align='center' className='cfd-change-password__description' size='xs'>\n            {platform === CFD_PLATFORMS.MT5 ? (\n                <Localize i18n_default_text='Use this password to log in to your Deriv MT5 accounts on the desktop, web, and mobile apps.' />\n            ) : (\n                <Localize i18n_default_text='Use this password to log in to your Deriv X accounts on the web and mobile apps.' />\n            )}\n        </Text>\n        <Button\n            className='dc-btn dc-btn--primary dc-btn__large dc-modal__container_cfd-reset-password-modal__button'\n            onClick={onConfirm}\n        >\n            <Text size='xs' weight='bold' color='colored-background'>\n                <Localize i18n_default_text='Change password' />\n            </Text>\n        </Button>\n    </div>\n);\n\nconst PasswordReset = ({ email, platform, account_group }: TPasswordResetAndTradingPasswordManager) => {\n    const onClickSendEmail = React.useCallback(() => {\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_group === 'real') {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_group === 'demo') {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n    }, [email, platform, account_group]);\n\n    React.useEffect(() => {\n        onClickSendEmail();\n    }, [onClickSendEmail]);\n\n    return (\n        <SendEmailTemplate\n            title={localize(\"We've sent you an email\")}\n            subtitle={localize('Please click on the link in the email to change your {{platform}} password.', {\n                platform: getCFDPlatformLabel(platform),\n            })}\n            lbl_no_receive={localize(\"Didn't receive the email?\")}\n            txt_resend={localize('Resend email')}\n            txt_resend_in={localize('Resend email in')}\n            onClickSendEmail={onClickSendEmail}\n        />\n    );\n};\n\nconst TradingPasswordManager = ({ platform, email, account_group }: TPasswordResetAndTradingPasswordManager) => {\n    const multi_step_ref = React.useRef<{ goNextStep: () => void; goPrevStep: () => void }>();\n\n    const steps = [\n        {\n            component: <ChangePassword platform={platform} onConfirm={() => multi_step_ref.current?.goNextStep()} />,\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    confirm_label={localize('Confirm')}\n                    platform={platform}\n                    onConfirm={() => multi_step_ref.current?.goNextStep()}\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n        {\n            component: <PasswordReset platform={platform} email={email} account_group={account_group} />,\n        },\n    ];\n\n    return (\n        <div className='cfd-trading-password'>\n            <MultiStep ref={multi_step_ref} steps={steps} />\n        </div>\n    );\n};\n\nexport default TradingPasswordManager;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Field, Form, Formik, FieldProps } from 'formik';\nimport { PasswordInput, PasswordMeter, Text, Button, Icon } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { getErrorMessages } from '@deriv/shared';\nimport { TCFDPasswordSuccessMessage, TInvestorPasswordManager, TPasswordManagerModalFormValues } from './props.types';\n\nconst CFDPasswordSuccessMessage = ({ toggleModal, is_investor }: TCFDPasswordSuccessMessage) => (\n    <div className='cfd-password-manager__success'>\n        <Icon icon='IcPasswordUpdated' size={128} />\n        <Text as='p' size='xxs' align='center'>\n            {is_investor ? (\n                <Localize i18n_default_text='Your investor password has been changed.' />\n            ) : (\n                <Localize i18n_default_text='Your password has been changed.' />\n            )}\n        </Text>\n        <Button onClick={toggleModal} className='cfd-password-manager__success-btn' primary large>\n            <p className='dc-btn__text'>{localize('OK')}</p>\n        </Button>\n    </div>\n);\n\nconst InvestorPasswordManager = ({\n    error_message_investor,\n    is_submit_success_investor,\n    multi_step_ref,\n    onSubmit,\n    setPasswordType,\n    toggleModal,\n    validatePassword,\n}: TInvestorPasswordManager) => {\n    if (is_submit_success_investor) {\n        return <CFDPasswordSuccessMessage toggleModal={toggleModal} is_investor />;\n    }\n\n    const type_investor = 'investor';\n\n    const initial_values = { old_password: '', new_password: '', password_type: `${type_investor}` };\n\n    return (\n        <div className='cfd-password-manager__investor-wrapper'>\n            <Text as='p' size='xs' className='cfd-password-manager--paragraph'>\n                <Localize i18n_default_text='Use this password to grant viewing access to another user. While they may view your trading account, they will not be able to trade or take any other actions.' />\n            </Text>\n            <Text as='p' size='xs' className='cfd-password-manager--paragraph'>\n                <Localize i18n_default_text='If this is the first time you try to create a password, or you have forgotten your password, please reset it.' />\n            </Text>\n            {error_message_investor && (\n                <Text\n                    as='p'\n                    color='loss-danger'\n                    size='xs'\n                    className='cfd-password-manager--error-message'\n                    data-testid='dt_error_message_investor'\n                >\n                    {error_message_investor}\n                </Text>\n            )}\n            <Formik initialValues={initial_values} validate={validatePassword} onSubmit={onSubmit}>\n                {({ isSubmitting, errors, setFieldTouched, values, touched }) => (\n                    <Form className='cfd-password-manager__investor-form' noValidate>\n                        <Field name='old_password'>\n                            {({ field }: FieldProps<string, TPasswordManagerModalFormValues>) => (\n                                <PasswordInput\n                                    {...field}\n                                    autoComplete='current-password'\n                                    label={localize('Current investor password')}\n                                    error={touched.old_password && errors.old_password}\n                                    required\n                                />\n                            )}\n                        </Field>\n                        <Field name='new_password'>\n                            {({ field }: FieldProps<string, TPasswordManagerModalFormValues>) => (\n                                <PasswordMeter\n                                    input={field.value}\n                                    has_error={!!(touched.new_password && errors.new_password)}\n                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                >\n                                    {({ has_warning }: { has_warning: boolean }) => (\n                                        <PasswordInput\n                                            {...field}\n                                            autoComplete='new-password'\n                                            label={localize('New investor password')}\n                                            hint={\n                                                !has_warning &&\n                                                localize(\n                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters and numbers.'\n                                                )\n                                            }\n                                            error={touched.new_password && errors.new_password}\n                                            onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                                                setFieldTouched('new_password', true, true);\n                                                field.onChange(e);\n                                            }}\n                                            className='cfd-password-manager__new-password'\n                                            required\n                                        />\n                                    )}\n                                </PasswordMeter>\n                            )}\n                        </Field>\n                        <div className='cfd-password-manager__actions'>\n                            <Button\n                                className='cfd-password-manager--button'\n                                is_disabled={\n                                    isSubmitting ||\n                                    !values.old_password ||\n                                    !values.new_password ||\n                                    Object.keys(errors).length > 0\n                                }\n                                is_loading={isSubmitting}\n                                text={localize('Change investor password')}\n                                primary\n                                large\n                            />\n                            <Button\n                                className='cfd-password-manager--button'\n                                type='button'\n                                onClick={() => {\n                                    setPasswordType('investor');\n                                    multi_step_ref.current?.goNextStep();\n                                }}\n                                text={localize('Create or reset investor password')}\n                                tertiary\n                                large\n                            />\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nInvestorPasswordManager.propTypes = {\n    error_message_investor: PropTypes.string,\n    is_submit_success_investor: PropTypes.bool,\n    multi_step_ref: PropTypes.object,\n    onSubmit: PropTypes.func,\n    setPasswordType: PropTypes.func,\n    toggleModal: PropTypes.func,\n    validatePassword: PropTypes.func,\n};\n\nexport default InvestorPasswordManager;\n","import React from 'react';\nimport {\n    Icon,\n    Modal,\n    Tabs,\n    Button,\n    DesktopWrapper,\n    Div100vhContainer,\n    MobileWrapper,\n    MultiStep,\n    PageOverlay,\n    ThemedScrollbars,\n    UILoader,\n    Text,\n} from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport {\n    isMobile,\n    validLength,\n    validPassword,\n    getErrorMessages,\n    getCFDPlatformLabel,\n    CFD_PLATFORMS,\n} from '@deriv/shared';\nimport { FormikErrors } from 'formik';\nimport CFDStore from '../Stores/Modules/CFD/cfd-store';\nimport TradingPasswordManager from './trading-password-manager';\nimport InvestorPasswordManager from './investor-password-manager';\nimport {\n    TCountdownComponent,\n    TCFDPasswordReset,\n    TCFDPasswordManagerTabContentWrapper,\n    TCFDPasswordManagerTabContent,\n    TCFDPasswordManagerModal,\n    TFormValues,\n    TPasswordManagerModalFormValues,\n} from './props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst CountdownComponent = ({ count_from = 60, onTimeout }: TCountdownComponent) => {\n    const [count, setCount] = React.useState<number>(count_from);\n\n    React.useEffect(() => {\n        let interval: ReturnType<typeof setTimeout>;\n\n        if (count !== 0) {\n            interval = setTimeout(() => {\n                setCount(count - 1);\n            }, 1000);\n        } else {\n            onTimeout();\n        }\n\n        return () => {\n            clearTimeout(interval);\n        };\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [count]);\n    return <span className='countdown'>{count}</span>;\n};\n\nconst CFDPasswordReset = ({\n    sendVerifyEmail,\n    account_type,\n    account_group,\n    server,\n    password_type,\n}: TCFDPasswordReset) => {\n    const [is_resend_verification_requested, setResendVerification] = React.useState<boolean>(false);\n    const [is_resend_verification_sent, setResendVerificationSent] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        localStorage.setItem('cfd_reset_password_intent', [server, account_group, account_type].join('.'));\n        localStorage.setItem('cfd_reset_password_type', password_type);\n        sendVerifyEmail();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onClickVerification = () => {\n        setResendVerification(true);\n    };\n\n    const resendVerification = () => {\n        sendVerifyEmail();\n        setResendVerificationSent(true);\n    };\n\n    return (\n        <div className='cfd-verification-email-sent'>\n            <Icon icon='IcEmailSent' size={128} />\n            <h2 className='cfd-verification-email-sent__title'>\n                <Localize i18n_default_text=\"We've sent you an email\" />\n            </h2>\n            <Text as='p' size='xs' align='center'>\n                <Localize i18n_default_text='Please click on the link in the email to reset your password.' />\n            </Text>\n            {!is_resend_verification_requested && (\n                <Button className='cfd-verification-email-sent__resend-button' primary onClick={onClickVerification}>\n                    <Localize i18n_default_text=\"Didn't receive the email?\" />\n                </Button>\n            )}\n            {is_resend_verification_requested && (\n                <>\n                    <Text\n                        as='p'\n                        size='xs'\n                        align='center'\n                        weight='bold'\n                        className='cfd-verification-email-sent__title--sub'\n                    >\n                        <Localize i18n_default_text={\"Didn't receive the email?\"} />\n                    </Text>\n                    <Text as='p' size='xs' align='center'>\n                        <Localize i18n_default_text=\"Check your spam or junk folder. If it's not there, try resending the email.\" />\n                    </Text>\n                    <Button\n                        className='cfd-verification-email-sent__resend-button'\n                        large\n                        primary\n                        disabled={is_resend_verification_sent}\n                        onClick={resendVerification}\n                    >\n                        {!is_resend_verification_sent && <Localize i18n_default_text='Resend email' />}\n                        {is_resend_verification_sent && (\n                            <>\n                                <Localize\n                                    i18n_default_text='Resend in <0 /> seconds'\n                                    components={[\n                                        <CountdownComponent\n                                            key={0}\n                                            onTimeout={() => setResendVerificationSent(false)}\n                                            count_from={60}\n                                        />,\n                                    ]}\n                                />\n                            </>\n                        )}\n                    </Button>\n                </>\n            )}\n        </div>\n    );\n};\n\nconst CFDPasswordManagerTabContentWrapper = ({ multi_step_ref, steps }: TCFDPasswordManagerTabContentWrapper) => (\n    <MultiStep ref={multi_step_ref} steps={steps} className='cfd-password-manager' lbl_previous={localize('Back')} />\n);\n\nconst CFDPasswordManagerTabContent = ({\n    toggleModal,\n    selected_login,\n    email,\n    setPasswordType,\n    multi_step_ref,\n    platform,\n    onChangeActiveTabIndex,\n    account_group,\n}: TCFDPasswordManagerTabContent) => {\n    const [active_tab_index, setActiveTabIndex] = React.useState<number>(0);\n    const [error_message_investor, setErrorMessageInvestor] = React.useState<string>('');\n    const [is_submit_success_investor, setSubmitSuccessInvestor] = React.useState<boolean>(false);\n\n    // view height - margin top and bottom of modal - modal title - modal content margin top and bottom - table title\n    const container_height = 'calc(100vh - 84px - 5.6rem - 8.8rem - 4rem)';\n    const validatePassword = (values: TFormValues) => {\n        const errors: FormikErrors<TFormValues> = {};\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        } else if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        if (!values.old_password && values.old_password !== undefined) {\n            errors.old_password = localize('This field is required');\n        }\n\n        return errors;\n    };\n    const showError = (error_message: string) => {\n        setErrorMessageInvestor(error_message);\n    };\n\n    const hideError = () => {\n        setErrorMessageInvestor('');\n        setSubmitSuccessInvestor(true);\n    };\n\n    const onSubmit = React.useCallback(\n        async (values: TPasswordManagerModalFormValues) => {\n            if (!selected_login) {\n                return;\n            }\n\n            const error = await CFDStore.changePassword({ login: selected_login, ...values });\n            if (error) {\n                showError(error);\n            } else {\n                hideError();\n            }\n        },\n        [selected_login]\n    );\n\n    const updateAccountTabIndex = (index: number) => {\n        setActiveTabIndex(index);\n        onChangeActiveTabIndex(index);\n        setErrorMessageInvestor('');\n        setSubmitSuccessInvestor(false);\n    };\n\n    const trading_password_manager = (\n        <React.Fragment>\n            <DesktopWrapper>\n                <ThemedScrollbars height={container_height} is_bypassed={isMobile()} autohide={false}>\n                    <TradingPasswordManager\n                        toggleModal={toggleModal}\n                        platform={platform}\n                        email={email}\n                        account_group={account_group}\n                    />\n                </ThemedScrollbars>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <Div100vhContainer className='cfd-password-manager__scroll-wrapper' height_offset='120px'>\n                    <TradingPasswordManager\n                        toggleModal={toggleModal}\n                        platform={platform}\n                        email={email}\n                        account_group={account_group}\n                    />\n                </Div100vhContainer>\n            </MobileWrapper>\n        </React.Fragment>\n    );\n\n    if (platform === CFD_PLATFORMS.DXTRADE) return trading_password_manager;\n\n    return (\n        <Tabs active_index={active_tab_index} onTabItemClick={updateAccountTabIndex} top>\n            <div\n                label={localize('{{platform}} password', {\n                    platform: getCFDPlatformLabel(platform),\n                })}\n            >\n                {trading_password_manager}\n            </div>\n            <div label={localize('Investor password')}>\n                <DesktopWrapper>\n                    <ThemedScrollbars height={container_height}>\n                        <InvestorPasswordManager\n                            is_submit_success_investor={is_submit_success_investor}\n                            toggleModal={toggleModal}\n                            error_message_investor={error_message_investor}\n                            validatePassword={validatePassword}\n                            onSubmit={onSubmit}\n                            setPasswordType={setPasswordType}\n                            multi_step_ref={multi_step_ref}\n                        />\n                    </ThemedScrollbars>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <Div100vhContainer className='cfd-password-manager__scroll-wrapper' height_offset='120px'>\n                        <InvestorPasswordManager\n                            is_submit_success_investor={is_submit_success_investor}\n                            toggleModal={toggleModal}\n                            error_message_investor={error_message_investor}\n                            validatePassword={validatePassword}\n                            onSubmit={onSubmit}\n                            setPasswordType={setPasswordType}\n                            multi_step_ref={multi_step_ref}\n                        />\n                    </Div100vhContainer>\n                </MobileWrapper>\n            </div>\n        </Tabs>\n    );\n};\n\nconst CFDPasswordManagerModal = observer(\n    ({\n        is_visible,\n        platform,\n        selected_login,\n        toggleModal,\n        selected_account_type,\n        selected_account_group,\n        selected_server,\n    }: TCFDPasswordManagerModal) => {\n        const { client, ui } = useStore();\n\n        const { email } = client;\n        const { enableApp, disableApp } = ui;\n\n        const { sendVerifyEmail } = useCfdStore();\n\n        const multi_step_ref: React.MutableRefObject<undefined> = React.useRef();\n        const [index, setIndex] = React.useState<number>(0);\n\n        const [password_type, setPasswordType] = React.useState('main');\n\n        if (!selected_login) return null;\n\n        const getTitle = () => {\n            return localize('Manage {{platform}} password', {\n                platform: getCFDPlatformLabel(platform),\n            });\n        };\n\n        const getHeader = (i: number) => {\n            if (i === 0) {\n                return localize('Manage {{platform}} password', {\n                    platform: getCFDPlatformLabel(platform),\n                });\n            }\n            return localize('Manage password');\n        };\n\n        const onChangeActiveTabIndex = (i: number) => {\n            setIndex(i);\n        };\n\n        const steps = [\n            {\n                component: (\n                    <CFDPasswordManagerTabContent\n                        email={email}\n                        selected_login={selected_login}\n                        toggleModal={toggleModal}\n                        setPasswordType={setPasswordType}\n                        multi_step_ref={multi_step_ref}\n                        platform={platform}\n                        onChangeActiveTabIndex={onChangeActiveTabIndex}\n                        account_group={selected_account_group}\n                    />\n                ),\n            },\n            {\n                component: (\n                    <CFDPasswordReset\n                        server={selected_server}\n                        sendVerifyEmail={sendVerifyEmail}\n                        account_type={selected_account_type}\n                        account_group={selected_account_group}\n                        password_type={password_type}\n                    />\n                ),\n            },\n        ];\n\n        return (\n            <React.Suspense fallback={<UILoader />}>\n                <DesktopWrapper>\n                    <Modal\n                        className='cfd-password-manager__modal'\n                        disableApp={disableApp}\n                        enableApp={enableApp}\n                        is_open={is_visible}\n                        title={getTitle()}\n                        toggleModal={toggleModal}\n                        height='688px'\n                        width='904px'\n                        should_header_stick_body={false}\n                    >\n                        <CFDPasswordManagerTabContentWrapper steps={steps} multi_step_ref={multi_step_ref} />\n                    </Modal>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <PageOverlay\n                        is_open={is_visible}\n                        portal_id='deriv_app'\n                        header={getHeader(index)}\n                        onClickClose={toggleModal}\n                    >\n                        <CFDPasswordManagerTabContentWrapper steps={steps} multi_step_ref={multi_step_ref} />\n                    </PageOverlay>\n                </MobileWrapper>\n            </React.Suspense>\n        );\n    }\n);\n\nexport default CFDPasswordManagerModal;\n","import { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport { SentEmailModal } from '@deriv/account';\nimport {\n    getDxCompanies,\n    getMtCompanies,\n    getDerivezCompanies,\n    getFormattedJurisdictionCode,\n    TMtCompanies,\n    TDxCompanies,\n    TDerivezCompanies,\n} from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport {\n    FormSubmitButton,\n    Icon,\n    MobileDialog,\n    Modal,\n    PasswordInput,\n    PasswordMeter,\n    Text,\n    MultiStep,\n} from '@deriv/components';\nimport {\n    CFD_PLATFORMS,\n    getAuthenticationStatusInfo,\n    getCFDPlatformLabel,\n    getErrorMessages,\n    getLegalEntityName,\n    isDesktop,\n    isMobile,\n    Jurisdiction,\n    routes,\n    validLength,\n    validPassword,\n    WS,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport SuccessDialog from '../Components/success-dialog.jsx';\nimport '../sass/cfd.scss';\nimport ChangePasswordConfirmation from './cfd-change-password-confirmation';\nimport TradingPlatformIcon from '../Assets/svgs/trading-platform';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nexport type TCFDPasswordFormValues = { password: string };\n\ntype TOnSubmitPassword = (values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) => void;\n\ntype TPasswordModalHeaderProps = {\n    should_set_trading_password: boolean;\n    is_password_reset_error: boolean;\n    platform: string;\n    has_mt5_account?: boolean;\n};\n\ntype TIconTypeProps = {\n    platform: string;\n    type?: string;\n    show_eu_related_content: boolean;\n};\n\ntype TCFDPasswordFormReusedProps = {\n    platform: string;\n    error_message: string;\n    validatePassword: (values: TCFDPasswordFormValues) => FormikErrors<TCFDPasswordFormValues>;\n};\n\ntype TCFDCreatePasswordProps = TCFDPasswordFormReusedProps & {\n    password: string;\n    onSubmit: TOnSubmitPassword;\n    is_real_financial_stp: boolean;\n};\n\ntype TCFDCreatePasswordFormProps = TCFDPasswordFormReusedProps & {\n    has_mt5_account: boolean;\n    submitPassword: TOnSubmitPassword;\n    is_real_financial_stp: boolean;\n};\n\ntype TMultiStepRefProps = {\n    goNextStep: () => void;\n    goPrevStep: () => void;\n};\ntype TReviewMsgForMT5 = {\n    is_selected_mt5_verified: boolean;\n    jurisdiction_selected_shortcode: string;\n    manual_status: string;\n};\n\ntype TCFDPasswordFormProps = TCFDPasswordFormReusedProps & {\n    account_title: string;\n    account_type: {\n        category?: string;\n        type?: string;\n    };\n    closeModal: () => void;\n    error_type?: string;\n    form_error?: string;\n    has_mt5_account: boolean;\n    is_bvi: boolean;\n    is_dxtrade_allowed: boolean;\n    is_real_financial_stp: boolean;\n    jurisdiction_selected_shortcode: string;\n    onCancel: () => void;\n    onForgotPassword: () => void;\n    should_set_trading_password: boolean;\n    show_eu_related_content: boolean;\n    submitPassword: TOnSubmitPassword;\n};\n\ntype TCFDPasswordModalProps = {\n    error_type?: string;\n    form_error?: string;\n    platform: string;\n};\n\nconst getAccountTitle = (\n    platform: string,\n    account_type: {\n        category?: string;\n        type?: string;\n    },\n    account_title: string\n) => {\n    if (platform === CFD_PLATFORMS.DXTRADE) {\n        return getDxCompanies()[account_type.category as keyof TDxCompanies][\n            account_type.type as keyof TDxCompanies['demo' | 'real']\n        ].short_title;\n    }\n\n    return account_title;\n};\n\nconst PasswordModalHeader = ({\n    should_set_trading_password,\n    is_password_reset_error,\n    platform,\n}: TPasswordModalHeaderProps) => {\n    const element = isMobile() ? 'p' : 'span';\n    const alignment = 'center';\n    const font_size = 's';\n    const style = isMobile()\n        ? {\n              padding: '2rem',\n          }\n        : {};\n\n    return (\n        <Text styles={style} as={element} line_height='m' weight='bold' size={font_size} align={alignment}>\n            {!should_set_trading_password && !is_password_reset_error && (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                    }}\n                />\n            )}\n            {is_password_reset_error && <Localize i18n_default_text='Too many attempts' />}\n        </Text>\n    );\n};\nconst ReviewMessageForMT5 = ({\n    is_selected_mt5_verified,\n    jurisdiction_selected_shortcode,\n    manual_status,\n}: TReviewMsgForMT5) => {\n    if (is_selected_mt5_verified) {\n        return (\n            <Localize i18n_default_text='To start trading, top-up funds from your Deriv account into this account.' />\n        );\n    } else if ([Jurisdiction.BVI, Jurisdiction.VANUATU].includes(jurisdiction_selected_shortcode)) {\n        if (manual_status === 'pending') {\n            return <Localize i18n_default_text='We’re reviewing your documents. This should take about 1 to 3 days.' />;\n        }\n        return <Localize i18n_default_text='We’re reviewing your documents. This should take about 5 minutes.' />;\n    } else if ([Jurisdiction.LABUAN, Jurisdiction.MALTA_INVEST].includes(jurisdiction_selected_shortcode)) {\n        return <Localize i18n_default_text='We’re reviewing your documents. This should take about 1 to 3 days.' />;\n    }\n    return null;\n};\n\nconst IconType = React.memo(({ platform, type, show_eu_related_content }: TIconTypeProps) => {\n    const traders_hub = window.location.pathname === routes.traders_hub;\n    if (platform === CFD_PLATFORMS.DXTRADE) {\n        return <Icon icon='IcRebrandingDxtradeDashboard' size={128} />;\n    } else if (platform === CFD_PLATFORMS.DERIVEZ) {\n        return <Icon icon='IcBrandDerivEz' size={128} />;\n    } else if (traders_hub) {\n        switch (type) {\n            case 'synthetic':\n                return <TradingPlatformIcon icon='Derived' size={128} />;\n            case 'all':\n                return <TradingPlatformIcon icon='SwapFree' size={128} />;\n            case 'financial':\n                if (show_eu_related_content) {\n                    return <TradingPlatformIcon icon='CFDs' size={128} />;\n                }\n                return <TradingPlatformIcon icon='Financial' size={128} />;\n            default:\n                return <TradingPlatformIcon icon='Financial' size={128} />;\n        }\n    } else {\n        switch (type) {\n            case 'synthetic':\n                return <Icon icon='IcMt5SyntheticPlatform' size={128} />;\n            case 'all':\n                return <Icon icon='IcMt5SwapFreePlatform' size={128} />;\n            case 'financial':\n                if (show_eu_related_content) {\n                    return <Icon icon='IcMt5CfdPlatform' size={128} />;\n                }\n                return <Icon icon='IcMt5FinancialPlatform' size={128} />;\n            default:\n                return <Icon icon='IcMt5FinancialStpPlatform' size={128} />;\n        }\n    }\n});\nIconType.displayName = 'IconType';\n\nconst getCancelButtonLabel = ({\n    should_set_trading_password,\n    error_type,\n}: Pick<TCFDPasswordFormProps, 'should_set_trading_password' | 'error_type'>) => {\n    if (should_set_trading_password && error_type !== 'PasswordReset') {\n        return isDesktop() ? null : localize('Cancel');\n    }\n\n    return localize('Forgot password?');\n};\n\nconst handlePasswordInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    handleChange: (el: React.ChangeEvent<HTMLInputElement>) => void,\n    validateForm: (values?: TCFDPasswordFormValues) => Promise<FormikErrors<TCFDPasswordFormValues>>,\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n) => {\n    handleChange(e);\n    validateForm().then(() => {\n        setFieldTouched('password', true);\n    });\n};\n\nconst CreatePassword = ({\n    password,\n    platform,\n    validatePassword,\n    onSubmit,\n    error_message,\n    is_real_financial_stp,\n}: TCFDCreatePasswordProps) => {\n    return (\n        <Formik\n            initialValues={{\n                password,\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={onSubmit}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div\n                        className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body cfd-password-modal__create-password-content'\n                        data-testid='dt_create_password'\n                    >\n                        <Icon\n                            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n                            width='122'\n                            height='108'\n                        />\n                        <Text size='s' weight='bold' className='cfd-password-modal__create-password-title'>\n                            <Localize\n                                i18n_default_text='Create a {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text size='xs' align='center' className='cfd-password-modal__create-password-description'>\n                            <Localize\n                                i18n_default_text='You can use this password for all your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <div className='input-element'>\n                            <PasswordMeter\n                                input={values.password}\n                                has_error={!!(touched.password && errors.password)}\n                                custom_feedback_messages={getErrorMessages().password_warnings}\n                            >\n                                {() => (\n                                    <PasswordInput\n                                        autoComplete='new-password'\n                                        label={localize('{{platform}} password', {\n                                            platform: getCFDPlatformLabel(platform),\n                                        })}\n                                        error={\n                                            (touched.password && errors.password) ||\n                                            (values.password.length === 0 ? error_message : '')\n                                        }\n                                        name='password'\n                                        value={values.password}\n                                        onBlur={handleBlur}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                            handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                        }}\n                                        data_testId={`dt_${platform}_password`}\n                                    />\n                                )}\n                            </PasswordMeter>\n                        </div>\n                        {is_real_financial_stp && (\n                            <div className='dc-modal__container_cfd-password-modal__description'>\n                                <Localize i18n_default_text='Your MT5 Financial STP account will be opened through Deriv (FX) Ltd. All trading in this account is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA). None of your other accounts, including your Deriv account, is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA).' />\n                            </div>\n                        )}\n                        <FormSubmitButton\n                            is_disabled={!values.password || Object.keys(errors).length > 0}\n                            is_loading={isSubmitting}\n                            label={localize('Create {{platform}} password', {\n                                platform: getCFDPlatformLabel(platform),\n                            })}\n                            is_center={true}\n                        />\n                    </div>\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDCreatePasswordForm = ({\n    has_mt5_account,\n    platform,\n    error_message,\n    validatePassword,\n    submitPassword,\n    is_real_financial_stp,\n}: TCFDCreatePasswordFormProps) => {\n    const multi_step_ref = React.useRef<TMultiStepRefProps>();\n    const [password, setPassword] = React.useState('');\n\n    const onSubmit: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5 && has_mt5_account) {\n            setPassword(values.password);\n            multi_step_ref.current?.goNextStep();\n        } else {\n            submitPassword(values, actions);\n        }\n    };\n\n    const steps = [\n        {\n            component: (\n                <CreatePassword\n                    password={password}\n                    platform={platform}\n                    error_message={error_message}\n                    validatePassword={validatePassword}\n                    onSubmit={onSubmit}\n                    is_real_financial_stp={is_real_financial_stp}\n                />\n            ),\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    className='cfd-password-modal__change-password-confirmation'\n                    platform={platform}\n                    onConfirm={(_values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) =>\n                        submitPassword({ password }, actions)\n                    }\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n    ];\n\n    return <MultiStep ref={multi_step_ref} steps={steps} />;\n};\n\nconst CFDPasswordForm = ({\n    account_title,\n    account_type,\n    closeModal,\n    error_message,\n    error_type,\n    form_error,\n    has_mt5_account,\n    is_real_financial_stp,\n    jurisdiction_selected_shortcode,\n    onCancel,\n    onForgotPassword,\n    platform,\n    should_set_trading_password,\n    show_eu_related_content,\n    submitPassword,\n    validatePassword,\n}: TCFDPasswordFormProps) => {\n    const button_label = React.useMemo(() => {\n        if (error_type === 'PasswordReset') {\n            return localize('Try later');\n        }\n        return localize('Add account');\n    }, [error_type]);\n\n    const has_cancel_button = (isDesktop() ? !should_set_trading_password : true) || error_type === 'PasswordReset';\n\n    const cancel_button_label = getCancelButtonLabel({ should_set_trading_password, error_type });\n\n    const handleCancel = () => {\n        if (!has_cancel_button) {\n            return undefined;\n        }\n        if (should_set_trading_password) {\n            return onCancel();\n        }\n\n        return onForgotPassword();\n    };\n\n    if (error_type === 'PasswordReset') {\n        return (\n            <React.Fragment>\n                <div className='cfd-password-reset'>\n                    <div className='cfd-password-modal__content cfd-password-modal__content--password-reset'>\n                        <Text as='p' line_height='24' size='xs'>\n                            <Localize i18n_default_text='Please try again in a minute.' />\n                        </Text>\n                    </div>\n                    <Formik onSubmit={closeModal} initialValues={{}}>\n                        {({ handleSubmit }) => (\n                            <form onSubmit={handleSubmit}>\n                                <FormSubmitButton\n                                    has_cancel={has_cancel_button}\n                                    cancel_label={cancel_button_label}\n                                    onCancel={handleCancel}\n                                    is_absolute={isMobile()}\n                                    label={button_label}\n                                />\n                            </form>\n                        )}\n                    </Formik>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    if (should_set_trading_password) {\n        return (\n            <CFDCreatePasswordForm\n                platform={platform}\n                error_message={error_message}\n                validatePassword={validatePassword}\n                submitPassword={submitPassword}\n                has_mt5_account={has_mt5_account}\n                is_real_financial_stp={is_real_financial_stp}\n            />\n        );\n    }\n\n    const showJuristiction = () => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            return '';\n        } else if (!show_eu_related_content) {\n            return getFormattedJurisdictionCode(jurisdiction_selected_shortcode);\n        }\n        return 'CFDs';\n    };\n\n    return (\n        <Formik\n            initialValues={{\n                password: '',\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={submitPassword}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body'>\n                        {!should_set_trading_password && (\n                            <Text size='xs' className='dc-modal__container_cfd-password-modal__account-title'>\n                                {account_type.category === 'real' && (\n                                    <Localize\n                                        i18n_default_text='Enter your {{platform}} password to add a {{platform_name}} {{account}} {{jurisdiction_shortcode}} account.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                            // account: !show_eu_related_content ? account_title : '',\n                                            platform_name:\n                                                platform === CFD_PLATFORMS.MT5 ? 'MT5' : getCFDPlatformLabel(platform),\n                                            account: !show_eu_related_content\n                                                ? getAccountTitle(platform, account_type, account_title)\n                                                : '',\n                                            jurisdiction_shortcode: showJuristiction(),\n                                        }}\n                                    />\n                                )}\n                                {account_type.category === 'demo' && (\n                                    <Localize\n                                        i18n_default_text='Enter your {{platform}} password to add a {{platform_name}} {{account}} account.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                            // account: account_title,\n                                            platform_name:\n                                                platform === CFD_PLATFORMS.MT5 ? 'MT5' : getCFDPlatformLabel(platform),\n                                            account: getAccountTitle(platform, account_type, account_title),\n                                        }}\n                                    />\n                                )}\n                            </Text>\n                        )}\n                        <div className='input-element'>\n                            <PasswordInput\n                                autoComplete='new-password'\n                                label={localize('{{platform}} password', {\n                                    platform: getCFDPlatformLabel(platform),\n                                })}\n                                error={\n                                    (touched.password && errors.password) ||\n                                    (values.password.length === 0 ? error_message : '')\n                                }\n                                name='password'\n                                value={values.password}\n                                onBlur={handleBlur}\n                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                    handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                }}\n                                data_testId={`dt_${platform}_password`}\n                            />\n                        </div>\n\n                        {is_real_financial_stp && (\n                            <div className='dc-modal__container_cfd-password-modal__description'>\n                                <Localize\n                                    i18n_default_text='Your MT5 Financial STP account will be opened through {{legal_entity_name}}. All trading in this account is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA). None of your other accounts, including your Deriv account, is subject to the regulations and guidelines of the Labuan Financial Service Authority (LFSA).'\n                                    values={{\n                                        legal_entity_name: getLegalEntityName('fx'),\n                                    }}\n                                />\n                            </div>\n                        )}\n                        {error_type === 'PasswordError' && (\n                            <Text size='xs' as='p' className='dc-modal__container_mt5-password-modal__hint'>\n                                <Localize\n                                    i18n_default_text='Hint: You may have entered your Deriv password, which is different from your {{platform}} password.'\n                                    values={{\n                                        platform: getCFDPlatformLabel(platform),\n                                    }}\n                                />\n                            </Text>\n                        )}\n                    </div>\n                    <FormSubmitButton\n                        is_disabled={!values.password}\n                        has_cancel={has_cancel_button}\n                        cancel_label={cancel_button_label}\n                        onCancel={handleCancel}\n                        is_absolute={isMobile()}\n                        is_loading={isSubmitting}\n                        label={button_label}\n                        is_center={should_set_trading_password}\n                        form_error={form_error}\n                    />\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDPasswordModal = observer(({ form_error, platform }: TCFDPasswordModalProps) => {\n    const { client, traders_hub } = useStore();\n\n    const {\n        email,\n        account_status,\n        landing_companies,\n        is_logged_in,\n        is_dxtrade_allowed,\n        mt5_login_list,\n        updateAccountStatus,\n    } = client;\n    const { show_eu_related_content } = traders_hub;\n\n    const {\n        account_title,\n        account_type,\n        disableCFDPasswordModal,\n        error_message,\n        error_type,\n        getAccountStatus,\n        has_cfd_error,\n        is_cfd_success_dialog_enabled,\n        is_cfd_password_modal_enabled,\n        jurisdiction_selected_shortcode,\n        setError,\n        setCFDSuccessDialog,\n        submitMt5Password,\n        submitCFDPassword,\n        new_account_response,\n    } = useCfdStore();\n\n    const history = useHistory();\n\n    const [is_password_modal_exited, setPasswordModalExited] = React.useState(true);\n    const is_bvi = landing_companies?.mt_financial_company?.financial_stp?.shortcode === 'bvi';\n    const has_mt5_account = Boolean(mt5_login_list?.length);\n    const should_set_trading_password =\n        Array.isArray(account_status?.status) &&\n        account_status.status.includes(\n            platform === CFD_PLATFORMS.MT5 ? 'mt5_password_not_set' : 'dxtrade_password_not_set'\n        );\n    const is_password_error = error_type === 'PasswordError';\n    const is_password_reset = error_type === 'PasswordReset';\n    const [is_sent_email_modal_open, setIsSentEmailModalOpen] = React.useState(false);\n\n    const { poi_verified_for_bvi_labuan_vanuatu, poi_verified_for_maltainvest, poa_verified, manual_status } =\n        getAuthenticationStatusInfo(account_status);\n\n    const [is_selected_mt5_verified, setIsSelectedMT5Verified] = React.useState(false);\n\n    const getVerificationStatus = () => {\n        switch (jurisdiction_selected_shortcode) {\n            case Jurisdiction.SVG:\n                setIsSelectedMT5Verified(true);\n                break;\n            case Jurisdiction.BVI:\n            case Jurisdiction.VANUATU:\n                setIsSelectedMT5Verified(poi_verified_for_bvi_labuan_vanuatu);\n                break;\n            case Jurisdiction.LABUAN:\n                setIsSelectedMT5Verified(poi_verified_for_bvi_labuan_vanuatu && poa_verified);\n                break;\n            case Jurisdiction.MALTA_INVEST:\n                setIsSelectedMT5Verified(poi_verified_for_maltainvest && poa_verified);\n                break;\n            default:\n        }\n    };\n\n    React.useEffect(() => {\n        if (is_logged_in) {\n            updateAccountStatus();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        getVerificationStatus();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [jurisdiction_selected_shortcode, account_status]);\n\n    const validatePassword = (values: TCFDPasswordFormValues) => {\n        const errors: FormikErrors<TCFDPasswordFormValues> = {};\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n        if (values.password?.toLowerCase() === email.toLowerCase()) {\n            errors.password = localize('Your password cannot be the same as your email address.');\n        }\n        return errors;\n    };\n\n    const closeDialogs = () => {\n        setCFDSuccessDialog(false);\n        setError(false);\n    };\n\n    const closeModal = () => {\n        closeDialogs();\n        disableCFDPasswordModal();\n    };\n\n    const closeOpenSuccess = () => {\n        disableCFDPasswordModal();\n        closeDialogs();\n        if (account_type.category === 'real') {\n            sessionStorage.setItem('cfd_transfer_to_login_id', new_account_response.login || '');\n            history.push(routes.cashier_acc_transfer);\n        }\n    };\n\n    const handleForgotPassword = () => {\n        closeModal();\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_type.category === 'real') {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_type.category === 'demo') {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n        setIsSentEmailModalOpen(true);\n    };\n\n    const submitPassword: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5) {\n            submitMt5Password(\n                {\n                    ...values,\n                },\n                actions\n            );\n        } else {\n            (values as TCFDPasswordFormValues & { platform: string }).platform = platform;\n            submitCFDPassword(values, actions);\n        }\n    };\n\n    const should_show_password =\n        is_cfd_password_modal_enabled &&\n        !is_cfd_success_dialog_enabled &&\n        (!has_cfd_error || is_password_error || is_password_reset);\n\n    const should_show_success =\n        !has_cfd_error && is_cfd_success_dialog_enabled && is_cfd_password_modal_enabled && is_password_modal_exited;\n\n    const should_show_sent_email_modal = is_sent_email_modal_open && is_password_modal_exited;\n\n    const is_real_financial_stp = [account_type.category, account_type.type].join('_') === 'real_financial_stp';\n\n    const should_show_password_modal = React.useMemo(() => {\n        if (should_show_password) {\n            return should_set_trading_password ? true : isDesktop();\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const should_show_password_dialog = React.useMemo(() => {\n        if (should_show_password) {\n            if (!should_set_trading_password) return isMobile();\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const success_modal_submit_label = React.useMemo(() => {\n        if (account_type.category === 'real') {\n            if (platform === CFD_PLATFORMS.MT5) {\n                return is_selected_mt5_verified ? localize('Transfer now') : localize('OK');\n            }\n            return localize('Transfer now');\n        }\n        return localize('Continue');\n    }, [platform, account_type, is_selected_mt5_verified]);\n\n    const getSubmitText = () => {\n        const { category, type } = account_type;\n        if (!category && !type) return '';\n\n        const category_label = category === 'real' ? localize('real') : localize('demo');\n        let type_label = '';\n        switch (platform) {\n            case CFD_PLATFORMS.MT5:\n                type_label =\n                    getMtCompanies(show_eu_related_content)[category as keyof TMtCompanies][\n                        type as keyof TMtCompanies['demo' | 'real']\n                    ].short_title;\n                break;\n            case CFD_PLATFORMS.DXTRADE:\n                type_label =\n                    getDxCompanies()[category as keyof TDxCompanies][type as keyof TDxCompanies['demo' | 'real']]\n                        .short_title;\n                break;\n            case CFD_PLATFORMS.DERIVEZ:\n                type_label =\n                    getDerivezCompanies()[category as keyof TDerivezCompanies][\n                        type as keyof TDerivezCompanies['demo' | 'real']\n                    ].short_title;\n                break;\n            default:\n                type_label = '';\n                break;\n        }\n\n        const jurisdiction_label =\n            jurisdiction_selected_shortcode && getFormattedJurisdictionCode(jurisdiction_selected_shortcode);\n        const mt5_platform_label = jurisdiction_selected_shortcode !== Jurisdiction.MALTA_INVEST ? 'Deriv MT5' : '';\n\n        if (category === 'real') {\n            let platformName = '';\n            switch (platform) {\n                case CFD_PLATFORMS.MT5:\n                    platformName = mt5_platform_label;\n                    break;\n                case CFD_PLATFORMS.DERIVEZ:\n                    platformName = 'Deriv Ez';\n                    break;\n                default:\n                    platformName = 'Deriv X';\n                    break;\n            }\n\n            return (\n                <React.Fragment>\n                    <Localize\n                        i18n_default_text='Congratulations, you have successfully created your {{category}} <0>{{platform}}</0> <1>{{type}} {{jurisdiction_selected_shortcode}}</1> account. '\n                        values={{\n                            type: type_label,\n                            platform:\n                                platform === CFD_PLATFORMS.MT5 ? mt5_platform_label : getCFDPlatformLabel(platform),\n                            category: category_label,\n                            jurisdiction_selected_shortcode:\n                                platform === CFD_PLATFORMS.MT5 && !show_eu_related_content ? jurisdiction_label : '',\n                        }}\n                        components={[<span key={0} className='cfd-account__platform' />, <strong key={1} />]}\n                    />\n                    {platform === CFD_PLATFORMS.DXTRADE ? (\n                        <Localize i18n_default_text='To start trading, transfer funds from your Deriv account into this account.' />\n                    ) : (\n                        <ReviewMessageForMT5\n                            is_selected_mt5_verified={is_selected_mt5_verified}\n                            jurisdiction_selected_shortcode={jurisdiction_label}\n                            manual_status={manual_status}\n                        />\n                    )}\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <Localize\n                i18n_default_text='Congratulations, you have successfully created your {{category}} <0>{{platform}}</0> <1>{{type}}</1> account. '\n                values={{\n                    type: type_label,\n                    platform: getCFDPlatformLabel(platform),\n                    category: category_label,\n                }}\n                components={[<span key={0} className='cfd-account__platform' />, <strong key={1} />]}\n            />\n        );\n    };\n\n    const cfd_password_form = (\n        <CFDPasswordForm\n            is_bvi={is_bvi}\n            account_title={account_title}\n            account_type={account_type}\n            closeModal={closeModal}\n            error_type={error_type}\n            error_message={error_message}\n            has_mt5_account={has_mt5_account}\n            form_error={form_error}\n            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n            should_set_trading_password={should_set_trading_password}\n            is_real_financial_stp={is_real_financial_stp}\n            validatePassword={validatePassword}\n            onForgotPassword={handleForgotPassword}\n            submitPassword={submitPassword}\n            platform={platform}\n            is_dxtrade_allowed={is_dxtrade_allowed}\n            onCancel={closeModal}\n            show_eu_related_content={show_eu_related_content}\n        />\n    );\n\n    const password_modal = (\n        <Modal\n            className='cfd-password-modal'\n            has_close_icon\n            is_open={should_show_password_modal}\n            toggleModal={closeModal}\n            should_header_stick_body\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                />\n            )}\n            onUnmount={() => getAccountStatus(platform)}\n            onExited={() => setPasswordModalExited(true)}\n            onEntered={() => setPasswordModalExited(false)}\n            width={isMobile() ? '32.8rem' : 'auto'}\n        >\n            {cfd_password_form}\n        </Modal>\n    );\n\n    const password_dialog = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={should_show_password_dialog}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal'\n        >\n            <PasswordModalHeader\n                should_set_trading_password={should_set_trading_password}\n                has_mt5_account={has_mt5_account}\n                is_password_reset_error={is_password_reset}\n                platform={platform}\n            />\n\n            {cfd_password_form}\n        </MobileDialog>\n    );\n\n    return (\n        <React.Fragment>\n            {password_modal}\n            {password_dialog}\n            <SuccessDialog\n                is_open={should_show_success}\n                toggleModal={closeModal}\n                onCancel={closeModal}\n                onSubmit={platform === CFD_PLATFORMS.MT5 && !is_selected_mt5_verified ? closeModal : closeOpenSuccess}\n                classNameMessage='cfd-password-modal__message'\n                message={getSubmitText()}\n                icon={\n                    <IconType\n                        platform={platform}\n                        type={account_type.type}\n                        show_eu_related_content={show_eu_related_content}\n                    />\n                }\n                icon_size='xlarge'\n                text_submit={success_modal_submit_label}\n                has_cancel={\n                    platform === CFD_PLATFORMS.MT5\n                        ? is_selected_mt5_verified && account_type.category === 'real'\n                        : account_type.category === 'real'\n                }\n                has_close_icon={false}\n                width={isMobile() ? '32.8rem' : 'auto'}\n                is_medium_button={isMobile()}\n            />\n            <SentEmailModal\n                is_open={should_show_sent_email_modal}\n                identifier_title='trading_password'\n                onClose={() => setIsSentEmailModalOpen(false)}\n                onClickSendEmail={handleForgotPassword}\n            />\n        </React.Fragment>\n    );\n});\n\nexport default CFDPasswordModal;\n","import { Formik, FormikHelpers } from 'formik';\nimport React from 'react';\nimport { Button, Icon, PasswordMeter, PasswordInput, FormSubmitButton, Loading, Modal, Text } from '@deriv/components';\nimport { validLength, validPassword, getErrorMessages, CFD_PLATFORMS, WS, redirectToLogin } from '@deriv/shared';\nimport { localize, Localize, getLanguage } from '@deriv/translations';\nimport { getMtCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { TResetPasswordIntent, TCFDResetPasswordModal, TError } from './props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst ResetPasswordIntent = ({ current_list, children, is_eu, ...props }: TResetPasswordIntent) => {\n    const reset_password_intent = localStorage.getItem('cfd_reset_password_intent');\n    const reset_password_type = localStorage.getItem('cfd_reset_password_type') || 'main'; // Default to main\n    const has_intent =\n        reset_password_intent &&\n        /(real|demo)\\.(financial_stp|financial|synthetic|synthetic_svg|synthetic_bvi|financial_svg|financial_bvi|financial_fx|financial_v)/.test(\n            reset_password_intent\n        );\n\n    let group, type, login, title, server;\n    if (has_intent && current_list) {\n        [server, group, type] = reset_password_intent.split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`].login;\n        title = getMtCompanies(is_eu)[group as keyof TMtCompanies][type as keyof TMtCompanies['demo' | 'real']].title;\n    } else if (current_list) {\n        [server, group, type] = (Object.keys(current_list).pop() as string).split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`]?.login ?? '';\n        title =\n            getMtCompanies(is_eu)?.[group as keyof TMtCompanies]?.[type as keyof TMtCompanies['demo' | 'real']]\n                ?.title ?? '';\n    } else {\n        // Set a default intent\n        login = '';\n        title = '';\n    }\n\n    return children({\n        login,\n        title,\n        type: reset_password_type,\n        ...props,\n    });\n};\n\nconst CFDResetPasswordModal = observer(({ platform }: TCFDResetPasswordModal) => {\n    const { client, ui } = useStore();\n\n    const { email, is_eu, is_logged_in } = client;\n    const { is_cfd_reset_password_modal_enabled, setCFDPasswordResetModal } = ui;\n\n    const { current_list } = useCfdStore();\n\n    const [state, setState] = React.useState<{\n        error_code: string | number | undefined;\n        has_error: boolean;\n        error_message: string | undefined;\n        is_finished: boolean;\n        changed_password_type: string;\n    }>({\n        error_code: undefined,\n        has_error: false,\n        error_message: undefined,\n        is_finished: false,\n        changed_password_type: '',\n    });\n\n    const renderErrorBox = (error: TError) => {\n        setState({\n            ...state,\n            error_code: error.code,\n            has_error: true,\n            error_message: error.message,\n        });\n    };\n    const clearAddressBar = () => {\n        localStorage.removeItem('cfd_reset_password_intent');\n        localStorage.removeItem('cfd_reset_password_type');\n        localStorage.removeItem('cfd_reset_password_code');\n    };\n    const validatePassword = (values: { new_password: string }) => {\n        const errors: { new_password?: string } = {};\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        }\n        if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        return errors;\n    };\n\n    const resetPassword = (\n        values: { new_password: string },\n        password_type: string,\n        login: string,\n        actions: FormikHelpers<{ new_password: string }>\n    ) => {\n        const { setSubmitting } = actions;\n        setSubmitting(true);\n        const request = {\n            account_id: login,\n            platform: CFD_PLATFORMS.MT5,\n            new_password: values.new_password,\n            verification_code: localStorage.getItem('cfd_reset_password_code'),\n        };\n\n        WS.tradingPlatformInvestorPasswordReset(request).then((response: { error: TError; password_type: string }) => {\n            if (response?.error?.code) {\n                renderErrorBox(response.error);\n            } else {\n                setState({\n                    ...state,\n                    is_finished: true,\n                    changed_password_type: password_type,\n                });\n                clearAddressBar();\n            }\n            setSubmitting(false);\n        });\n    };\n    const getIsListFetched = () => {\n        return Object.keys(current_list).length !== 0;\n    };\n\n    const is_invalid_investor_token = !getIsListFetched() && localStorage.getItem('cfd_reset_password_code');\n\n    return (\n        <Modal\n            className='cfd-reset-password-modal'\n            is_open={is_cfd_reset_password_modal_enabled && !is_invalid_investor_token}\n            toggleModal={() => setCFDPasswordResetModal(false)}\n            title={\n                platform === CFD_PLATFORMS.DXTRADE\n                    ? localize('Reset Deriv X investor password')\n                    : localize('Reset Deriv MT5 investor password')\n            }\n            onMount={() => redirectToLogin(is_logged_in, getLanguage(), true)}\n            should_header_stick_body={false}\n        >\n            {!getIsListFetched() && !state.has_error && <Loading is_fullscreen={false} />}\n            {getIsListFetched() && !state.has_error && !state.is_finished && (\n                <ResetPasswordIntent current_list={current_list} is_eu={is_eu}>\n                    {({ type, login }) => (\n                        <Formik\n                            initialValues={{ new_password: '' }}\n                            validate={validatePassword}\n                            onSubmit={(values, actions) => resetPassword(values, type, login, actions)}\n                        >\n                            {({ handleSubmit, errors, values, isSubmitting, handleChange, handleBlur, touched }) => (\n                                <form autoComplete='off' onSubmit={handleSubmit}>\n                                    <div className='cfd-reset-password'>\n                                        <div className='cfd-reset-password__container'>\n                                            <div className='cfd-reset-password__password-area'>\n                                                <PasswordMeter\n                                                    input={values.new_password}\n                                                    has_error={!!(touched.new_password && errors.new_password)}\n                                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                                >\n                                                    {({ has_warning }: { has_warning: boolean }) => (\n                                                        <PasswordInput\n                                                            autoComplete='new-password'\n                                                            className='cfd-reset-password__password-field'\n                                                            name='new_password'\n                                                            label={localize('New {{type}} password', { type })}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            error={touched.new_password && errors.new_password}\n                                                            value={values.new_password}\n                                                            data-lpignore='true'\n                                                            required\n                                                            hint={\n                                                                !has_warning &&\n                                                                localize(\n                                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.'\n                                                                )\n                                                            }\n                                                        />\n                                                    )}\n                                                </PasswordMeter>\n                                            </div>\n                                            {isSubmitting && <Loading is_fullscreen={false} />}\n                                            {!isSubmitting && (\n                                                <FormSubmitButton\n                                                    is_disabled={\n                                                        isSubmitting ||\n                                                        !values.new_password ||\n                                                        Object.keys(errors).length > 0\n                                                    }\n                                                    errors={errors}\n                                                    is_center={true}\n                                                    large\n                                                    label={localize('Create {{type}} password', { type })}\n                                                />\n                                            )}\n                                        </div>\n                                    </div>\n                                </form>\n                            )}\n                        </Formik>\n                    )}\n                </ResetPasswordIntent>\n            )}\n            {state.has_error && (\n                <div className='cfd-reset-password__error'>\n                    <Icon icon='IcMt5Expired' size={128} />\n                    <Text as='p' size='xs' weight='bold' align='center' className='cfd-reset-password__heading'>\n                        {state.error_message}\n                    </Text>\n                    {state.error_code === 'InvalidToken' && (\n                        <Text\n                            as='p'\n                            color='prominent'\n                            size='xs'\n                            align='center'\n                            className='cfd-reset-password__description--is-centered'\n                        >\n                            <Localize i18n_default_text='Please request a new password and check your email for the new token.' />\n                        </Text>\n                    )}\n                    <Button\n                        primary\n                        large\n                        className='cfd-reset-password__confirm-button'\n                        onClick={() => {\n                            clearAddressBar();\n                            setCFDPasswordResetModal(false);\n                        }}\n                    >\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n            {state.is_finished && (\n                <div className='cfd-reset-password__success'>\n                    <Icon icon='IcMt5PasswordUpdated' size={128} />\n                    <div className='cfd-reset-password__description'>\n                        <Text as='p' size='xs' align='center' weight='bold' line_height='xxl'>\n                            <Localize i18n_default_text='Password saved' />\n                        </Text>\n                        <Localize\n                            i18n_default_text='Your {{account_type}} password has been changed.'\n                            values={{\n                                account_type:\n                                    state.changed_password_type === 'main' ? localize('main') : localize('investor'),\n                            }}\n                        />\n                    </div>\n                    <Button primary large onClick={() => setCFDPasswordResetModal(false)}>\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n        </Modal>\n    );\n});\n\nexport default React.memo(CFDResetPasswordModal);\n","import React from 'react';\nimport { Dialog, UnhandledErrorModal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst CFDServerErrorDialog = observer(() => {\n    const { ui } = useStore();\n    const { enableApp, disableApp } = ui;\n    const { clearCFDError, error_message, error_type, has_cfd_error, is_cfd_success_dialog_enabled } = useCfdStore();\n\n    const should_show_error =\n        has_cfd_error &&\n        !is_cfd_success_dialog_enabled &&\n        error_type &&\n        error_type !== 'PasswordReset' &&\n        error_type !== 'PasswordError';\n\n    if (should_show_error) {\n        return error_message ? (\n            <Dialog\n                title={localize('Something’s not right')}\n                confirm_button_text={localize('OK')}\n                onConfirm={clearCFDError}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_visible={should_show_error}\n            >\n                {error_message}\n            </Dialog>\n        ) : (\n            <UnhandledErrorModal />\n        );\n    }\n    return null;\n});\n\nexport default CFDServerErrorDialog;\n","import React from 'react';\nimport SuccessDialog from '../Components/success-dialog.jsx';\nimport { Icon, Modal, Button, Money, Text } from '@deriv/components';\nimport { getCFDPlatformLabel, CFD_PLATFORMS } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { TDxCompanies, TMtCompanies, TDerivezCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { getTopUpConfig } from '../Helpers/constants';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\ntype TCFDTopUpDemoModalProps = {\n    platform: string;\n};\n\nconst CFDTopUpDemoModal = observer(({ platform }: TCFDTopUpDemoModalProps) => {\n    const { ui } = useStore();\n\n    const {\n        is_top_up_virtual_open,\n        is_top_up_virtual_in_progress,\n        is_top_up_virtual_success,\n        closeTopUpModal,\n        closeSuccessTopUpModal,\n    } = ui;\n\n    const { current_account, dxtrade_companies, derivez_companies, mt5_companies, topUpVirtual } = useCfdStore();\n\n    const getAccountTitle = React.useCallback(() => {\n        let title = '';\n        if ((!mt5_companies && !dxtrade_companies && !derivez_companies) || !current_account) return '';\n\n        switch (platform) {\n            case CFD_PLATFORMS.MT5:\n                title =\n                    mt5_companies[current_account.category as keyof TMtCompanies][\n                        current_account.type as keyof TMtCompanies['demo' | 'real']\n                    ].title;\n                break;\n            case CFD_PLATFORMS.DERIVEZ:\n                title =\n                    derivez_companies[current_account.category as keyof TDerivezCompanies][\n                        current_account.type as keyof TDerivezCompanies['demo' | 'real']\n                    ].title;\n                break;\n            case CFD_PLATFORMS.DXTRADE:\n                title =\n                    dxtrade_companies[current_account.category as keyof TDxCompanies][\n                        current_account.type as keyof TDxCompanies['demo' | 'real']\n                    ].title;\n                break;\n            default:\n                break;\n        }\n\n        return title;\n    }, [mt5_companies, dxtrade_companies, current_account, derivez_companies]);\n\n    const onCloseSuccess = () => {\n        closeSuccessTopUpModal();\n    };\n\n    const platform_title = getCFDPlatformLabel(platform);\n\n    if ((!mt5_companies && !dxtrade_companies && !derivez_companies) || !current_account) return null;\n    const { minimum_amount, additional_amount } = getTopUpConfig();\n\n    return (\n        <React.Fragment>\n            <Modal\n                toggleModal={closeTopUpModal}\n                is_open={is_top_up_virtual_open}\n                className='top-up-virtual'\n                title={localize('Fund top up')}\n                width='384px'\n            >\n                <div className='dc-modal__container_top-up-virtual__body'>\n                    <Text\n                        as='p'\n                        align='center'\n                        size='xxs'\n                        line_height='xs'\n                        className='dc-modal__container_top-up-virtual__description'\n                        data-testid='dt_top_up_virtual_description'\n                    >\n                        <Localize\n                            i18n_default_text='You can top up your demo account with an additional <0></0> if your balance is <1></1> or less.'\n                            components={[\n                                <Money\n                                    key={0}\n                                    amount={additional_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                                <Money\n                                    key={1}\n                                    amount={minimum_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                            ]}\n                        />\n                    </Text>\n                    <h4 className='dc-modal__container_top-up-virtual--h4'>\n                        <Localize\n                            i18n_default_text='{{ platform }} {{ account_title }} account'\n                            values={{\n                                platform: platform_title,\n                                account_title: getAccountTitle(),\n                            }}\n                        />\n                    </h4>\n                    <div>\n                        <Text as='p' align='center' size='xxs'>\n                            <Localize i18n_default_text='Current balance' />\n                        </Text>\n                        <div className='dc-modal__container_top-up-virtual--balance'>\n                            <Money\n                                amount={current_account.display_balance}\n                                currency={current_account.currency}\n                                has_sign={(current_account.balance as number) < 0}\n                            />\n                        </div>\n                    </div>\n                    <div className='dc-modal__container_top-up-virtual--button'>\n                        <Button\n                            is_disabled={(current_account.balance as number) > 1000 || is_top_up_virtual_in_progress}\n                            type='button'\n                            is_loading={is_top_up_virtual_in_progress}\n                            onClick={() => topUpVirtual(platform)}\n                            primary\n                            large\n                        >\n                            {!is_top_up_virtual_in_progress && (\n                                <Localize\n                                    i18n_default_text='Top up &nbsp;<0></0>'\n                                    components={[\n                                        <Money\n                                            key={0}\n                                            amount={additional_amount}\n                                            currency={current_account.currency}\n                                            show_currency\n                                        />,\n                                    ]}\n                                />\n                            )}\n                        </Button>\n                    </div>\n                </div>\n            </Modal>\n            <SuccessDialog\n                is_open={is_top_up_virtual_success}\n                toggleModal={onCloseSuccess}\n                has_close_icon\n                title={localize('Fund top up')}\n                icon={<Icon icon='IcCashierWallet' size={128} />}\n                heading={\n                    <h3 className='cfd-success-topup__heading'>\n                        <Localize\n                            i18n_default_text='<0></0> has been credited into your {{platform}} {{title}} account.'\n                            values={{ platform: platform_title, title: getAccountTitle() }}\n                            components={[\n                                <Money\n                                    key={0}\n                                    amount={additional_amount}\n                                    currency={current_account.currency}\n                                    show_currency\n                                />,\n                            ]}\n                        />\n                    </h3>\n                }\n                message={\n                    <div className='cfd-success-topup__description'>\n                        <p>\n                            <Localize i18n_default_text='New current balance' />\n                        </p>\n                        <div className='dc-modal__container_top-up-virtual--balance'>\n                            <Money amount={current_account.balance} currency={current_account.currency} />\n                        </div>\n                    </div>\n                }\n                icon_size='large'\n                has_cancel={false}\n                has_submit={false}\n                width='384px'\n            />\n        </React.Fragment>\n    );\n});\n\nexport default CFDTopUpDemoModal;\n","import React from 'react';\nimport { Table, Text, ThemedScrollbars, Div100vhContainer } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isDesktop, CFD_PLATFORMS, isLandingCompanyEnabled } from '@deriv/shared';\nimport { LandingCompany } from '@deriv/api-types';\n\ntype TCFDAttributeDescriberProps = {\n    name: string;\n    counter: number | null;\n};\n\ntype TFilterAvailableAccounts = (\n    landing_companies: LandingCompany,\n    table: TAccountsDescription[],\n    is_logged_in: boolean,\n    is_eu_client: boolean,\n    platform: string,\n    is_australian: boolean\n) => Array<{ [key: string]: string | React.ReactNode | undefined }>;\n\ntype TAccountsDescription = {\n    attribute: string;\n    mt5: TDxTradeAccountsDescription & { financial_stp: string };\n    dxtrade: TDxTradeAccountsDescription;\n};\n\ntype TDxTradeAccountsDescription = {\n    synthetic: string;\n    synthetic_eu: string;\n    financial: string;\n    financial_au: string;\n    financial_eu: string | React.ReactNode;\n    footnote: string | null;\n};\n\ntype TCompareAccountsReusedProps = {\n    landing_companies: LandingCompany;\n    platform: string;\n    is_logged_in: boolean;\n    is_uk: boolean;\n};\n\ntype TCompareAccountsDataParams = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n};\n\ntype TCFDCompareAccountHintProps = TCompareAccountsReusedProps & {\n    show_risk_message: boolean;\n};\n\ntype TModalContentProps = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n    is_eu: boolean;\n};\n\ntype TGetAccounts = (params: TCompareAccountsReusedProps) => TAccountsDescription[];\n\ntype TAccountTypesToFilter = (\n    | NonNullable<LandingCompany['mt_gaming_company']>['financial']\n    | NonNullable<LandingCompany['mt_financial_company']>['financial']\n    | NonNullable<LandingCompany['mt_financial_company']>['financial_stp']\n    | LandingCompany['dxtrade_gaming_company']\n    | LandingCompany['dxtrade_financial_company']\n    | boolean\n    | undefined\n)[];\n\nconst getAccounts: TGetAccounts = ({ landing_companies, platform, is_logged_in, is_uk }) => {\n    const getLoggedOutTypesCount = () => (platform === CFD_PLATFORMS.MT5 ? 3 : 2);\n    const getLoggedInTypesCount = () =>\n        (\n            (platform === CFD_PLATFORMS.MT5\n                ? [\n                      landing_companies?.mt_gaming_company?.financial,\n                      landing_companies?.mt_financial_company?.financial,\n                      landing_companies?.mt_financial_company?.financial_stp && platform === CFD_PLATFORMS.MT5,\n                  ]\n                : [\n                      landing_companies?.dxtrade_gaming_company,\n                      landing_companies?.dxtrade_financial_company,\n                  ]) as TAccountTypesToFilter\n        ).filter(Boolean).length;\n\n    const account_types_count = is_logged_in ? getLoggedInTypesCount() : getLoggedOutTypesCount();\n    const financial_eu_trading_instruments = is_uk ? (\n        <div>\n            {localize('Forex, stocks, stock indices, cryptocurrencies')}\n            <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                **\n            </Text>\n            {localize(', synthetic indices')}\n        </div>\n    ) : (\n        localize('Forex, stocks, stock indices, cryptocurrencies, synthetic indices')\n    );\n\n    return [\n        {\n            attribute: localize('Account currency'),\n            mt5: {\n                synthetic: localize('USD'),\n                synthetic_eu: localize('EUR'),\n                financial: localize('USD'),\n                financial_au: localize('USD'),\n                financial_eu: localize('EUR/GBP/USD'),\n                financial_stp: localize('USD'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('USD'),\n                synthetic_eu: localize('EUR'),\n                financial: localize('USD'),\n                financial_au: localize('USD'),\n                financial_eu: localize('EUR/GBP'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Maximum leverage'),\n            mt5: {\n                synthetic: localize('Up to 1:1000'),\n                synthetic_eu: localize('Up to 1:1000'),\n                financial: localize('Up to 1:1000'),\n                financial_au: localize('Up to 1:30'),\n                financial_eu: localize('Up to 1:30'),\n                financial_stp: localize('Up to 1:100'),\n                footnote: localize(\n                    'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('Up to 1:1000'),\n                synthetic_eu: localize('Up to 1:1000'),\n                financial: localize('Up to 1:1000'),\n                financial_au: localize('Up to 1:30'),\n                financial_eu: localize('Up to 1:30'),\n                footnote: localize(\n                    'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Order execution'),\n            mt5: {\n                synthetic: localize('Market'),\n                synthetic_eu: localize('Market'),\n                financial: localize('Market'),\n                financial_au: localize('Market'),\n                financial_eu: localize('Market'),\n                financial_stp: localize('Market'),\n                footnote: localize(\n                    \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n                    {\n                        count: account_types_count,\n                    }\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('Market'),\n                synthetic_eu: localize('Market'),\n                financial: localize('Market'),\n                financial_au: localize('Market'),\n                financial_eu: localize('Market'),\n                footnote: localize(\n                    \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n                    {\n                        count: account_types_count,\n                    }\n                ),\n            },\n        },\n        {\n            attribute: localize('Spread'),\n            mt5: {\n                synthetic: localize('Fixed/Variable'),\n                synthetic_eu: localize('Fixed/Variable'),\n                financial: localize('Variable'),\n                financial_au: localize('Variable'),\n                financial_eu: localize('Fixed/Variable'),\n                financial_stp: localize('Variable'),\n                footnote: localize(\n                    \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('Fixed/Variable'),\n                synthetic_eu: localize('Fixed/Variable'),\n                financial: localize('Variable'),\n                financial_au: localize('Variable'),\n                financial_eu: localize('Variable'),\n                footnote: localize(\n                    \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n                ),\n            },\n        },\n        {\n            attribute: localize('Commission'),\n            mt5: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                financial_stp: localize('No'),\n                footnote: localize('Deriv charges no commission across all account types.'),\n            },\n            dxtrade: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                footnote: localize('Deriv charges no commission across all account types.'),\n            },\n        },\n        {\n            attribute: localize('Minimum deposit'),\n            mt5: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                financial_stp: localize('No'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('No'),\n                synthetic_eu: localize('No'),\n                financial: localize('No'),\n                financial_au: localize('No'),\n                financial_eu: localize('No'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Margin call'),\n            mt5: {\n                synthetic: localize('100%'),\n                synthetic_eu: localize('100%'),\n                financial: localize('100%'),\n                financial_au: localize('100%'),\n                financial_eu: localize('100%'),\n                financial_stp: localize('100%'),\n                footnote: localize(\n                    'You’ll get a warning, known as margin call, if your account balance drops down close to the stop out level.'\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('100%'),\n                synthetic_eu: localize('100%'),\n                financial: localize('100%'),\n                financial_au: localize('100%'),\n                financial_eu: localize('100%'),\n                footnote: localize(\n                    'You’ll get a warning, known as margin call, if your account balance drops down close to the stop out level.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Stop out level'),\n            mt5: {\n                synthetic: localize('50%'),\n                synthetic_eu: localize('50%'),\n                financial: localize('50%'),\n                financial_au: localize('50%'),\n                financial_eu: localize('50%'),\n                financial_stp: localize('50%'),\n                footnote: localize(\n                    \"To understand stop out, first you need to learn about margin level, which is  the ratio of your equity (the total balance you would have if you close all your positions at that point) to the margin you're using at the moment. If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.\"\n                ),\n            },\n            dxtrade: {\n                synthetic: localize('50%'),\n                synthetic_eu: localize('50%'),\n                financial: localize('50%'),\n                financial_au: localize('50%'),\n                financial_eu: localize('50%'),\n                footnote: localize(\n                    \"To understand stop out, first you need to learn about margin level, which is  the ratio of your equity (the total balance you would have if you close all your positions at that point) to the margin you're using at the moment. If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.\"\n                ),\n            },\n        },\n        {\n            attribute: localize('Number of assets'),\n            mt5: {\n                synthetic: localize('20+'),\n                synthetic_eu: localize('20+'),\n                financial: localize('150+'),\n                financial_au: localize('100+'),\n                financial_eu: localize('50+'),\n                financial_stp: localize('70+'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('20+'),\n                synthetic_eu: localize('20+'),\n                financial: localize('90+'),\n                financial_au: localize('90+'),\n                financial_eu: localize('90+'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Cryptocurrency trading'),\n            mt5: {\n                synthetic: localize('N/A'),\n                synthetic_eu: localize('N/A'),\n                financial: localize('24/7'),\n                financial_au: localize('24/7'),\n                financial_eu: localize('24/7'),\n                financial_stp: localize('24/7'),\n                footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n            },\n            dxtrade: {\n                synthetic: localize('N/A'),\n                synthetic_eu: localize('N/A'),\n                financial: localize('24/7'),\n                financial_au: localize('24/7'),\n                financial_eu: localize('24/7'),\n                footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n            },\n        },\n        {\n            attribute: localize('Trading instruments'),\n            mt5: {\n                synthetic: localize('Synthetics'),\n                synthetic_eu: localize('Synthetics'),\n                financial: localize(\n                    'FX-majors (standard/micro lots), FX-minors, basket indices, commodities, cryptocurrencies, and stocks and stock indices'\n                ),\n                financial_au: localize(\n                    'FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies, Stocks, and Stock Indices'\n                ),\n                financial_eu: financial_eu_trading_instruments,\n                financial_stp: localize('FX-majors, FX-minors, FX-exotics, and cryptocurrencies'),\n                footnote: null,\n            },\n            dxtrade: {\n                synthetic: localize('Synthetics'),\n                synthetic_eu: localize('Synthetics'),\n                financial: localize(\n                    'FX majors (standard/micro lots), FX minors, basket indices, commodities, and cryptocurrencies'\n                ),\n                financial_au: localize('FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies'),\n                financial_eu: localize(\n                    'FX-majors (standard/micro lots), FX-minors, Commodities, Cryptocurrencies (except UK)'\n                ),\n                footnote: null,\n            },\n        },\n    ];\n};\n\nconst CFDAttributeDescriber = ({ name, counter }: TCFDAttributeDescriberProps) => {\n    const [is_visible, setIsVisible] = React.useState(false);\n    const toggleModal = () => setIsVisible(!is_visible);\n\n    return counter ? (\n        <React.Fragment>\n            <Text\n                as='p'\n                weight='bold'\n                size='xs'\n                line_height='s'\n                className='cfd-attribute-describer'\n                onClick={toggleModal}\n            >\n                {name}\n                <Text weight='bold' as='span' line_height='x' size='xxxs' className='counter'>\n                    {counter}\n                </Text>\n            </Text>\n        </React.Fragment>\n    ) : (\n        <Text as='p' weight='bold' size='xs' line_height='s' className='cfd-attribute-describer'>\n            {name}\n        </Text>\n    );\n};\n\nconst filterAvailableAccounts: TFilterAvailableAccounts = (\n    landing_companies,\n    table,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    is_australian\n) => {\n    const getFinancialObject = (financial?: string, financial_au?: string, financial_eu?: string | React.ReactNode) => {\n        if (is_australian) {\n            return financial_au;\n        }\n        if (is_eu_client) {\n            return financial_eu;\n        }\n        return financial;\n    };\n\n    let footnote_number = 0;\n    return table\n        .filter(row => row[platform as keyof TAccountsDescription])\n        .map(({ attribute, mt5 = {}, dxtrade = {} }) => {\n            const { synthetic, synthetic_eu, financial, financial_au, financial_eu, footnote } =\n                platform === CFD_PLATFORMS.MT5 ? mt5 : dxtrade;\n            const synthetic_object = { synthetic: is_eu_client ? synthetic_eu : synthetic };\n            const financial_object = { financial: getFinancialObject(financial, financial_au, financial_eu) };\n            const footnote_counter = footnote ? ++footnote_number : null;\n\n            if (is_logged_in) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    ...(landing_companies?.mt_gaming_company?.financial ? synthetic_object : {}),\n                    ...(landing_companies?.mt_financial_company?.financial ? financial_object : {}),\n                    ...(landing_companies?.mt_financial_company?.financial_stp && platform === CFD_PLATFORMS.MT5\n                        ? { financial_stp: mt5?.financial_stp }\n                        : {}),\n                };\n            }\n            if (platform === CFD_PLATFORMS.DXTRADE) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    ...synthetic_object,\n                    ...financial_object,\n                };\n            }\n            return {\n                attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                ...synthetic_object,\n                ...financial_object,\n                ...{ financial_stp: mt5?.financial_stp },\n            };\n        });\n};\n\nconst compareAccountsData = ({\n    landing_companies,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    residence,\n    is_uk,\n}: TCompareAccountsDataParams) => {\n    const is_australian = residence === 'au';\n    return filterAvailableAccounts(\n        landing_companies,\n        getAccounts({ landing_companies, platform, is_logged_in, is_uk }),\n        is_logged_in,\n        is_eu_client,\n        platform,\n        is_australian\n    );\n};\n\nconst CFDCompareAccountHint = ({\n    platform,\n    show_risk_message,\n    landing_companies,\n    is_logged_in,\n    is_uk,\n}: TCFDCompareAccountHintProps) => {\n    return (\n        <div className='cfd-compare-account--hint'>\n            <div className='cfd-compare-accounts__bullet-wrapper'>\n                <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                <Localize i18n_default_text='At bank rollover, liquidity in the forex markets is reduced and may increase the spread and processing time for client orders. This happens around 21:00 GMT during daylight saving time, and 22:00 GMT non-daylight saving time.' />\n            </div>\n            {show_risk_message && (\n                <React.Fragment>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                        <Localize i18n_default_text='Margin call and stop out level will change from time to time based on market condition.' />\n                    </div>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <Text\n                            size='xs'\n                            line_height='x'\n                            weight='bold'\n                            className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                        >\n                            *\n                        </Text>\n                        <Localize\n                            i18n_default_text='To protect your portfolio from adverse market movements due to the market opening gap, we reserve the right to decrease leverage on all offered symbols for financial accounts before market close and increase it again after market open. Please make sure that you have enough funds available in your {{platform}} account to support your positions at all times.'\n                            values={{\n                                platform: platform === CFD_PLATFORMS.MT5 ? localize('MT5') : localize('Deriv X'),\n                            }}\n                        />\n                    </div>\n                    {is_uk && (\n                        <div className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                **\n                            </Text>\n                            <Localize\n                                i18n_default_text='Cryptocurrency trading is not available for clients residing in the United Kingdom.'\n                                values={{\n                                    platform: platform === CFD_PLATFORMS.MT5 ? localize('MT5') : localize('Deriv X'),\n                                }}\n                            />\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n            {getAccounts({ landing_companies, platform, is_logged_in, is_uk })\n                .filter(\n                    item =>\n                        !!(item[platform as keyof TAccountsDescription] as TAccountsDescription['mt5' | 'dxtrade'])\n                            ?.footnote\n                )\n                .map((account, index) => {\n                    return (\n                        <div key={index} className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                {index + 1}\n                            </Text>\n                            <div className='cfd-compare-accounts__footnote'>\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className='cfd-compare-accounts__footnote-title'\n                                >\n                                    {account.attribute}\n                                </Text>\n                                <Text size='xs' color='prominent'>\n                                    {\n                                        (\n                                            account[platform as keyof TAccountsDescription] as TAccountsDescription[\n                                                | 'mt5'\n                                                | 'dxtrade']\n                                        ).footnote\n                                    }\n                                </Text>\n                            </div>\n                        </div>\n                    );\n                })}\n        </div>\n    );\n};\n\nconst ModalContent = ({\n    landing_companies,\n    is_logged_in,\n    platform,\n    is_eu_client,\n    residence,\n    is_eu,\n    is_uk,\n}: TModalContentProps) => {\n    const [cols, setCols] = React.useState<Array<Record<string, string | React.ReactNode | undefined>>>([]);\n    const [template_columns, updateColumnsStyle] = React.useState(\n        platform === CFD_PLATFORMS.DXTRADE ? '1.5fr 1fr 2fr' : '1.5fr 1fr 2fr 1fr'\n    );\n\n    React.useEffect(() => {\n        setCols(compareAccountsData({ landing_companies, is_logged_in, platform, is_eu_client, residence, is_uk }));\n\n        if (is_logged_in && platform === CFD_PLATFORMS.MT5) {\n            updateColumnsStyle(\n                `1.5fr ${landing_companies?.mt_gaming_company?.financial ? '1fr' : ''} ${\n                    landing_companies?.mt_financial_company?.financial ? '2fr' : ''\n                } ${landing_companies?.mt_financial_company?.financial_stp ? ' 1fr ' : ''}`\n            );\n        } else if (is_logged_in && platform === CFD_PLATFORMS.DXTRADE) {\n            updateColumnsStyle(\n                `1.5fr ${landing_companies?.dxtrade_gaming_company ? '1fr' : ''} ${\n                    landing_companies?.dxtrade_financial_company ? '2fr' : ''\n                }`\n            );\n        }\n    }, [\n        landing_companies?.mt_financial_company,\n        landing_companies?.mt_gaming_company,\n        is_logged_in,\n        is_uk,\n        landing_companies,\n        platform,\n        is_eu_client,\n        residence,\n    ]);\n\n    const show_risk_message = platform === CFD_PLATFORMS.MT5 || !is_eu_client;\n    const financial_account_table_head_text = is_eu ? localize('CFDs') : localize('Financial');\n\n    return (\n        <Div100vhContainer height_offset='40px' is_bypassed={isDesktop()}>\n            <ThemedScrollbars\n                className='cfd-compare-accounts'\n                style={{\n                    '--cfd-compare-accounts-template-columns': template_columns,\n                }}\n            >\n                <div className='cfd-compare-accounts__table-wrapper'>\n                    <Table className='cfd-compare-accounts__table'>\n                        <Table.Header>\n                            <Table.Row className='cfd-compare-accounts__table-row'>\n                                <Table.Head fixed />\n                                {is_logged_in ? (\n                                    <React.Fragment>\n                                        {isLandingCompanyEnabled({ landing_companies, platform, type: 'gaming' }) && (\n                                            <Table.Head>{localize('Derived')}</Table.Head>\n                                        )}\n                                        {isLandingCompanyEnabled({\n                                            landing_companies,\n                                            platform,\n                                            type: 'financial',\n                                        }) && (\n                                            <Table.Head>\n                                                {financial_account_table_head_text}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                        {isLandingCompanyEnabled({\n                                            landing_companies,\n                                            platform,\n                                            type: 'financial_stp',\n                                        }) && (\n                                            <Table.Head>\n                                                {localize('Financial STP')}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                    </React.Fragment>\n                                ) : (\n                                    <React.Fragment>\n                                        <Table.Head>{localize('Derived')}</Table.Head>\n                                        <Table.Head>\n                                            {localize('Financial')}\n                                            <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                *\n                                            </Text>\n                                        </Table.Head>\n                                        {platform === CFD_PLATFORMS.MT5 && (\n                                            <Table.Head>\n                                                {localize('Financial STP')}\n                                                <Text size='s' weight='bold' className='cfd-compare-accounts__star'>\n                                                    *\n                                                </Text>\n                                            </Table.Head>\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {cols.map((row, i) => (\n                                <Table.Row key={i} className='cfd-compare-accounts__table-row'>\n                                    {Object.keys(row).map((col, j) => (\n                                        <Table.Cell key={j} fixed={j === 0}>\n                                            {row[col]}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            ))}\n                        </Table.Body>\n                    </Table>\n                </div>\n                <CFDCompareAccountHint\n                    platform={platform}\n                    show_risk_message={show_risk_message}\n                    landing_companies={landing_companies}\n                    is_logged_in={is_logged_in}\n                    is_uk={is_uk}\n                />\n            </ThemedScrollbars>\n        </Div100vhContainer>\n    );\n};\n\nexport default ModalContent;\n","import { localize } from '@deriv/translations';\nimport { TCompareAccountContentProps, TCompareAccountFooterButtonData } from '../Containers/props.types';\n\nexport const getEuRealContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            financial_maltainvest: { text: localize('MT5'), options: { size: 'xxs' } },\n        },\n    },\n    {\n        id: 'jurisdiction',\n        attribute: localize('Jurisdiction'),\n        values: {\n            financial_maltainvest: { text: localize('Malta'), options: { weight: 'bold' } },\n        },\n    },\n    {\n        id: 'counterparty',\n        attribute: localize('Counterparty company'),\n        values: {\n            financial_maltainvest: { text: localize('Deriv Investments (Europe) Limited') },\n        },\n    },\n    {\n        id: 'regulator',\n        attribute: localize('Regulator'),\n        values: {\n            financial_maltainvest: {\n                text: localize('Regulated by the Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n                options: { styles: { padding: '1.8rem 0.8rem' } },\n            },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            financial_maltainvest: { text: localize('Up to 1:30'), options: { size: 'xxxs' } },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            financial_maltainvest: [\n                { text: localize('Synthetics'), options: { should_show_asterick_at_end: true } },\n                { text: localize('Forex: standard') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n                {\n                    text: localize('*Boom 300 and Crash 300 Index'),\n                    options: { color: 'loss-danger', weight: 'bold', styles: { paddingTop: '2rem' } },\n                },\n            ],\n        },\n    },\n];\nexport const getCrRealContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            synthetic_svg: { text: localize('MT5') },\n            derivx: { text: localize('Deriv X') },\n        },\n    },\n    {\n        id: 'jurisdiction',\n        attribute: localize('Jurisdiction'),\n        values: {\n            synthetic_svg: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n            synthetic_bvi: { text: localize('British Virgin Islands'), options: { weight: 'bold' } },\n            synthetic_vanuatu: { text: localize('Vanuatu'), options: { weight: 'bold' } },\n            financial_svg: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n            financial_bvi: { text: localize('British Virgin Islands'), options: { weight: 'bold' } },\n            financial_vanuatu: { text: localize('Vanuatu'), options: { weight: 'bold' } },\n            financial_labuan: {\n                text: localize('Labuan'),\n                options: { weight: 'bold' },\n                tooltip_msg: localize(\n                    'Choosing this jurisdiction will give you a Financial STP account. Your trades will go directly to the market and have tighter spreads.'\n                ),\n            },\n            derivx: { text: localize('St. Vincent & Grenadines'), options: { weight: 'bold' } },\n        },\n    },\n    {\n        id: 'counterparty',\n        attribute: localize('Counterparty company'),\n        values: {\n            synthetic_svg: { text: localize('Deriv (SVG) LLC') },\n            synthetic_bvi: { text: localize('Deriv (BVI) Ltd') },\n            synthetic_vanuatu: { text: localize('Deriv (V) Ltd') },\n            financial_svg: { text: localize('Deriv (SVG) LLC') },\n            financial_bvi: { text: localize('Deriv (BVI) Ltd') },\n            financial_vanuatu: { text: localize('Deriv (V) Ltd') },\n            financial_labuan: { text: localize('Deriv (FX) Ltd') },\n            derivx: { text: localize('Deriv (SVG) LLC') },\n        },\n    },\n    {\n        id: 'regulator',\n        attribute: localize('Regulator/External dispute resolution'),\n        values: {\n            synthetic_svg: { text: localize('Financial Commission') },\n            synthetic_bvi: {\n                text: localize('British Virgin Islands Financial Services Commission (licence no. SIBA/L/18/1114)'),\n            },\n            synthetic_vanuatu: {\n                text: localize('Vanuatu Financial Services Commission'),\n            },\n            financial_svg: { text: localize('Financial Commission') },\n            financial_bvi: {\n                text: localize('British Virgin Islands Financial Services Commission (licence no. SIBA/L/18/1114)'),\n            },\n            financial_vanuatu: {\n                text: localize('Vanuatu Financial Services Commission'),\n            },\n            financial_labuan: { text: localize('Labuan Financial Services Authority (Licence no. MB/18/0024)') },\n            derivx: { text: 'Financial Commission' },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            synthetic_svg: { text: localize('Up to 1:1000') },\n            financial_vanuatu: { text: localize('Up to 1:1000') },\n            financial_labuan: { text: localize('Up to 1:100') },\n            derivx: { text: localize('Up to 1:1000') },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            synthetic_svg: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n            ],\n            financial_svg: [\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            financial_vanuatu: [\n                { text: localize('Forex') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            financial_labuan: [{ text: localize('Forex') }, { text: localize('Cryptocurrencies') }],\n            derivx: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n        },\n    },\n];\n\nexport const getCrRealFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'synthetic_svg' },\n    { label: localize('Add'), action: 'synthetic_bvi' },\n    { label: localize('Add'), action: 'synthetic_vanuatu' },\n    { label: localize('Add'), action: 'financial_svg' },\n    { label: localize('Add'), action: 'financial_bvi' },\n    { label: localize('Add'), action: 'financial_vanuatu' },\n    { label: localize('Add'), action: 'financial_labuan' },\n    { label: localize('Add'), action: 'derivx' },\n];\nexport const getEuFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'financial_maltainvest' },\n];\n\nexport const getPreappstoreCrDemoContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'platform',\n        attribute: localize('Platform'),\n        values: {\n            synthetic_svg: { text: localize('MT5') },\n            financial_svg: { text: localize('MT5') },\n            derivx: { text: localize('Deriv X') },\n        },\n    },\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            synthetic_svg: { text: localize('Up to 1:1000') },\n            financial_svg: { text: localize('Up to 1:1000') },\n            derivx: { text: localize('Up to 1:1000') },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            synthetic_svg: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n            ],\n            financial_svg: [\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n            derivx: [\n                { text: localize('Synthetics') },\n                { text: localize('Baskets') },\n                { text: localize('Derived FX') },\n                { text: localize('Forex: standard/micro') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n            ],\n        },\n    },\n];\n\nexport const getPreappstoreCrDemoFooterButtons = (): TCompareAccountFooterButtonData[] => [\n    { label: localize('Add'), action: 'synthetic_svg' },\n    { label: localize('Add'), action: 'financial_svg' },\n    { label: localize('Add'), action: 'derivx' },\n];\n\nexport const getPreappstoreEuDemoContent = (): TCompareAccountContentProps[] => [\n    {\n        id: 'leverage',\n        attribute: localize('Maximum leverage'),\n        values: {\n            financial_maltainvest: { text: localize('Up to 1:30'), options: { size: 'xxxs' } },\n        },\n    },\n    {\n        id: 'instruments',\n        attribute: localize('Trading instruments'),\n        values: {\n            financial_maltainvest: [\n                { text: localize('Synthetics'), options: { should_show_asterick_at_end: true } },\n                { text: localize('Forex: standard') },\n                { text: localize('Stocks') },\n                { text: localize('Stock indices') },\n                { text: localize('Commodities') },\n                { text: localize('Cryptocurrencies') },\n                {\n                    text: localize('*Boom 300 and Crash 300 Index'),\n                    options: { color: 'loss-danger', weight: 'bold', styles: { paddingTop: '2rem' } },\n                },\n            ],\n        },\n    },\n];\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Table, Button, Text, Popover } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isDesktop, WS, getAuthenticationStatusInfo, CFD_PLATFORMS, ContentFlag, Jurisdiction } from '@deriv/shared';\nimport {\n    TDMT5CompareModalContentProps,\n    TCompareAccountContentProps,\n    TCompareAccountFooterButtonData,\n    TCompareAccountContentValues,\n    TCompareAccountRowProps,\n    TCompareAccountRowItem,\n} from './props.types';\nimport {\n    getEuRealContent,\n    getCrRealContent,\n    getCrRealFooterButtons,\n    getPreappstoreCrDemoContent,\n    getPreappstoreCrDemoFooterButtons,\n    getPreappstoreEuDemoContent,\n    getEuFooterButtons,\n} from '../Constants/cfd_compare_account_content';\nimport { GetSettings, GetAccountSettingsResponse } from '@deriv/api-types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst Row = ({\n    id,\n    attribute,\n    values,\n    pre_appstore_class,\n    available_accounts_count,\n    classname_for_demo_and_eu,\n    is_pre_appstore_setting,\n    content_flag,\n    is_high_risk_for_mt5,\n    CFDs_restricted_countries,\n    financial_restricted_countries,\n    is_preappstore_restricted_cr_demo_account,\n    residence,\n}: TCompareAccountRowProps) => {\n    const is_leverage_row = id === 'leverage';\n    const is_platform_row = id === 'platform';\n    const is_instruments_row = id === 'instruments';\n    const is_other_countries = ['af', 'pk', 'mg'].includes(residence);\n\n    const getContentSize = () => {\n        if (id === 'counterparty' || id === 'leverage') return isDesktop() ? 'xxs' : 'xxxs';\n        return isDesktop() ? 'xxxs' : 'xxxxs';\n    };\n\n    if (is_platform_row && !is_pre_appstore_setting) {\n        return null;\n    }\n\n    if (is_platform_row && is_pre_appstore_setting && CFDs_restricted_countries) {\n        values.synthetic_bvi = { text: 'MT5' };\n    }\n    if (CFDs_restricted_countries) {\n        if (is_leverage_row) values.synthetic_bvi = { text: localize('Up to 1:1000') };\n        delete values.derivx;\n    }\n    if (is_platform_row && financial_restricted_countries) {\n        values.financial_svg = { text: localize('MT5') };\n        if ('financial_labuan' in values) values.financial_labuan = { text: localize('MT5') };\n    }\n    // As we only show one account for Demo\n    if (content_flag === ContentFlag.CR_DEMO) {\n        delete values.financial_labuan;\n    }\n\n    if (is_pre_appstore_setting && is_preappstore_restricted_cr_demo_account) {\n        delete values.synthetic_bvi;\n    }\n\n    if (is_platform_row && content_flag === ContentFlag.HIGH_RISK_CR && is_high_risk_for_mt5) {\n        // needed to adjust the design for high risk\n        values.financial_svg = { text: 'MT5' };\n    }\n    return (\n        <Table.Row\n            className={\n                classname_for_demo_and_eu ??\n                classNames(`cfd-accounts-compare-modal__table-row${pre_appstore_class}`, {\n                    [`cfd-accounts-compare-modal__table-row--leverage${pre_appstore_class}`]: is_leverage_row,\n                    [`cfd-accounts-compare-modal__row-with-columns-count-${available_accounts_count + 1}`]:\n                        available_accounts_count < 6,\n                    [`cfd-accounts-compare-modal__table-row--platform${pre_appstore_class}`]: is_platform_row,\n                    [`cfd-accounts-compare-modal__table-row--instruments${pre_appstore_class}`]: is_instruments_row,\n                    'cfd-accounts-compare-modal__table-row--other-country': is_other_countries,\n                    [`cfd-accounts-compare-modal__table-row--leverage__${residence}`]:\n                        is_leverage_row && is_other_countries,\n                    [`cfd-accounts-compare-modal__table-row--instruments__${residence}`]:\n                        is_instruments_row && is_other_countries,\n                })\n            }\n        >\n            <Table.Cell fixed>\n                <Text as='p' weight='bold' color='prominent' size='xxs'>\n                    {attribute}\n                </Text>\n            </Table.Cell>\n\n            {Object.keys(values).map(rowKey => (\n                <Table.Cell\n                    key={rowKey}\n                    className={classNames('cfd-accounts-compare-modal__table-row-item', {\n                        'cfd-accounts-compare-modal__table-row-item--tooltip': (\n                            values[rowKey] as TCompareAccountRowItem\n                        )?.tooltip_msg,\n                    })}\n                >\n                    <>\n                        {Array.isArray(values[rowKey]) ? (\n                            (values[rowKey] as TCompareAccountRowItem[])?.map((item, index) => (\n                                <Text\n                                    key={index}\n                                    as='p'\n                                    color={item?.options?.color ?? 'prominent'}\n                                    weight={item?.options?.weight ?? 'normal'}\n                                    align={item?.options?.align ?? 'center'}\n                                    size={item?.options?.size ?? getContentSize()}\n                                    styles={item?.options?.styles ?? ''}\n                                >\n                                    {item.text}\n                                    {item?.options?.should_show_asterick_at_end && (\n                                        <Text color={'loss-danger'} size={'xxxs'}>\n                                            *\n                                        </Text>\n                                    )}\n                                </Text>\n                            ))\n                        ) : (\n                            <>\n                                <Text\n                                    as='p'\n                                    weight={(values[rowKey] as TCompareAccountRowItem)?.options?.weight ?? 'normal'}\n                                    align={(values[rowKey] as TCompareAccountRowItem)?.options?.align ?? 'center'}\n                                    color={(values[rowKey] as TCompareAccountRowItem)?.options?.color ?? 'prominent'}\n                                    size={(values[rowKey] as TCompareAccountRowItem)?.options?.size ?? getContentSize()}\n                                    styles={(values[rowKey] as TCompareAccountRowItem)?.options?.styles ?? ''}\n                                >\n                                    {(values[rowKey] as TCompareAccountRowItem)?.text}\n                                </Text>\n                                {(values[rowKey] as TCompareAccountRowItem)?.tooltip_msg && (\n                                    <Popover\n                                        alignment='left'\n                                        className='cfd-compare-accounts-tooltip'\n                                        classNameBubble='cfd-compare-accounts-tooltip--msg'\n                                        icon='info'\n                                        disable_message_icon\n                                        is_bubble_hover_enabled\n                                        message={(values[rowKey] as TCompareAccountRowItem)?.tooltip_msg}\n                                        zIndex={9999}\n                                    />\n                                )}\n                            </>\n                        )}\n                    </>\n                </Table.Cell>\n            ))}\n        </Table.Row>\n    );\n};\n\nconst DMT5CompareModalContent = observer(\n    ({\n        content_flag,\n        is_demo_tab,\n        is_logged_in,\n        is_pre_appstore_setting,\n        is_preappstore_cr_demo_account,\n        is_preappstore_restricted_cr_demo_account,\n        is_real_enabled,\n        openDerivRealAccountNeededModal,\n        openPasswordModal,\n        real_account_creation_unlock_date,\n        setShouldShowCooldownModal,\n        should_show_derivx,\n        show_eu_related_content,\n        toggleCompareAccounts,\n    }: TDMT5CompareModalContentProps) => {\n        const { client, ui, common, traders_hub } = useStore();\n\n        const {\n            account_settings,\n            account_status,\n            has_active_real_account: has_real_account,\n            is_virtual,\n            should_restrict_bvi_account_creation,\n            setAccountSettings,\n            should_restrict_vanuatu_account_creation,\n            trading_platform_available_accounts,\n            updateMT5Status,\n            upgradeable_landing_companies,\n            residence,\n        } = client;\n        const { openSwitchToRealAccountModal } = ui;\n        const { setAppstorePlatform } = common;\n        const { no_CR_account, is_eu_user, no_MF_account, CFDs_restricted_countries, financial_restricted_countries } =\n            traders_hub;\n\n        const {\n            clearCFDError,\n            current_list,\n            setAccountType,\n            setJurisdictionSelectedShortcode,\n            toggleCFDVerificationModal,\n        } = useCfdStore();\n\n        const [has_submitted_personal_details, setHasSubmittedPersonalDetails] = React.useState(false);\n\n        const mt5_platforms = trading_platform_available_accounts.map(\n            account => `${account.market_type === 'gaming' ? 'synthetic' : account.market_type}_${account.shortcode}`\n        );\n\n        const has_synthetic = trading_platform_available_accounts.some(account => account.market_type === 'gaming');\n        const available_accounts_keys = [...mt5_platforms, ...(should_show_derivx && has_synthetic ? ['derivx'] : [])];\n\n        const logged_out_available_accounts_count = show_eu_related_content ? 1 : 6;\n        const available_accounts_count = is_logged_in\n            ? available_accounts_keys.length\n            : logged_out_available_accounts_count;\n        const synthetic_accounts_count =\n            !is_logged_in && !show_eu_related_content\n                ? 2\n                : available_accounts_keys.filter(key => key.startsWith('synthetic')).length;\n        const financial_accounts_count =\n            !is_logged_in && !show_eu_related_content\n                ? 4\n                : available_accounts_keys.filter(key => key.startsWith('financial')).length || 1;\n\n        const is_high_risk_for_mt5 = synthetic_accounts_count === 1 && financial_accounts_count === 1;\n        const {\n            poi_or_poa_not_submitted,\n            poi_acknowledged_for_maltainvest,\n            poi_acknowledged_for_bvi_labuan_vanuatu,\n            poa_acknowledged,\n            poa_pending,\n        } = getAuthenticationStatusInfo(account_status);\n\n        const is_other_countries = ['af', 'pk', 'mg'].includes(residence);\n\n        React.useEffect(() => {\n            if (is_logged_in && !is_virtual) {\n                updateMT5Status();\n            }\n            if (!has_submitted_personal_details) {\n                let get_settings_response: GetSettings = {};\n                if (!account_settings) {\n                    WS.authorized.storage.getSettings().then((response: GetAccountSettingsResponse) => {\n                        get_settings_response = response.get_settings as GetSettings;\n                        setAccountSettings(response.get_settings as GetSettings);\n                    });\n                } else {\n                    get_settings_response = account_settings;\n                }\n                const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n                    get_settings_response;\n                if (citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason) {\n                    setHasSubmittedPersonalDetails(true);\n                }\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        const getAvailableAccountsContent = (modal_content: TCompareAccountContentProps[]) => {\n            if (!is_logged_in) {\n                if (show_eu_related_content) {\n                    return modal_content;\n                }\n                const mt5_data = modal_content.map(item => {\n                    const { derivx, ...rest } = item.values; // eslint-disable-line @typescript-eslint/no-unused-vars\n                    return { ...item, values: rest };\n                });\n                return mt5_data;\n            }\n            return modal_content.map(row_data => {\n                const available_accounts_values = Object.entries(row_data.values).reduce(\n                    (acc, [key, value]) => (available_accounts_keys.includes(key) ? { ...acc, [key]: value } : acc),\n                    {} as TCompareAccountContentValues\n                );\n                const content_data = { ...row_data, values: {} as TCompareAccountContentValues };\n                const col_num = should_show_derivx ? 7 : 6;\n                if (available_accounts_keys.length < col_num && !show_eu_related_content) {\n                    // order of the values matters for data to be correctly displayed in the table\n                    const sorted_values = [\n                        'synthetic_svg',\n                        'synthetic_bvi',\n                        'financial_svg',\n                        'financial_bvi',\n                        'financial_vanuatu',\n                        'financial_labuan',\n                        ...(should_show_derivx && synthetic_accounts_count > 0 ? ['derivx'] : []),\n                    ];\n                    content_data.values = sorted_values.reduce(\n                        (acc, el) => (available_accounts_keys.includes(el) ? { ...acc, [el]: undefined } : acc),\n                        {}\n                    );\n                    available_accounts_keys.forEach(key => {\n                        if (row_data.id === 'leverage' && (key === 'financial_svg' || key === 'financial_bvi')) {\n                            content_data.values[key] = row_data.values.financial_vanuatu;\n                        } else if (row_data.id === 'instruments' && key === 'synthetic_bvi') {\n                            content_data.values[key] = row_data.values.synthetic_svg;\n                        } else if (row_data.id === 'instruments' && key === 'financial_bvi') {\n                            content_data.values[key] = row_data.values.financial_svg;\n                        }\n                    });\n                }\n                return { ...content_data, values: { ...content_data.values, ...available_accounts_values } };\n            });\n        };\n\n        const getAvailableAccountsFooterButtons = (footer_button_data: TCompareAccountFooterButtonData[]) => {\n            return footer_button_data.filter(data => {\n                if (CFDs_restricted_countries) {\n                    //remove derivx button if user is from restricted countries\n                    if (data.action === 'derivx') return false;\n                }\n                return available_accounts_keys.includes(data.action);\n            });\n        };\n\n        const onSelectRealAccount = (item: TCompareAccountFooterButtonData) => {\n            const selected_account_type = () => {\n                if (item.action === 'derivx') return 'all';\n                return item.action.startsWith('financial') ? 'financial' : 'synthetic';\n            };\n\n            const type_of_account = {\n                category: is_demo_tab ? 'demo' : 'real',\n                type: selected_account_type(),\n            };\n            clearCFDError();\n            setAccountType(type_of_account);\n\n            switch (item.action) {\n                case 'synthetic_svg':\n                case 'financial_svg':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                    openPasswordModal(type_of_account);\n                    break;\n                case 'synthetic_bvi':\n                case 'financial_bvi':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.BVI);\n                    if (\n                        poi_acknowledged_for_bvi_labuan_vanuatu &&\n                        !poi_or_poa_not_submitted &&\n                        !should_restrict_bvi_account_creation &&\n                        has_submitted_personal_details &&\n                        poa_acknowledged\n                    ) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'synthetic_vanuatu':\n                case 'financial_vanuatu':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.VANUATU);\n                    if (\n                        poi_acknowledged_for_bvi_labuan_vanuatu &&\n                        !poi_or_poa_not_submitted &&\n                        !should_restrict_vanuatu_account_creation &&\n                        has_submitted_personal_details &&\n                        poa_acknowledged\n                    ) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'financial_labuan':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.LABUAN);\n                    if (poi_acknowledged_for_bvi_labuan_vanuatu && poa_acknowledged && has_submitted_personal_details) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'financial_maltainvest':\n                    setAppstorePlatform(CFD_PLATFORMS.MT5);\n                    setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                    if ((poi_acknowledged_for_maltainvest && poa_acknowledged) || is_demo_tab) {\n                        openPasswordModal(type_of_account);\n                    } else {\n                        toggleCFDVerificationModal();\n                    }\n                    break;\n                case 'derivx':\n                    setAppstorePlatform(CFD_PLATFORMS.DXTRADE);\n                    openPasswordModal(type_of_account);\n                    break;\n                default:\n            }\n        };\n\n        const isMt5AccountAdded = (item: TCompareAccountFooterButtonData) =>\n            Object.entries(current_list).some(([key, value]) => {\n                const [market, type] = item.action.split('_');\n                const current_account_type = is_demo_tab ? 'demo' : 'real';\n                return (\n                    value.market_type === market &&\n                    value.landing_company_short === type &&\n                    value.account_type === current_account_type &&\n                    key.includes(CFD_PLATFORMS.MT5)\n                );\n            });\n\n        const isDxtradeAccountAdded = () =>\n            Object.entries(current_list).some(([key, value]) => {\n                const current_account_type = is_demo_tab ? 'demo' : 'real';\n                return value.account_type === current_account_type && key.includes(CFD_PLATFORMS.DXTRADE);\n            });\n\n        const onButtonClick = (item: TCompareAccountFooterButtonData) => {\n            const if_no_corresponding_real_account = is_pre_appstore_setting\n                ? (no_CR_account && !is_eu_user) || (no_MF_account && is_eu_user)\n                : !has_real_account;\n\n            const should_show_missing_real_account =\n                is_logged_in &&\n                if_no_corresponding_real_account &&\n                upgradeable_landing_companies?.length > 0 &&\n                is_real_enabled;\n\n            toggleCompareAccounts();\n            if (should_show_missing_real_account) {\n                if (real_account_creation_unlock_date && item.action === 'financial_maltainvest') {\n                    setShouldShowCooldownModal(true);\n                } else {\n                    openDerivRealAccountNeededModal();\n                }\n            } else if (\n                is_virtual &&\n                !['synthetic_svg', 'financial_svg', 'derivx', 'financial_maltainvest'].includes(item.action)\n            ) {\n                openSwitchToRealAccountModal();\n            } else {\n                onSelectRealAccount(item);\n            }\n        };\n\n        const getModalContent = () => {\n            if (is_preappstore_cr_demo_account) {\n                return getPreappstoreCrDemoContent();\n            } else if (show_eu_related_content) {\n                if (is_pre_appstore_setting && content_flag === ContentFlag.EU_DEMO) {\n                    return getPreappstoreEuDemoContent();\n                }\n                return getEuRealContent();\n            }\n            return getCrRealContent();\n        };\n\n        const modal_footer = () => {\n            if (is_preappstore_cr_demo_account) return getPreappstoreCrDemoFooterButtons();\n            else if (is_demo_tab && show_eu_related_content) return getEuFooterButtons();\n            return show_eu_related_content ? getEuFooterButtons() : getCrRealFooterButtons();\n        };\n\n        const shouldShowPendingStatus = (item: TCompareAccountFooterButtonData) => {\n            const type = item.action.split('_')[1];\n            if (isMt5AccountAdded(item)) {\n                return false;\n            } else if (item.action === 'derivx') {\n                return false;\n            } else if (type === 'bvi' && should_restrict_bvi_account_creation && poa_pending) {\n                return true;\n            } else if (type === 'vanuatu' && should_restrict_vanuatu_account_creation && poa_pending) {\n                return true;\n            }\n\n            return false;\n        };\n\n        const pre_appstore_class = should_show_derivx && synthetic_accounts_count ? '__pre-appstore' : '';\n\n        const getClassNamesForDemoAndEu = () => {\n            if (is_preappstore_cr_demo_account) return 'cfd-accounts-compare-modal-row-demo';\n            else if (show_eu_related_content) return 'cfd-accounts-compare-modal-row-eu';\n            return null;\n        };\n\n        const classname_for_demo_and_eu = getClassNamesForDemoAndEu();\n\n        return (\n            <div className='cfd-accounts-compare-modal'>\n                <div className='cfd-accounts-compare-modal__table-wrapper'>\n                    <Table className='cfd-accounts-compare-modal__table'>\n                        <Table.Header>\n                            <Table.Row\n                                className={\n                                    classname_for_demo_and_eu ??\n                                    classNames(`cfd-accounts-compare-modal__table-header${pre_appstore_class}`, {\n                                        [`cfd-accounts-compare-modal__table-header-for-synthetic-${synthetic_accounts_count}-financial-${financial_accounts_count}${pre_appstore_class}`]:\n                                            available_accounts_count < 6 && !CFDs_restricted_countries,\n                                        [`cfd-accounts-compare-modal__table-header-for-synthetic-${synthetic_accounts_count}${pre_appstore_class}`]:\n                                            CFDs_restricted_countries,\n                                    })\n                                }\n                            >\n                                <Table.Head fixed className='cfd-accounts-compare-modal__table-empty-cell' />\n                                {!show_eu_related_content && synthetic_accounts_count > 0 && (\n                                    <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                        {localize('Derived')}\n                                    </Table.Head>\n                                )}\n                                {!CFDs_restricted_countries && financial_accounts_count > 0 && (\n                                    <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                        {show_eu_related_content ? localize('CFDs') : localize('Financial')}\n                                    </Table.Head>\n                                )}\n                                {!CFDs_restricted_countries && should_show_derivx && synthetic_accounts_count > 0 && (\n                                    <Table.Head className='cfd-accounts-compare-modal__table-header-item'>\n                                        {localize('Deriv X')}\n                                    </Table.Head>\n                                )}\n                            </Table.Row>\n                        </Table.Header>\n\n                        <React.Fragment>\n                            <Table.Body>\n                                {getAvailableAccountsContent(getModalContent()).map(row => (\n                                    <Row\n                                        key={row.id}\n                                        {...row}\n                                        pre_appstore_class={pre_appstore_class}\n                                        available_accounts_count={available_accounts_count}\n                                        classname_for_demo_and_eu={classname_for_demo_and_eu}\n                                        is_pre_appstore_setting={is_pre_appstore_setting}\n                                        content_flag={content_flag}\n                                        is_high_risk_for_mt5={is_high_risk_for_mt5}\n                                        CFDs_restricted_countries={CFDs_restricted_countries}\n                                        financial_restricted_countries={financial_restricted_countries}\n                                        is_preappstore_restricted_cr_demo_account={\n                                            is_preappstore_restricted_cr_demo_account\n                                        }\n                                        residence={residence}\n                                    />\n                                ))}\n                            </Table.Body>\n                            {is_logged_in && (\n                                <Table.Row\n                                    className={\n                                        classname_for_demo_and_eu ??\n                                        classNames(`cfd-accounts-compare-modal__table-footer${pre_appstore_class}`, {\n                                            [`cfd-accounts-compare-modal__row-with-columns-count-${\n                                                available_accounts_count + 1\n                                            }`]: available_accounts_count < 6,\n                                            [`cfd-accounts-compare-modal__table-footer__${residence}`]:\n                                                is_other_countries,\n                                        })\n                                    }\n                                >\n                                    <Table.Cell\n                                        fixed\n                                        className={\n                                            'cfd-accounts-compare-modal__table-empty-cell cfd-accounts-compare-modal__table-footer__item'\n                                        }\n                                    />\n\n                                    {getAvailableAccountsFooterButtons(modal_footer()).map((item, index) => (\n                                        <Table.Cell\n                                            key={index}\n                                            className={classNames('cfd-accounts-compare-modal__table-footer__item', {\n                                                [`cfd-accounts-compare-modal__table-footer__item--eu-pre_appstore}`]:\n                                                    is_pre_appstore_setting && show_eu_related_content,\n                                            })}\n                                        >\n                                            {!is_demo_tab && shouldShowPendingStatus(item) ? (\n                                                <div className='cfd-accounts-compare-modal__table-footer__item--verification-pending'>\n                                                    <Text size={isDesktop ? 'xxs' : 'xxxs'} align='center'>\n                                                        {localize('Pending verification')}\n                                                    </Text>\n                                                </div>\n                                            ) : (\n                                                <Button\n                                                    className='cfd-accounts-compare-modal__table-footer__button'\n                                                    disabled={\n                                                        item.action === 'derivx'\n                                                            ? isDxtradeAccountAdded()\n                                                            : isMt5AccountAdded(item)\n                                                    }\n                                                    type='button'\n                                                    primary_light\n                                                    onClick={() => onButtonClick(item)}\n                                                >\n                                                    {item.label}\n                                                </Button>\n                                            )}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            )}\n                        </React.Fragment>\n                    </Table>\n                </div>\n            </div>\n        );\n    }\n);\n\nexport default DMT5CompareModalContent;\n","import React from 'react';\nimport { Table, Text, ThemedScrollbars, Div100vhContainer } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { isDesktop, CFD_PLATFORMS } from '@deriv/shared';\nimport { LandingCompany, CurrencyConfigStructure } from '@deriv/api-types';\n\n// TODO: Remove this temporary type when api-types updates\ntype TLandingCompany = LandingCompany & {\n    /**\n     * Available Deriv X financial account types (all except Synthetic Indices).\n     */\n    dxtrade_all_company?: {\n        /**\n         * Landing Company details.\n         */\n        standard?: {\n            /**\n             * Landing Company address\n             */\n            address?: string[] | null;\n            /**\n             * Special conditions for changing sensitive fields\n             */\n            changeable_fields?: {\n                [k: string]: unknown;\n            };\n            /**\n             * Landing Company country of incorporation\n             */\n            country?: string;\n            currency_config?: CurrencyConfigStructure;\n            /**\n             * Flag to indicate whether reality check is applicable for this Landing Company. `1`: applicable, `0`: not applicable. The Reality Check is a feature that gives a summary of the client's trades and account balances on a regular basis throughout his session, and is a regulatory requirement for certain Landing Companies.\n             */\n            has_reality_check?: 0 | 1;\n            /**\n             * Allowed contract types\n             */\n            legal_allowed_contract_categories?: string[];\n            /**\n             * Allowable currencies\n             */\n            legal_allowed_currencies?: string[];\n            /**\n             * Allowable markets\n             */\n            legal_allowed_markets?: string[];\n            /**\n             * Default account currency\n             */\n            legal_default_currency?: string;\n            /**\n             * Landing Company legal name\n             */\n            name?: string;\n            /**\n             * Legal requirements for the Landing Company\n             */\n            requirements?: {\n                [k: string]: unknown;\n            };\n            /**\n             * Landing Company short code\n             */\n            shortcode?: string;\n            /**\n             * Flag that indicates whether the landing company supports professional accounts or not\n             */\n            support_professional_client?: 0 | 1;\n        };\n    };\n};\n\ntype TCFDAttributeDescriberProps = {\n    name: string;\n    counter: number | null;\n};\n\ntype TFilterAvailableAccounts = (\n    landing_companies: TLandingCompany,\n    table: TAccountsDescription[],\n    is_logged_in: boolean,\n    is_eu_client: boolean,\n    platform: string,\n    is_australian: boolean\n) => Array<{ [key: string]: string | React.ReactNode | undefined }>;\n\ntype TAccountsDescription = {\n    attribute: string;\n    dxtrade: TDxTradeAccountsDescription;\n};\n\ntype TDxTradeAccountsDescription = {\n    derivx: string;\n    footnote: string | null;\n};\n\ntype TCompareAccountsReusedProps = {\n    landing_companies: TLandingCompany;\n    platform: string;\n    is_logged_in: boolean;\n    is_uk: boolean;\n};\n\ntype TCompareAccountsDataParams = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n};\n\ntype TCFDCompareAccountHintProps = TCompareAccountsReusedProps & {\n    show_risk_message: boolean;\n};\n\ntype TModalContentProps = TCompareAccountsReusedProps & {\n    is_eu_client: boolean;\n    residence: string;\n    is_eu: boolean;\n};\n\ntype TGetAccounts = (params: TCompareAccountsReusedProps) => TAccountsDescription[];\n\ntype TAccountTypesToFilter = (TLandingCompany['dxtrade_all_company'] | boolean | undefined)[];\n\nconst getAccounts: TGetAccounts = ({ landing_companies, is_logged_in }) => {\n    const getLoggedInTypesCount = ([landing_companies?.dxtrade_all_company] as TAccountTypesToFilter).length;\n\n    const account_types_count = is_logged_in ? getLoggedInTypesCount : 2;\n\n    return [\n        {\n            attribute: localize('Currency'),\n            dxtrade: {\n                derivx: localize('USD'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Maximum leverage'),\n            dxtrade: {\n                derivx: localize('Up to 1:1000'),\n                footnote: localize(\n                    'Leverage gives you the ability to trade a larger position using your existing capital. Leverage varies across different symbols.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Order execution'),\n            dxtrade: {\n                derivx: localize('Market'),\n                footnote: localize(\n                    \"All {{count}} account types use market execution. This means you agree with the broker's price in advance and will place orders at the broker's price.\",\n                    {\n                        count: account_types_count,\n                    }\n                ),\n            },\n        },\n        {\n            attribute: localize('Spread'),\n            dxtrade: {\n                derivx: localize('Fixed/Variable'),\n                footnote: localize(\n                    \"The spread is the difference between the buy price and sell price. A variable spread means that the spread is constantly changing, depending on market conditions. A fixed spread remains constant but is subject to alteration, at the Broker's absolute discretion.\"\n                ),\n            },\n        },\n        {\n            attribute: localize('Commission'),\n            dxtrade: {\n                derivx: localize('No'),\n                footnote: localize('Deriv charges no commission across all account types.'),\n            },\n        },\n        {\n            attribute: localize('Minimum deposit'),\n            dxtrade: {\n                derivx: localize('No'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Margin call'),\n            dxtrade: {\n                derivx: localize('100%'),\n                footnote: localize(\n                    'You’ll get a warning, named margin call, if your account balance drops down close to the stop out level.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Stop out level'),\n            dxtrade: {\n                derivx: localize('50%'),\n                footnote: localize(\n                    'If your margin level drops below our stop out level, your positions may be closed automatically to protect you from further losses.'\n                ),\n            },\n        },\n        {\n            attribute: localize('Negative Balance Protection'),\n            dxtrade: {\n                derivx: localize('Available'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Number of assets'),\n            dxtrade: {\n                derivx: localize('110+'),\n                footnote: null,\n            },\n        },\n        {\n            attribute: localize('Cryptocurrency trading'),\n            dxtrade: {\n                derivx: localize('N/A'),\n                footnote: localize('Indicates the availability of cryptocurrency trading on a particular account.'),\n            },\n        },\n        {\n            attribute: localize('Trading instruments'),\n            dxtrade: {\n                derivx: localize(\n                    'Synthetics, Baskets, Derived FX, Forex: standard/micro, Stocks, Stock indices, Commodities, Cryptocurrencies'\n                ),\n                footnote: null,\n            },\n        },\n    ];\n};\n\nconst CFDAttributeDescriber = ({ name, counter }: TCFDAttributeDescriberProps) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [is_visible, setIsVisible] = React.useState(false);\n    const toggleModal = () => setIsVisible(prev => !prev);\n\n    return counter ? (\n        <React.Fragment>\n            <Text\n                as='p'\n                weight='bold'\n                size='xs'\n                line_height='s'\n                className='cfd-attribute-describer'\n                onClick={toggleModal}\n            >\n                {name}\n                <Text weight='bold' as='span' line_height='x' size='xxxs' className='counter'>\n                    {counter}\n                </Text>\n            </Text>\n        </React.Fragment>\n    ) : (\n        <Text as='p' weight='bold' size='xs' line_height='s' className='cfd-attribute-describer'>\n            {name}\n        </Text>\n    );\n};\n\nconst filterAvailableAccounts: TFilterAvailableAccounts = (\n    landing_companies,\n    table,\n    is_logged_in,\n    is_eu_client,\n    platform\n) => {\n    let footnote_number = 0;\n    return table\n        .filter(row => row[platform as keyof TAccountsDescription])\n        .map(({ attribute, dxtrade = {} }) => {\n            const { derivx, footnote } = dxtrade;\n            const footnote_counter = footnote ? ++footnote_number : null;\n\n            if (platform === CFD_PLATFORMS.DXTRADE) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                    derivx,\n                };\n            }\n            if (is_logged_in) {\n                return {\n                    attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n                };\n            }\n            return {\n                attribute: <CFDAttributeDescriber name={attribute} counter={footnote_counter} />,\n            };\n        });\n};\n\nconst compareAccountsData = ({\n    landing_companies,\n    is_logged_in,\n    is_eu_client,\n    platform,\n    residence,\n    is_uk,\n}: TCompareAccountsDataParams) => {\n    const is_australian = residence === 'au';\n    return filterAvailableAccounts(\n        landing_companies,\n        getAccounts({ landing_companies, platform, is_logged_in, is_uk }),\n        is_logged_in,\n        is_eu_client,\n        platform,\n        is_australian\n    );\n};\n\nconst CFDCompareAccountHint = ({\n    platform,\n    show_risk_message,\n    landing_companies,\n    is_logged_in,\n    is_uk,\n}: TCFDCompareAccountHintProps) => {\n    return (\n        <div className='cfd-compare-account--hint'>\n            <div className='cfd-compare-accounts__bullet-wrapper'>\n                <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                <Localize i18n_default_text='At bank rollover, liquidity in the forex markets is reduced and may increase the spread and processing time for client orders. This happens around 21:00 GMT during daylight saving time, and 22:00 GMT non-daylight saving time.' />\n            </div>\n            {show_risk_message && (\n                <React.Fragment>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <span className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--circle' />\n                        <Localize i18n_default_text='Margin call and stop out level will change from time to time based on market condition.' />\n                    </div>\n                    <div className='cfd-compare-accounts__bullet-wrapper'>\n                        <Text\n                            size='xs'\n                            line_height='x'\n                            weight='bold'\n                            className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                        >\n                            *\n                        </Text>\n                        <Localize\n                            i18n_default_text='To protect your portfolio from adverse market movements due to the market opening gap, we reserve the right to decrease leverage on all offered symbols for financial accounts before market close and increase it again after market open. Please make sure that you have enough funds available in your {{platform}} account to support your positions at all times.'\n                            values={{\n                                platform: localize('Deriv X'),\n                            }}\n                        />\n                    </div>\n                    {is_uk && (\n                        <div className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                **\n                            </Text>\n                            <Localize\n                                i18n_default_text='Cryptocurrency trading is not available for clients residing in the United Kingdom.'\n                                values={{\n                                    platform: localize('Deriv X'),\n                                }}\n                            />\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n            {getAccounts({ landing_companies, platform, is_logged_in, is_uk })\n                .filter(\n                    item =>\n                        !!(item[platform as keyof TAccountsDescription] as TAccountsDescription['dxtrade'])?.footnote\n                )\n                .map((account, index) => {\n                    return (\n                        <div key={index} className='cfd-compare-accounts__bullet-wrapper'>\n                            <Text\n                                size='xs'\n                                line_height='x'\n                                weight='bold'\n                                className='cfd-compare-accounts__bullet cfd-compare-accounts__bullet--star cfd-compare-accounts__star'\n                            >\n                                {index + 1}\n                            </Text>\n                            <div className='cfd-compare-accounts__footnote'>\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className='cfd-compare-accounts__footnote-title'\n                                >\n                                    {account.attribute}\n                                </Text>\n                                <Text size='xs' color='prominent'>\n                                    {\n                                        (\n                                            account[\n                                                platform as keyof TAccountsDescription\n                                            ] as TAccountsDescription['dxtrade']\n                                        ).footnote\n                                    }\n                                </Text>\n                            </div>\n                        </div>\n                    );\n                })}\n        </div>\n    );\n};\n\nconst CfdDxtradeCompareContent = ({\n    landing_companies,\n    is_logged_in,\n    platform,\n    is_eu_client,\n    residence,\n    is_uk,\n}: TModalContentProps) => {\n    const [cols, setCols] = React.useState<Array<Record<string, string | React.ReactNode | undefined>>>([]);\n    const [template_columns, updateColumnsStyle] = React.useState('1fr 1.5fr');\n\n    React.useEffect(() => {\n        setCols(compareAccountsData({ landing_companies, is_logged_in, platform, is_eu_client, residence, is_uk }));\n        updateColumnsStyle('1fr 1.5fr');\n    }, [\n        landing_companies?.mt_financial_company,\n        landing_companies?.mt_gaming_company,\n        is_logged_in,\n        is_uk,\n        landing_companies,\n        platform,\n        is_eu_client,\n        residence,\n    ]);\n\n    const show_risk_message = !is_eu_client;\n\n    return (\n        <Div100vhContainer height_offset='40px' is_bypassed={isDesktop()}>\n            <ThemedScrollbars\n                className='cfd-compare-accounts'\n                style={{\n                    '--cfd-compare-accounts-template-columns': template_columns,\n                }}\n            >\n                <div className='cfd-compare-accounts__table-wrapper'>\n                    <Table className='cfd-compare-accounts__table'>\n                        <Table.Header>\n                            <Table.Row className='cfd-compare-accounts__table-row'>\n                                <Table.Head fixed />\n                                <Table.Head>{localize('Deriv X')}</Table.Head>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {cols.map((row, i) => (\n                                <Table.Row key={i} className='cfd-compare-accounts__table-row'>\n                                    {Object.keys(row).map((col, j) => (\n                                        <Table.Cell key={j} fixed={j === 0}>\n                                            {row[col]}\n                                        </Table.Cell>\n                                    ))}\n                                </Table.Row>\n                            ))}\n                        </Table.Body>\n                    </Table>\n                </div>\n                <CFDCompareAccountHint\n                    platform={platform}\n                    show_risk_message={show_risk_message}\n                    landing_companies={landing_companies}\n                    is_logged_in={is_logged_in}\n                    is_uk={is_uk}\n                />\n            </ThemedScrollbars>\n        </Div100vhContainer>\n    );\n};\n\nexport default CfdDxtradeCompareContent;\n","import React from 'react';\nimport { Button, Modal, DesktopWrapper, MobileDialog, MobileWrapper, UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { CFD_PLATFORMS, isLandingCompanyEnabled, ContentFlag } from '@deriv/shared';\nimport ModalContent from './compare-accounts-content';\nimport DMT5CompareModalContent from './mt5-compare-table-content';\nimport CfdDxtradeCompareContent from '../Components/cfd-dxtrade-compare-content';\nimport { observer, useStore } from '@deriv/stores';\nimport { LandingCompany } from '@deriv/api-types';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\ntype TCompareAccountsReusedProps = {\n    platform: string;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCompareAccountsModalProps = TCompareAccountsReusedProps & {\n    is_real_enabled: boolean;\n    is_demo_tab: boolean;\n    has_unmerged_account: boolean;\n    openPasswordModal: (account_type: TOpenAccountTransferMeta) => void;\n    real_account_creation_unlock_date: string;\n    setShouldShowCooldownModal: (value: boolean) => void;\n};\n\ntype TDxtradeCompareAccountContent = TCompareAccountsReusedProps & {\n    is_demo_tab: boolean;\n    is_eu_client: boolean;\n    has_unmerged_account: boolean;\n    residence: string;\n    is_eu: boolean;\n    is_logged_in: boolean;\n    is_uk: boolean;\n    landing_companies: LandingCompany;\n};\n\n// TODO: Remove this component and use one component for both when real released.\nconst DxtradeCompareAccountContent = ({\n    is_demo_tab,\n    is_logged_in,\n    landing_companies,\n    platform,\n    is_eu_client,\n    has_unmerged_account,\n    residence,\n    is_eu,\n    is_uk,\n}: TDxtradeCompareAccountContent) => {\n    if (is_demo_tab || !has_unmerged_account) {\n        return (\n            <CfdDxtradeCompareContent\n                is_logged_in={is_logged_in}\n                landing_companies={landing_companies}\n                platform={platform}\n                is_eu_client={is_eu_client}\n                residence={residence}\n                is_eu={is_eu}\n                is_uk={is_uk}\n            />\n        );\n    }\n\n    return (\n        <ModalContent\n            is_logged_in={is_logged_in}\n            landing_companies={landing_companies}\n            platform={platform}\n            is_eu_client={is_eu_client}\n            residence={residence}\n            is_eu={is_eu}\n            is_uk={is_uk}\n        />\n    );\n};\n\nconst CompareAccountsModal = observer(\n    ({\n        has_unmerged_account,\n        is_demo_tab,\n        is_real_enabled,\n        openPasswordModal,\n        platform,\n        real_account_creation_unlock_date,\n        setShouldShowCooldownModal,\n    }: TCompareAccountsModalProps) => {\n        const { ui, client, traders_hub } = useStore();\n\n        const { disableApp, enableApp, openDerivRealAccountNeededModal } = ui;\n        const {\n            is_populating_mt5_account_list: is_loading,\n            is_eu,\n            is_uk,\n            is_logged_in,\n            landing_companies,\n            residence,\n        } = client;\n        const { content_flag, show_eu_related_content, CFDs_restricted_countries } = traders_hub;\n\n        const { is_compare_accounts_visible, toggleCompareAccountsModal } = useCfdStore();\n        const location = window.location.pathname;\n        const is_pre_appstore_setting = location.startsWith('/appstore/traders-hub');\n\n        // TODO : should change the type to all after changing derivx api\n        const has_derivx =\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform: CFD_PLATFORMS.DXTRADE,\n                type: 'financial',\n            }) ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform: CFD_PLATFORMS.DXTRADE,\n                type: 'gaming',\n            }) ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform: CFD_PLATFORMS.DXTRADE,\n                type: 'all',\n            });\n\n        const should_show_derivx = is_pre_appstore_setting && has_derivx && !show_eu_related_content;\n\n        const is_preappstore_cr_demo_account = is_pre_appstore_setting && content_flag === ContentFlag.CR_DEMO;\n\n        const is_preappstore_restricted_cr_demo_account =\n            is_pre_appstore_setting && CFDs_restricted_countries && content_flag === ContentFlag.CR_DEMO;\n\n        const is_dxtrade = platform && platform === CFD_PLATFORMS.DXTRADE;\n        const mt5_accounts = [\n            landing_companies?.mt_gaming_company?.financial,\n            landing_companies?.mt_financial_company?.financial,\n            landing_companies?.mt_financial_company?.financial_stp,\n        ];\n\n        const cfd_account_button_label =\n            mt5_accounts.filter(Boolean).length === 1 ||\n            (is_demo_tab && platform === CFD_PLATFORMS.DXTRADE) ||\n            (!has_unmerged_account && platform === CFD_PLATFORMS.DXTRADE)\n                ? localize('Account Information')\n                : localize('Compare accounts');\n\n        const getCFDModalTitle = () => {\n            if (is_pre_appstore_setting && show_eu_related_content) {\n                return is_demo_tab ? localize('Deriv MT5 CFDs demo account') : localize('Deriv MT5 CFDs real account');\n            } else if (should_show_derivx) {\n                return is_demo_tab ? localize('Compare CFDs demo accounts') : localize('Compare CFDs real accounts');\n            }\n            return is_dxtrade ? cfd_account_button_label : localize('Compare available accounts');\n        };\n        const getModalStyle = () => {\n            if (is_dxtrade) {\n                return {\n                    height: '696px',\n                    width: '903px',\n                };\n            } else if (is_preappstore_cr_demo_account) {\n                return {\n                    height: '404px',\n                    width: '610px',\n                };\n            } else if (show_eu_related_content) {\n                if (is_pre_appstore_setting) {\n                    if (content_flag === ContentFlag.EU_DEMO) {\n                        return {\n                            height: '350px',\n                            width: '483px',\n                        };\n                    }\n                    return {\n                        height: '560px',\n                        width: '483px',\n                    };\n                }\n                return {\n                    height: '525px',\n                    width: '300px',\n                };\n            } else if (is_pre_appstore_setting && should_show_derivx) {\n                return {\n                    height: '600px',\n                    width: '1115px',\n                };\n            }\n            return {\n                height: '506px',\n                width: '996px',\n            };\n        };\n\n        const getModalContent = () => {\n            return is_dxtrade ? (\n                <DxtradeCompareAccountContent\n                    is_demo_tab={is_demo_tab}\n                    is_logged_in={is_logged_in}\n                    landing_companies={landing_companies}\n                    platform={platform}\n                    is_eu_client={!!show_eu_related_content}\n                    residence={residence}\n                    has_unmerged_account={has_unmerged_account}\n                    is_eu={is_eu}\n                    is_uk={is_uk}\n                />\n            ) : (\n                <DMT5CompareModalContent\n                    content_flag={content_flag}\n                    is_demo_tab={is_demo_tab}\n                    is_logged_in={is_logged_in}\n                    is_pre_appstore_setting={is_pre_appstore_setting}\n                    is_preappstore_cr_demo_account={is_preappstore_cr_demo_account}\n                    is_preappstore_restricted_cr_demo_account={is_preappstore_restricted_cr_demo_account}\n                    is_real_enabled={is_real_enabled}\n                    openDerivRealAccountNeededModal={openDerivRealAccountNeededModal}\n                    openPasswordModal={openPasswordModal}\n                    real_account_creation_unlock_date={real_account_creation_unlock_date}\n                    setShouldShowCooldownModal={setShouldShowCooldownModal}\n                    should_show_derivx={should_show_derivx}\n                    show_eu_related_content={show_eu_related_content}\n                    toggleCompareAccounts={toggleCompareAccountsModal}\n                />\n            );\n        };\n\n        return (\n            <>\n                <div\n                    className='cfd-compare-accounts-modal__wrapper'\n                    style={{ marginTop: is_dxtrade ? '5rem' : '2.4rem' }}\n                >\n                    {!(is_demo_tab && platform === 'mt5') && !is_pre_appstore_setting && (\n                        <Button\n                            className='cfd-dashboard__welcome-message--button'\n                            has_effect\n                            text={cfd_account_button_label}\n                            onClick={toggleCompareAccountsModal}\n                            secondary\n                            disabled={is_loading}\n                        />\n                    )}\n                    <React.Suspense fallback={<UILoader />}>\n                        <DesktopWrapper>\n                            <Modal\n                                className={\n                                    is_dxtrade ? 'cfd-dashboard__compare-accounts' : 'cfd-accounts-compare-modal'\n                                }\n                                disableApp={disableApp}\n                                enableApp={enableApp}\n                                is_open={is_compare_accounts_visible}\n                                title={getCFDModalTitle()}\n                                toggleModal={toggleCompareAccountsModal}\n                                type='button'\n                                height={getModalStyle().height}\n                                width={getModalStyle().width}\n                                exit_classname={is_dxtrade ? '' : 'cfd-modal--custom-exit'}\n                            >\n                                {getModalContent()}\n                            </Modal>\n                        </DesktopWrapper>\n                        <MobileWrapper>\n                            <MobileDialog\n                                portal_element_id='deriv_app'\n                                title={getCFDModalTitle()}\n                                wrapper_classname='cfd-dashboard__compare-accounts'\n                                visible={is_compare_accounts_visible}\n                                onClose={toggleCompareAccountsModal}\n                                header_classname={is_dxtrade ? '' : 'cfd-accounts-compare-modal-mobile-header'}\n                                has_full_height\n                            >\n                                {getModalContent()}\n                            </MobileDialog>\n                        </MobileWrapper>\n                    </React.Suspense>\n                </div>\n            </>\n        );\n    }\n);\n\nexport default CompareAccountsModal;\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionVerificationItems, TJurisdictionVerificationStatus } from 'Components/props.types';\n\ntype TJurisdictionVerificationContents = {\n    short_description: string;\n    required_verification_docs: TJurisdictionVerificationItems;\n    status_references: Array<TJurisdictionVerificationStatus>;\n};\n\nexport const jurisdictionVerificationContents = (): TJurisdictionVerificationContents => ({\n    short_description: localize('We need you to submit these in order to get this account:'),\n    required_verification_docs: {\n        document_number: {\n            icon: 'IcDocumentNumberVerification',\n            text: localize('Document number (identity card, passport)'),\n        },\n        selfie: {\n            icon: 'IcSelfieVerification',\n            text: localize('A selfie of yourself.'),\n        },\n        identity_document: {\n            icon: 'IcIdentityDocumentVerification',\n            text: localize('A copy of your identity document (identity card, passport)'),\n        },\n        name_and_address: {\n            icon: 'IcNameAndAddressVerification',\n            text: localize(\n                'A recent utility bill (electricity, water or gas) or recent bank statement or government-issued letter with your name and address.'\n            ),\n        },\n        not_applicable: {\n            icon: 'IcNotApplicableVerification',\n            text: '',\n        },\n    },\n    status_references: [\n        {\n            icon: 'IcVerificationStatusYellow',\n            text: localize('Your document is pending for verification.'),\n            color: 'yellow',\n        },\n        {\n            icon: 'IcVerificationStatusRed',\n            text: localize('Verification failed. Resubmit during account creation.'),\n            color: 'red',\n        },\n        { icon: 'IcVerificationStatusGreen', text: localize('Your document is verified.'), color: 'green' },\n    ],\n});\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { jurisdictionVerificationContents } from '../../Constants/jurisdiction-contents/jurisdiction-verification-contents';\nimport { TJurisdictionCardBackProps } from 'Containers/props.types';\n\nconst JurisdictionCardBack = ({\n    card_classname,\n    disabled,\n    is_card_selected,\n    toggleCardFlip,\n    verification_docs,\n}: TJurisdictionCardBackProps) => (\n    <div\n        data-testid='dt_jurisdiction_card_back_container'\n        className={classNames(card_classname, 'cfd-card-back', {\n            [`${card_classname}--selected selected-card`]: is_card_selected,\n            'cfd-card-disabled-flat': disabled,\n        })}\n    >\n        <div\n            data-testid='dt_jurisdiction_card_back'\n            className={classNames(\n                `${card_classname}__card-content-container`,\n                `${card_classname}__card-flipped-container`\n            )}\n        >\n            <div>\n                <Icon\n                    onClick={toggleCardFlip}\n                    className='cfd-card-back-section-back-button'\n                    icon='IcBackButton'\n                    size={20}\n                />\n            </div>\n            <Text as='div' size='xxs'>\n                {jurisdictionVerificationContents().short_description}\n            </Text>\n            <div className={classNames('cfd-card-back-section-items-container')}>\n                {verification_docs?.map(verification_item => (\n                    <div key={verification_item} className='cfd-card-back-section-items-sub-container'>\n                        <div>\n                            <Icon\n                                icon={\n                                    jurisdictionVerificationContents().required_verification_docs[verification_item]\n                                        ?.icon\n                                }\n                            />\n                        </div>\n                        <Text as='span' size='xxs' className='cfd-card-back-section-text-icon-aligned'>\n                            {jurisdictionVerificationContents().required_verification_docs[verification_item]?.text}\n                        </Text>\n                    </div>\n                ))}\n            </div>\n            <div className='cfd-card-section-divider' />\n            <div className='cfd-card-back-section-items-container'>\n                {jurisdictionVerificationContents().status_references.map(status_item => (\n                    <div className='cfd-card-back-section-items-sub-container' key={status_item.color}>\n                        <div>\n                            <Icon icon={status_item.icon} />\n                        </div>\n                        <Text as='span' size='xxs' className='cfd-card-back-section-text-icon-aligned'>\n                            {status_item.text}\n                        </Text>\n                    </div>\n                ))}\n            </div>\n        </div>\n    </div>\n);\n\nexport default JurisdictionCardBack;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { TJurisdictionClickableDescriptionProps } from 'Containers/props.types';\n\nconst JurisdictionClickableDescription = ({\n    clickable_description,\n    toggleCardFlip,\n}: TJurisdictionClickableDescriptionProps) => (\n    <div>\n        {clickable_description.map(description_part => {\n            return description_part.type === 'link' ? (\n                <span key={description_part.text} onClick={toggleCardFlip}>\n                    <Text\n                        data-testid='dt_jurisdiction_clickable_description'\n                        as='span'\n                        size='xxs'\n                        className='cfd-card-clickable-description-link'\n                    >\n                        {description_part.text}\n                    </Text>\n                    &nbsp;\n                </span>\n            ) : (\n                <Text key={description_part.text} as='span' size='xxs'>\n                    {description_part.text}\n                </Text>\n            );\n        })}\n    </div>\n);\n\nexport default JurisdictionClickableDescription;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { getAuthenticationStatusInfo, Jurisdiction } from '@deriv/shared';\nimport { jurisdictionVerificationContents } from '../../Constants/jurisdiction-contents/jurisdiction-verification-contents';\nimport { TJurisdictionTitleIndicatorProps } from 'Containers/props.types';\nimport { TJurisdictionCardItemVerificationItem, TJurisdictionCardVerificationStatus } from 'Components/props.types';\n\nconst JurisdictionTitleIndicator = ({\n    account_status,\n    title_indicators,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionTitleIndicatorProps) => {\n    const {\n        poi_pending_for_bvi_labuan_vanuatu,\n        poi_resubmit_for_bvi_labuan_vanuatu,\n        poi_verified_for_bvi_labuan_vanuatu,\n        poi_pending_for_maltainvest,\n        poi_resubmit_for_maltainvest,\n        poi_verified_for_maltainvest,\n        poa_pending,\n        need_poa_resubmission,\n        poa_verified,\n    } = getAuthenticationStatusInfo(account_status);\n\n    const getVerificationIconVariant = (verification_document: TJurisdictionCardItemVerificationItem): string => {\n        let icon_variant: TJurisdictionCardVerificationStatus = 'Default';\n        if ([Jurisdiction.BVI, Jurisdiction.LABUAN, Jurisdiction.VANUATU].includes(type_of_card)) {\n            if (['document_number', 'selfie', 'identity_document'].includes(verification_document)) {\n                if (poi_pending_for_bvi_labuan_vanuatu) {\n                    icon_variant = 'Pending';\n                } else if (poi_resubmit_for_bvi_labuan_vanuatu) {\n                    icon_variant = 'Failed';\n                } else if (poi_verified_for_bvi_labuan_vanuatu) {\n                    icon_variant = 'Verified';\n                }\n            }\n        } else if (Jurisdiction.MALTA_INVEST === type_of_card) {\n            if (['document_number', 'selfie', 'identity_document'].includes(verification_document)) {\n                if (poi_pending_for_maltainvest) {\n                    icon_variant = 'Pending';\n                } else if (poi_resubmit_for_maltainvest) {\n                    icon_variant = 'Failed';\n                } else if (poi_verified_for_maltainvest) {\n                    icon_variant = 'Verified';\n                }\n            }\n        }\n        if (verification_document === 'name_and_address') {\n            if (poa_pending) {\n                icon_variant = 'Pending';\n            } else if (need_poa_resubmission) {\n                icon_variant = 'Failed';\n            } else if (poa_verified) {\n                icon_variant = 'Verified';\n            }\n        }\n        return icon_variant;\n    };\n\n    return title_indicators.type === 'displayText' ? (\n        <Text\n            as='span'\n            color='colored-background'\n            weight='bold'\n            align='center'\n            size='xxxs'\n            className={classNames(\n                'cfd-card-section-title-indicator',\n                `cfd-card-section-title-indicator__${title_indicators.display_text_skin_color}`\n            )}\n        >\n            {title_indicators.display_text}\n        </Text>\n    ) : (\n        <div\n            data-testid='dt_jurisdiction_title_indicator_icon'\n            className='cfd-card-section-title-indicator-icon-container'\n        >\n            {verification_docs?.map(verification_document => (\n                <div\n                    data-testid={`dt_jurisdiction_title_indicator_${getVerificationIconVariant(\n                        verification_document\n                    )}_icon`}\n                    key={verification_document}\n                >\n                    <Icon\n                        size={24}\n                        icon={jurisdictionVerificationContents().required_verification_docs[\n                            verification_document\n                        ]?.icon.concat(getVerificationIconVariant(verification_document))}\n                    />\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default JurisdictionTitleIndicator;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { TJurisdictionCardSectionProps } from '../props.types';\nimport JurisdictionClickableDescription from './jurisdiction-clickable-description';\nimport JurisdictionTitleIndicator from './jurisdiction-title-indicator';\n\nconst JurisdictionCardSection = ({\n    account_status,\n    card_section_item,\n    toggleCardFlip,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionCardSectionProps) => (\n    <div className='cfd-card-section'>\n        <div className='cfd-card-title-container'>\n            <Text as='span' weight='bold' size='xs'>\n                {card_section_item.title}\n            </Text>\n            {card_section_item.title_indicators && (\n                <JurisdictionTitleIndicator\n                    account_status={account_status}\n                    title_indicators={card_section_item.title_indicators}\n                    type_of_card={type_of_card}\n                    verification_docs={verification_docs}\n                />\n            )}\n        </div>\n        {(card_section_item.clickable_description || card_section_item.description) && (\n            <div className={`cfd-card-section-description-height-${card_section_item.key.toLowerCase()}`}>\n                {card_section_item.clickable_description ? (\n                    <JurisdictionClickableDescription\n                        clickable_description={card_section_item.clickable_description}\n                        toggleCardFlip={toggleCardFlip}\n                    />\n                ) : (\n                    card_section_item.description && (\n                        <Text as='span' size='xxs'>\n                            {card_section_item.description}\n                        </Text>\n                    )\n                )}\n            </div>\n        )}\n    </div>\n);\n\nexport default JurisdictionCardSection;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionCardFrontProps } from 'Containers/props.types';\nimport JurisdictionCardSection from './jurisdiction-card-section';\n\nconst JurisdictionCardFront = ({\n    account_status,\n    card_classname,\n    card_data,\n    card_values,\n    disabled,\n    is_card_selected,\n    toggleCardFlip,\n    type_of_card,\n    verification_docs,\n}: TJurisdictionCardFrontProps) => (\n    <div\n        className={classNames(card_classname, 'cfd-card-front', {\n            [`${card_classname}--selected selected-card`]: is_card_selected,\n            'cfd-card-disabled-flat': disabled,\n        })}\n    >\n        <div className={`${card_classname}__card-content-container`}>\n            {card_values.is_over_header_available ? (\n                <Text\n                    as='div'\n                    weight='bold'\n                    color='info-blue'\n                    align='center'\n                    size='xs'\n                    className={`${card_classname}__card-content-over-header`}\n                >\n                    <Localize i18n_default_text={card_values.over_header} />\n                </Text>\n            ) : (\n                <div className={`${card_classname}__card-content-over-header-blank`} />\n            )}\n            <Text\n                as='p'\n                weight='bold'\n                color='prominent'\n                align='center'\n                size='xsm'\n                className={`${card_classname}__h2-header`}\n            >\n                <Localize i18n_default_text={card_values.header} />\n            </Text>\n            <div className={`${card_classname}__card-section-container`}>\n                {card_data.map((item, index) => (\n                    <React.Fragment key={item.key}>\n                        <JurisdictionCardSection\n                            account_status={account_status}\n                            card_section_item={item}\n                            toggleCardFlip={toggleCardFlip}\n                            type_of_card={type_of_card}\n                            verification_docs={verification_docs}\n                        />\n                        {index < card_data.length - 1 && <div className='cfd-card-section-divider' />}\n                    </React.Fragment>\n                ))}\n            </div>\n            {disabled && (\n                <div className={`${card_classname}__card-content-footer`}>\n                    <Text\n                        as='div'\n                        weight='bold'\n                        color='colored-background'\n                        align='center'\n                        size='xs'\n                        className={`${card_classname}__card-content-footer-text`}\n                    >\n                        <Localize i18n_default_text='Added' />\n                    </Text>\n                </div>\n            )}\n        </div>\n    </div>\n);\n\nexport default JurisdictionCardFront;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Jurisdiction } from '@deriv/shared';\nimport { getJurisdictionContents } from '../../Constants/jurisdiction-contents/jurisdiction-contents';\nimport { TJurisdictionCardProps } from '../props.types';\nimport JurisdictionCardBack from './jurisdiction-card-back';\nimport JurisdictionCardFront from './jurisdiction-card-front';\n\nconst JurisdictionCard = ({\n    account_status,\n    account_type,\n    disabled,\n    is_non_idv_design = false,\n    jurisdiction_selected_shortcode,\n    setJurisdictionSelectedShortcode,\n    type_of_card,\n}: TJurisdictionCardProps) => {\n    const card_classname = `cfd-jurisdiction-card--${account_type}`;\n    const is_synthetic = account_type === 'synthetic';\n    const is_swapfree = account_type === 'all';\n    const card_values = getJurisdictionContents()[type_of_card];\n    const non_synthetic_card_data = is_swapfree\n        ? card_values?.swapfree_contents ?? []\n        : card_values?.financial_contents;\n    const card_data = is_synthetic ? card_values?.synthetic_contents : non_synthetic_card_data;\n    const [is_card_flipped, setIsCardFlipped] = React.useState(false);\n    const is_card_selected = jurisdiction_selected_shortcode === type_of_card;\n    let verification_docs = is_synthetic\n        ? card_values?.synthetic_verification_docs\n        : card_values?.financial_verification_docs;\n    if ([Jurisdiction.BVI, Jurisdiction.VANUATU, Jurisdiction.LABUAN].includes(type_of_card) && is_non_idv_design) {\n        verification_docs = ['selfie', 'identity_document', 'name_and_address'];\n    }\n\n    const cardSelection = (cardType: string) => {\n        setJurisdictionSelectedShortcode(jurisdiction_selected_shortcode === cardType ? '' : cardType);\n    };\n\n    const toggleCardFlip: React.MouseEventHandler<HTMLSpanElement> = event => {\n        event.stopPropagation();\n        setIsCardFlipped(!is_card_flipped);\n    };\n\n    return (\n        <div className='cfd-card-perspective'>\n            <div\n                data-testid='dt_jurisdiction_card'\n                className={classNames('cfd-card-container', `${account_type}`, {\n                    'cfd-card-flipped': is_card_flipped,\n                    'cfd-card-disabled': disabled,\n                })}\n                onClick={disabled ? () => undefined : () => cardSelection(type_of_card)}\n            >\n                <JurisdictionCardFront\n                    account_status={account_status}\n                    card_classname={card_classname}\n                    card_data={card_data}\n                    card_values={card_values}\n                    disabled={disabled}\n                    is_card_selected={is_card_selected}\n                    toggleCardFlip={toggleCardFlip}\n                    type_of_card={type_of_card}\n                    verification_docs={verification_docs}\n                />\n                <JurisdictionCardBack\n                    card_classname={card_classname}\n                    disabled={disabled}\n                    is_card_selected={is_card_selected}\n                    toggleCardFlip={toggleCardFlip}\n                    verification_docs={verification_docs}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default JurisdictionCard;\n","import { TJurisdictionCardItems } from 'Components/props.types';\nimport { getJurisdictionBviContents } from './jurisdiction-bvi-contents';\nimport { getJurisdictionLabuanContents } from './jurisdiction-labuan-contents';\nimport { getJurisdictionSvgContents } from './jurisdiction-svg-contents';\nimport { getJurisdictionVanuatuContents } from './jurisdiction-vanuatu-contents';\nimport { getJurisdictionMaltainvestContents } from './jurisdiction_maltainvest_contents';\n\ntype TJurisdictionContent = {\n    svg: TJurisdictionCardItems;\n    vanuatu: TJurisdictionCardItems;\n    labuan: TJurisdictionCardItems;\n    maltainvest: TJurisdictionCardItems;\n    bvi: TJurisdictionCardItems;\n};\n\nexport const getJurisdictionContents = (): TJurisdictionContent => ({\n    svg: getJurisdictionSvgContents(),\n    bvi: getJurisdictionBviContents(),\n    vanuatu: getJurisdictionVanuatuContents(),\n    labuan: getJurisdictionLabuanContents(),\n    maltainvest: getJurisdictionMaltainvestContents(),\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionSvgContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('St. Vincent & Grenadines'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Baskets and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('170+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.6 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    swapfree_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock Indices, Cryptocurrencies, and ETFs'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            description: localize(\n                'You will need to submit proof of identity and address once you reach certain thresholds.'\n            ),\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Deriv (SVG) LLC (company no. 273 LLC 2020)'),\n        },\n    ],\n    synthetic_verification_docs: ['not_applicable'],\n    financial_verification_docs: ['not_applicable'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionBviContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('British Virgin Islands'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Baskets and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('170+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114)'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionVanuatuContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('Vanuatu'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Baskets and Derived FX'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('40+'),\n                display_text_skin_color: 'red-darker',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Vanuatu Financial Services Commission'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex, Stock indices, Commodities and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('90+'),\n                display_text_skin_color: 'red-dark',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:1000'),\n                display_text_skin_color: 'yellow-light',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Vanuatu Financial Services Commission'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionLabuanContents = (): TJurisdictionCardItems => ({\n    over_header: localize('Straight-through processing'),\n    is_over_header_available: true,\n    header: localize('Labuan'),\n    synthetic_contents: [\n        { key: 'assets', title: localize('Assets'), description: localize('Forex and Cryptocurrencies') },\n        { key: 'leverage', title: localize('Leverage') },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Labuan Financial Services Authority (licence no. MB/18/0024)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Forex and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('80+'),\n                display_text_skin_color: 'red-dark',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:100'),\n                display_text_skin_color: 'yellow-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.6 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Labuan Financial Services Authority (licence no. MB/18/0024)'),\n        },\n    ],\n    synthetic_verification_docs: ['document_number', 'name_and_address'],\n    financial_verification_docs: ['document_number', 'name_and_address'],\n});\n","import { localize } from '@deriv/translations';\nimport { TJurisdictionCardItems } from 'Components/props.types';\n\nexport const getJurisdictionMaltainvestContents = (): TJurisdictionCardItems => ({\n    is_over_header_available: false,\n    header: localize('Malta'),\n    synthetic_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('140+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:30'),\n                display_text_skin_color: 'brown-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n        },\n    ],\n    financial_contents: [\n        {\n            key: 'assets',\n            title: localize('Assets'),\n            description: localize('Synthetics, Forex, Stocks, Stock indices, Commodities, and Cryptocurrencies'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('140+'),\n                display_text_skin_color: 'red-light',\n            },\n        },\n        {\n            key: 'leverage',\n            title: localize('Leverage'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('1:30'),\n                display_text_skin_color: 'brown-dark',\n            },\n        },\n        {\n            key: 'spreadsFrom',\n            title: localize('Spreads from'),\n            title_indicators: {\n                type: 'displayText',\n                display_text: localize('0.5 pips'),\n                display_text_skin_color: 'violet-dark',\n            },\n        },\n        {\n            key: 'verifications',\n            title: localize('Verifications'),\n            title_indicators: { type: 'displayIcons' },\n            clickable_description: [\n                { type: 'link', text: localize('Learn more') },\n                { type: 'text', text: localize('about verifications needed.') },\n            ],\n        },\n        {\n            key: 'regulator',\n            title: localize('Regulator/EDR'),\n            description: localize('Malta Financial Services Authority (MFSA) (licence no. IS/70156)'),\n        },\n    ],\n    synthetic_verification_docs: ['selfie', 'identity_document', 'name_and_address'],\n    financial_verification_docs: ['selfie', 'identity_document', 'name_and_address'],\n});\n","import React from 'react';\nimport { Jurisdiction } from '@deriv/shared';\nimport { TJurisdictionModalContentProps } from '../props.types';\nimport JurisdictionCard from './jurisdiction-card';\n\nconst JurisdictionModalContent = ({\n    account_status,\n    account_type,\n    is_non_idv_design = false,\n    is_virtual,\n    jurisdiction_selected_shortcode,\n    setJurisdictionSelectedShortcode,\n    synthetic_available_accounts,\n    financial_available_accounts,\n    real_synthetic_accounts_existing_data,\n    real_financial_accounts_existing_data,\n    real_swapfree_accounts_existing_data,\n    swapfree_available_accounts,\n}: TJurisdictionModalContentProps) => {\n    const card_classname = `cfd-jurisdiction-card--${account_type}`;\n\n    const cardsToBeShown = (type_of_card: string) => {\n        switch (account_type) {\n            case 'synthetic':\n                return synthetic_available_accounts?.some(account => account.shortcode === type_of_card);\n            case 'all':\n                return swapfree_available_accounts?.some(account => account.shortcode === type_of_card);\n            default:\n                return financial_available_accounts?.some(account => account.shortcode === type_of_card);\n        }\n    };\n\n    const disableCard = (type_of_card: string) => {\n        if (is_virtual && type_of_card !== 'svg') {\n            return true;\n        }\n        switch (account_type) {\n            case 'synthetic':\n                return real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n            case 'all':\n                return real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n            default:\n                return real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === type_of_card\n                );\n        }\n    };\n\n    const jurisdiction_cards_array = [\n        Jurisdiction.SVG,\n        Jurisdiction.BVI,\n        Jurisdiction.VANUATU,\n        Jurisdiction.LABUAN,\n        Jurisdiction.MALTA_INVEST,\n    ];\n\n    return (\n        <div data-testid='dt-jurisdiction-modal-content' className={`${card_classname}__wrapper`}>\n            {jurisdiction_cards_array.map(\n                card =>\n                    cardsToBeShown(card) && (\n                        <JurisdictionCard\n                            account_status={account_status}\n                            account_type={account_type}\n                            disabled={disableCard(card)}\n                            is_non_idv_design={is_non_idv_design}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            key={card}\n                            setJurisdictionSelectedShortcode={setJurisdictionSelectedShortcode}\n                            type_of_card={card}\n                        />\n                    )\n            )}\n        </div>\n    );\n};\n\nexport default JurisdictionModalContent;\n","import React from 'react';\nimport { Checkbox, StaticUrl, Text } from '@deriv/components';\nimport { isMobile, Jurisdiction } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionCheckBoxProps } from '../props.types';\n\nconst JurisdictionCheckBox = ({\n    class_name,\n    is_checked,\n    jurisdiction_selected_shortcode,\n    onCheck,\n    should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation,\n}: TJurisdictionCheckBoxProps) => {\n    const shouldShowCheckBox = () => {\n        if (\n            !jurisdiction_selected_shortcode ||\n            jurisdiction_selected_shortcode === Jurisdiction.SVG ||\n            (jurisdiction_selected_shortcode === Jurisdiction.BVI && should_restrict_bvi_account_creation) ||\n            (jurisdiction_selected_shortcode === Jurisdiction.VANUATU && should_restrict_vanuatu_account_creation)\n        ) {\n            return false;\n        }\n        return true;\n    };\n\n    const dbvi_company_names: { [key: string]: { [key: string]: string } } = {\n        bvi: { name: 'Deriv (BVI) Ltd', tnc_url: 'tnc/deriv-(bvi)-ltd.pdf' },\n        labuan: { name: 'Deriv (FX) Ltd', tnc_url: 'tnc/deriv-(fx)-ltd.pdf' },\n        maltainvest: {\n            name: 'Deriv Investments (Europe) Limited',\n            tnc_url: 'tnc/deriv-investments-(europe)-limited.pdf',\n        },\n        vanuatu: { name: 'Deriv (V) Ltd', tnc_url: 'tnc/general-terms.pdf' },\n    };\n\n    const getCheckboxLabel = () => (\n        <Text as='p' align='center' size={isMobile() ? 'xxs' : 'xs'} line_height='xs'>\n            <Localize\n                i18n_default_text=\"I confirm and accept {{company}} 's <0>Terms and Conditions</0>\"\n                values={{ company: dbvi_company_names[jurisdiction_selected_shortcode].name }}\n                components={[\n                    <StaticUrl\n                        key={0}\n                        className='link--no-bold'\n                        href={dbvi_company_names[jurisdiction_selected_shortcode].tnc_url}\n                    />,\n                ]}\n            />\n        </Text>\n    );\n    return (\n        <React.Fragment>\n            {shouldShowCheckBox() && (\n                <div className={class_name}>\n                    <Checkbox\n                        value={is_checked}\n                        onChange={onCheck}\n                        label={getCheckboxLabel()}\n                        defaultChecked={!!is_checked}\n                    />\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default JurisdictionCheckBox;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { getAuthenticationStatusInfo, isMobile, Jurisdiction, getMT5Title } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { TJurisdictionModalFootNoteProps } from '../props.types';\n\nconst FooterNote = ({\n    account_status,\n    account_type,\n    card_classname,\n    jurisdiction_selected_shortcode,\n    should_restrict_bvi_account_creation,\n    should_restrict_vanuatu_account_creation,\n}: TJurisdictionModalFootNoteProps) => {\n    const account_type_name = getMT5Title(account_type);\n\n    const { poa_pending } = getAuthenticationStatusInfo(account_status);\n\n    if (jurisdiction_selected_shortcode === Jurisdiction.SVG) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0> account under Deriv (SVG) LLC (company no. 273 LLC 2020).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (\n        (jurisdiction_selected_shortcode === Jurisdiction.BVI && should_restrict_bvi_account_creation) ||\n        (jurisdiction_selected_shortcode === Jurisdiction.VANUATU && should_restrict_vanuatu_account_creation)\n    ) {\n        return poa_pending ? (\n            <Localize\n                i18n_default_text='<0>You can open this account once your submitted documents have been verified.</0>'\n                components={[<span key={0} className={`${card_classname}__footnote--pending`} />]}\n            />\n        ) : (\n            <Localize i18n_default_text='To create this account first we need you to resubmit your proof of address.' />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.BVI) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0>  account under Deriv (BVI) Ltd, regulated by the British Virgin Islands Financial Services Commission (License no. SIBA/L/18/1114).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.VANUATU) {\n        return (\n            <Localize\n                i18n_default_text='Add Your Deriv MT5 <0>{{account_type_name}}</0>  account under Deriv (V) Ltd, regulated by the Vanuatu Financial Services Commission.'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.LABUAN) {\n        return (\n            <Localize\n                i18n_default_text='Add your Deriv MT5 <0>{{account_type_name}}</0>  STP account under Deriv (FX) Ltd regulated by Labuan Financial Services Authority (Licence no. MB/18/0024).'\n                values={{ account_type_name }}\n            />\n        );\n    } else if (jurisdiction_selected_shortcode === Jurisdiction.MALTA_INVEST) {\n        return (\n            <Localize i18n_default_text='Add your Deriv MT5 CFDs account under Deriv Investments (Europe) Limited, regulated by the Malta Financial Services Authority (MFSA) (licence no. IS/70156).' />\n        );\n    }\n\n    return null;\n};\n\nconst JurisdictionModalFootNote = (props: TJurisdictionModalFootNoteProps) => {\n    return (\n        <React.Fragment>\n            {props.jurisdiction_selected_shortcode && (\n                <div data-testid='dt-jurisdiction-footnote' className={`${props.card_classname}__footnote`}>\n                    <Text\n                        as='p'\n                        color='prominent'\n                        align='center'\n                        size={isMobile() ? 'xxs' : 'xs'}\n                        weight='bold'\n                        line_height='xs'\n                    >\n                        <FooterNote {...props} />\n                    </Text>\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default JurisdictionModalFootNote;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { getAuthenticationStatusInfo, isMobile, Jurisdiction } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TJurisdictionModalContentWrapperProps } from '../props.types';\nimport JurisdictionModalContent from './jurisdiction-modal-content';\nimport JurisdictionCheckBox from './jurisdiction-modal-checkbox';\nimport JurisdictionModalFootNote from './jurisdiction-modal-foot-note';\nimport { useStore, observer } from '@deriv/stores';\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\n\nconst JurisdictionModalContentWrapper = observer(({ openPasswordModal }: TJurisdictionModalContentWrapperProps) => {\n    const { client, traders_hub } = useStore();\n\n    const { show_eu_related_content } = traders_hub;\n\n    const {\n        trading_platform_available_accounts,\n        account_status,\n        fetchAccountSettings,\n        residence,\n        residence_list,\n        is_virtual,\n        updateMT5Status,\n        should_restrict_vanuatu_account_creation,\n        should_restrict_bvi_account_creation,\n    } = client;\n\n    const {\n        is_jurisdiction_modal_visible,\n        has_submitted_cfd_personal_details,\n        jurisdiction_selected_shortcode,\n        toggleCFDVerificationModal,\n        toggleJurisdictionModal,\n        account_type,\n        real_financial_accounts_existing_data,\n        real_swapfree_accounts_existing_data,\n        real_synthetic_accounts_existing_data,\n        setJurisdictionSelectedShortcode,\n    } = useCfdStore();\n\n    const [checked, setChecked] = React.useState(false);\n\n    const {\n        poi_or_poa_not_submitted,\n        poi_acknowledged_for_bvi_labuan_vanuatu,\n        poi_acknowledged_for_maltainvest,\n        poa_acknowledged,\n        need_poa_resubmission,\n        poa_resubmit_for_labuan,\n    } = getAuthenticationStatusInfo(account_status);\n\n    React.useEffect(() => {\n        if (is_jurisdiction_modal_visible) {\n            if (!is_virtual) {\n                updateMT5Status();\n                fetchAccountSettings();\n            }\n            setJurisdictionSelectedShortcode('');\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_jurisdiction_modal_visible]);\n\n    React.useEffect(() => {\n        if (jurisdiction_selected_shortcode) {\n            setChecked(false);\n        }\n    }, [jurisdiction_selected_shortcode, is_jurisdiction_modal_visible]);\n\n    const financial_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === 'financial' &&\n            (show_eu_related_content\n                ? available_account.shortcode === 'maltainvest'\n                : available_account.shortcode !== 'maltainvest')\n    );\n\n    const synthetic_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === 'gaming' &&\n            (show_eu_related_content\n                ? available_account.shortcode === 'maltainvest'\n                : available_account.shortcode !== 'maltainvest')\n    );\n\n    const is_svg_selected = jurisdiction_selected_shortcode === Jurisdiction.SVG;\n    const is_bvi_selected = jurisdiction_selected_shortcode === Jurisdiction.BVI;\n    const is_vanuatu_selected = jurisdiction_selected_shortcode === Jurisdiction.VANUATU;\n    const is_labuan_selected = jurisdiction_selected_shortcode === Jurisdiction.LABUAN;\n    const is_maltainvest_selected = jurisdiction_selected_shortcode === Jurisdiction.MALTA_INVEST;\n\n    const is_idv_country =\n        residence_list.find(elem => elem?.value === residence)?.identity?.services?.idv?.is_country_supported === 1;\n    const has_idv_attempts = (account_status?.authentication?.identity?.services?.idv?.submissions_left ?? 0) > 0;\n    const is_non_idv_design = !is_idv_country || (is_idv_country && !has_idv_attempts);\n\n    const swapfree_available_accounts = trading_platform_available_accounts.filter(\n        available_account =>\n            available_account.market_type === 'all' &&\n            (show_eu_related_content\n                ? available_account.shortcode === 'maltainvest'\n                : available_account.shortcode !== 'maltainvest')\n    );\n\n    const isNextButtonDisabled = () => {\n        if (jurisdiction_selected_shortcode) {\n            let is_account_created;\n            if (account_type.type === 'synthetic') {\n                is_account_created = real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            } else if (account_type.type === 'all') {\n                is_account_created = real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            } else {\n                is_account_created = real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === jurisdiction_selected_shortcode\n                );\n            }\n            if (!is_account_created) {\n                if (\n                    is_svg_selected ||\n                    (is_bvi_selected && should_restrict_bvi_account_creation && need_poa_resubmission) ||\n                    (is_vanuatu_selected && should_restrict_vanuatu_account_creation && need_poa_resubmission)\n                ) {\n                    return false;\n                }\n                return !checked;\n            }\n            return true;\n        }\n        return true;\n    };\n\n    const onSelectRealAccount = () => {\n        const type_of_account = {\n            category: account_type.category,\n            type: account_type.type,\n        };\n\n        if (is_svg_selected) {\n            openPasswordModal(type_of_account);\n        } else if (is_vanuatu_selected) {\n            if (\n                poi_acknowledged_for_bvi_labuan_vanuatu &&\n                !poi_or_poa_not_submitted &&\n                !should_restrict_vanuatu_account_creation &&\n                poa_acknowledged &&\n                has_submitted_cfd_personal_details\n            ) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_bvi_selected) {\n            if (\n                poi_acknowledged_for_bvi_labuan_vanuatu &&\n                !poi_or_poa_not_submitted &&\n                !should_restrict_bvi_account_creation &&\n                poa_acknowledged &&\n                has_submitted_cfd_personal_details\n            ) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_labuan_selected) {\n            if (\n                poi_acknowledged_for_bvi_labuan_vanuatu &&\n                poa_acknowledged &&\n                has_submitted_cfd_personal_details &&\n                !poa_resubmit_for_labuan\n            ) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        } else if (is_maltainvest_selected) {\n            if (poi_acknowledged_for_maltainvest && poa_acknowledged) {\n                openPasswordModal(type_of_account);\n            } else {\n                toggleCFDVerificationModal();\n            }\n        }\n    };\n\n    return (\n        <div className='jurisdiction-modal__content-wrapper'>\n            <div className='jurisdiction-modal__scrollable-content'>\n                <JurisdictionModalContent\n                    account_status={account_status}\n                    account_type={account_type.type}\n                    financial_available_accounts={financial_available_accounts}\n                    is_non_idv_design={is_non_idv_design}\n                    is_virtual={is_virtual}\n                    real_financial_accounts_existing_data={real_financial_accounts_existing_data}\n                    real_synthetic_accounts_existing_data={real_synthetic_accounts_existing_data}\n                    jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                    real_swapfree_accounts_existing_data={real_swapfree_accounts_existing_data}\n                    setJurisdictionSelectedShortcode={setJurisdictionSelectedShortcode}\n                    swapfree_available_accounts={swapfree_available_accounts}\n                    synthetic_available_accounts={synthetic_available_accounts}\n                />\n                <div\n                    className={classNames(\n                        'jurisdiction-modal__footer-content',\n                        `cfd-jurisdiction-card--${account_type.type}__footer-wrapper`\n                    )}\n                >\n                    <div className={`cfd-jurisdiction-card--${account_type.type}__footnotes-container`}>\n                        <JurisdictionModalFootNote\n                            account_status={account_status}\n                            account_type={account_type.type}\n                            card_classname={`cfd-jurisdiction-card--${account_type.type}`}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            should_restrict_bvi_account_creation={should_restrict_bvi_account_creation}\n                            should_restrict_vanuatu_account_creation={should_restrict_vanuatu_account_creation}\n                        />\n                        <JurisdictionCheckBox\n                            is_checked={checked}\n                            onCheck={() => setChecked(!checked)}\n                            class_name={`cfd-jurisdiction-card--${account_type.type}__jurisdiction-checkbox`}\n                            jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                            should_restrict_bvi_account_creation={should_restrict_bvi_account_creation}\n                            should_restrict_vanuatu_account_creation={should_restrict_vanuatu_account_creation}\n                        />\n                    </div>\n                </div>\n            </div>\n            <Modal.Footer className='jurisdiction-modal__footer-button' has_separator>\n                <Button\n                    disabled={isNextButtonDisabled()}\n                    primary\n                    style={{ width: isMobile() ? '100%' : 'unset' }}\n                    onClick={() => {\n                        toggleJurisdictionModal();\n                        onSelectRealAccount();\n                    }}\n                >\n                    {localize('Next')}\n                </Button>\n            </Modal.Footer>\n        </div>\n    );\n});\n\nexport default JurisdictionModalContentWrapper;\n","import React from 'react';\nimport { DesktopWrapper, MobileDialog, MobileWrapper, Modal, UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getMT5Title } from '@deriv/shared';\nimport { TJurisdictionModalProps } from '../props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\nimport JurisdictionModalContentWrapper from './jurisdiction-modal-content-wrapper';\n\nconst JurisdictionModal = observer(({ openPasswordModal }: TJurisdictionModalProps) => {\n    const { traders_hub, ui } = useStore();\n\n    const { show_eu_related_content } = traders_hub;\n    const { disableApp, enableApp } = ui;\n\n    const { account_type, is_jurisdiction_modal_visible, toggleJurisdictionModal } = useCfdStore();\n\n    const modal_title = show_eu_related_content\n        ? localize('Choose a jurisdiction for your Deriv MT5 CFDs account')\n        : localize('Choose a jurisdiction for your Deriv MT5 {{account_type}} account', {\n              account_type: localize(getMT5Title(account_type.type)),\n          });\n\n    return (\n        <div>\n            <React.Suspense fallback={<UILoader />}>\n                <DesktopWrapper>\n                    <Modal\n                        className='jurisdiction-modal'\n                        disableApp={disableApp}\n                        enableApp={enableApp}\n                        exit_classname='cfd-modal--custom-exit'\n                        is_open={is_jurisdiction_modal_visible}\n                        title={modal_title}\n                        toggleModal={toggleJurisdictionModal}\n                        type='button'\n                        width={account_type.type === 'financial' ? '1200px' : '1040px'}\n                    >\n                        <JurisdictionModalContentWrapper openPasswordModal={openPasswordModal} />\n                    </Modal>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <MobileDialog\n                        portal_element_id='deriv_app'\n                        title={modal_title}\n                        visible={is_jurisdiction_modal_visible}\n                        onClose={toggleJurisdictionModal}\n                    >\n                        <JurisdictionModalContentWrapper openPasswordModal={openPasswordModal} />\n                    </MobileDialog>\n                </MobileWrapper>\n            </React.Suspense>\n        </div>\n    );\n});\n\nexport default JurisdictionModal;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Text, Button, Icon, Money, Popover } from '@deriv/components';\nimport { TPasswordBoxProps, TTradingPlatformAccounts } from '../Components/props.types';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport {\n    CFD_PLATFORMS,\n    isMobile,\n    getCFDAccountDisplay,\n    getCFDPlatformLabel,\n    getPlatformSettings,\n    getUrlBase,\n    getCFDAccountKey,\n} from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { CFDAccountCopy } from '../Components/cfd-account-copy';\nimport { getPlatformMt5DownloadLink, getMT5WebTerminalLink } from '../Helpers/constants';\nimport TradingPlatformIcon from '../Assets/svgs/trading-platform';\nimport { TCFDPasswordReset } from './props.types';\n\ntype TMT5TradeModalProps = {\n    mt5_trade_account: DetailsOfEachMT5Loginid;\n    show_eu_related_content: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n};\n\nexport type TSpecBoxProps = {\n    value: string | undefined;\n    is_bold?: boolean;\n    is_broker?: boolean;\n};\n\nconst SpecBox = ({ value, is_bold, is_broker }: TSpecBoxProps) => (\n    <div className='cfd-trade-modal__spec-box'>\n        <Text\n            size='xs'\n            weight={is_bold ? 'bold' : ''}\n            className={classNames('cfd-trade-modal__spec-text', { 'cfd-trade-modal__spec-text-broker': is_broker })}\n        >\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-trade-modal__spec-copy' />\n    </div>\n);\n\nconst PasswordBox = ({ platform, onClick }: TPasswordBoxProps) => (\n    <div className='cfd-trade-modal__password-box'>\n        <div className='cfd-trade-modal__password-text'>\n            <Popover\n                alignment='right'\n                message={localize(\n                    'Use these credentials to log in to your {{platform}} account on the website and mobile apps.',\n                    {\n                        platform: getCFDPlatformLabel(platform),\n                    }\n                )}\n                classNameBubble='cfd-trade-modal__password-tooltip'\n                zIndex={9999}\n            >\n                <Text size='xs'>***************</Text>\n            </Popover>\n        </div>\n        <Popover\n            className='cfd-trade-modal__password-popover'\n            alignment='left'\n            message={localize('Change Password')}\n            relative_render\n            zIndex={9999}\n        >\n            <Button\n                className='cfd-trade-modal__password-action'\n                transparent\n                onClick={onClick}\n                icon={\n                    <Icon\n                        icon='IcEdit'\n                        className='da-article__learn-more-icon'\n                        custom_color='var(--text-less-prominent)'\n                    />\n                }\n            />\n        </Popover>\n    </div>\n);\n\nconst getTitle = (market_type: string, show_eu_related_content: boolean) => {\n    if (show_eu_related_content) localize('MT5 CFDs');\n    return market_type;\n};\n\nconst DMT5TradeModal = ({\n    mt5_trade_account,\n    show_eu_related_content,\n    onPasswordManager,\n    toggleModal,\n}: TMT5TradeModalProps) => {\n    const getCompanyShortcode = () => {\n        if (\n            (mt5_trade_account.account_type === 'demo' &&\n                mt5_trade_account.market_type === 'financial' &&\n                mt5_trade_account.landing_company_short === 'labuan') ||\n            mt5_trade_account.account_type === 'real'\n        ) {\n            return mt5_trade_account.landing_company_short;\n        }\n        return undefined;\n    };\n\n    const getHeadingTitle = () =>\n        getCFDAccountDisplay({\n            market_type: mt5_trade_account.market_type,\n            sub_account_type: mt5_trade_account.sub_account_type,\n            platform: CFD_PLATFORMS.MT5,\n            is_eu: show_eu_related_content,\n            shortcode: getCompanyShortcode(),\n            is_mt5_trade_modal: true,\n        });\n    const getAccountTitle = () => {\n        if (show_eu_related_content) return 'CFDs';\n        else if (mt5_trade_account.market_type === 'synthetic') return 'Derived';\n        else if (mt5_trade_account.market_type === 'all') return 'SwapFree';\n        return 'Financial';\n    };\n    return (\n        <div className='cfd-trade-modal-container'>\n            <div className='cfd-trade-modal'>\n                <TradingPlatformIcon icon={getAccountTitle()} size={24} />\n                <div className='cfd-trade-modal__desc'>\n                    <Text size='xs' line_height='l' className='cfd-trade-modal__desc-heading'>\n                        {getHeadingTitle()}\n                    </Text>\n                    {(mt5_trade_account as TTradingPlatformAccounts)?.display_login && (\n                        <Text color='less-prominent' size='xxxs' line_height='xxxs'>\n                            {(mt5_trade_account as TTradingPlatformAccounts)?.display_login}\n                        </Text>\n                    )}\n                </div>\n                {mt5_trade_account?.display_balance && (\n                    <Text size='xs' color='profit-success' className='cfd-trade-modal__desc-balance' weight='bold'>\n                        <Money\n                            amount={mt5_trade_account.display_balance}\n                            currency={mt5_trade_account.currency}\n                            has_sign={!!mt5_trade_account.balance && mt5_trade_account.balance < 0}\n                            show_currency\n                        />\n                    </Text>\n                )}\n            </div>\n            <div className='cfd-trade-modal__login-specs'>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Broker')}</Text>\n                    <SpecBox is_bold is_broker value={'Deriv Holdings (Guernsey) Limited'} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Server')}</Text>\n                    <SpecBox is_bold value={(mt5_trade_account as DetailsOfEachMT5Loginid)?.server_info?.environment} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Login ID')}</Text>\n                    <SpecBox is_bold value={(mt5_trade_account as TTradingPlatformAccounts)?.display_login} />\n                </div>\n                <div className='cfd-trade-modal__login-specs-item'>\n                    <Text className='cfd-trade-modal--paragraph'>{localize('Password')}</Text>\n                    <div className='cfd-trade-modal--paragraph'>\n                        <PasswordBox\n                            platform='mt5'\n                            onClick={() => {\n                                const account_type = getCFDAccountKey({\n                                    market_type: mt5_trade_account.market_type,\n                                    sub_account_type: mt5_trade_account.sub_account_type,\n                                    platform: CFD_PLATFORMS.DMT5,\n                                    shortcode: mt5_trade_account.landing_company_short,\n                                });\n                                onPasswordManager(\n                                    mt5_trade_account?.login,\n                                    getTitle(mt5_trade_account.market_type || '', show_eu_related_content),\n                                    mt5_trade_account.account_type || '',\n                                    account_type,\n                                    (mt5_trade_account as DetailsOfEachMT5Loginid)?.server\n                                );\n                                toggleModal();\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className='cfd-trade-modal__maintenance'>\n                    <Icon\n                        icon='IcAlertWarning'\n                        size={isMobile() ? 28 : 20}\n                        className='cfd-trade-modal__maintenance-icon'\n                    />\n                    <div className='cfd-trade-modal__maintenance-text'>\n                        <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                    </div>\n                </div>\n            </div>\n            <div className='cfd-trade-modal__download-center-app'>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcRebrandingMt5Logo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 web')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getMT5WebTerminalLink({\n                            category: mt5_trade_account.account_type,\n                            loginid: (mt5_trade_account as TTradingPlatformAccounts).display_login,\n                            server_name: (mt5_trade_account as DetailsOfEachMT5Loginid)?.server_info?.environment,\n                        })}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Open')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcWindowsLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 Windows app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('windows')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Download')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcMacosLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 MacOS app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('macos')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Download')}\n                        </Text>\n                    </a>\n                </div>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Icon icon='IcLinuxLogo' size={32} />\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {localize('MetaTrader 5 Linux app')}\n                    </Text>\n                    <a\n                        className='dc-btn cfd-trade-modal__download-center-app--option-link'\n                        type='button'\n                        href={getPlatformMt5DownloadLink('linux')}\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <Text size='xxs' weight='bold' color='prominent'>\n                            {localize('Learn more')}\n                        </Text>\n                    </a>\n                </div>\n            </div>\n            <Text\n                align='center'\n                as='div'\n                className='cfd-trade-modal__download-center-text'\n                size={isMobile() ? 'xxxs' : 'xxs'}\n                weight='bold'\n            >\n                {localize(\n                    'Download {{ platform }} on your phone to trade with the {{ platform }} {{ account }} account',\n                    {\n                        platform: getCFDPlatformLabel(CFD_PLATFORMS.MT5),\n                        account: getAccountTitle(),\n                    }\n                )}\n            </Text>\n            <div className='cfd-trade-modal__download-center-options'>\n                <div className='cfd-trade-modal__download-center-options--mobile-links'>\n                    <a href={getPlatformMt5DownloadLink('ios')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationApple' width={135} height={40} />\n                    </a>\n                    <a href={getPlatformMt5DownloadLink('android')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationGoogle' width={135} height={40} />\n                    </a>\n                    <a href={getPlatformMt5DownloadLink('huawei')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationHuawei' width={135} height={40} />\n                    </a>\n                </div>\n                {!isMobile() && (\n                    <div className='cfd-trade-modal__download-center-options--qrcode'>\n                        <img src={getUrlBase('/public/images/common/mt5_download.png')} width={80} height={80} />\n                        <Text align='center' size='xxs'>\n                            {localize('Scan the QR code to download {{ platform }}.', {\n                                platform: getPlatformSettings('mt5').name,\n                            })}\n                        </Text>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default DMT5TradeModal;\n","import React from 'react';\nimport { DesktopWrapper, Div100vhContainer, Modal, MobileWrapper, PageOverlay, UILoader } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport TradeModal from './trade-modal';\nimport DMT5TradeModal from './dmt5-trade-modal';\nimport { TCFDPasswordReset } from './props.types';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\ntype TMT5TradeModalProps = {\n    is_eu_user: boolean;\n    is_open: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    is_demo: string;\n};\n\nconst MT5TradeModal = observer(\n    ({ is_eu_user, is_open, onPasswordManager, toggleModal, is_demo }: TMT5TradeModalProps) => {\n        const { traders_hub, common } = useStore();\n\n        const { show_eu_related_content } = traders_hub;\n        const { platform } = common;\n\n        const { mt5_trade_account, dxtrade_tokens, derivez_tokens } = useCfdStore();\n\n        const CFDTradeModal = () => {\n            if (platform === 'mt5') {\n                return (\n                    <DMT5TradeModal\n                        mt5_trade_account={mt5_trade_account}\n                        show_eu_related_content={show_eu_related_content}\n                        onPasswordManager={onPasswordManager}\n                        toggleModal={toggleModal}\n                    />\n                );\n            }\n            return (\n                <TradeModal\n                    mt5_trade_account={mt5_trade_account}\n                    is_eu_user={is_eu_user}\n                    onPasswordManager={onPasswordManager}\n                    toggleModal={toggleModal}\n                    is_demo={is_demo}\n                    platform={platform}\n                    dxtrade_tokens={dxtrade_tokens}\n                    derivez_tokens={derivez_tokens}\n                />\n            );\n        };\n\n        return (\n            <React.Suspense fallback={<UILoader />}>\n                <DesktopWrapper>\n                    <Modal\n                        is_open={is_open}\n                        title={localize('Trade')}\n                        toggleModal={toggleModal}\n                        should_header_stick_body={false}\n                        width='600px'\n                        exit_classname='cfd-modal--custom-exit'\n                    >\n                        <CFDTradeModal />\n                    </Modal>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <PageOverlay\n                        is_open={is_open}\n                        portal_id='deriv_app'\n                        header='Trade'\n                        onClickClose={toggleModal}\n                        header_classname='cfd-trade-modal__mobile-title'\n                    >\n                        <Div100vhContainer className='cfd-trade-modal__mobile-view-wrapper' height_offset='80px'>\n                            <CFDTradeModal />\n                        </Div100vhContainer>\n                    </PageOverlay>\n                </MobileWrapper>\n            </React.Suspense>\n        );\n    }\n);\n\nexport default MT5TradeModal;\n","import React from 'react';\nimport { QRCode } from 'react-qrcode';\nimport { TCFDsPlatformType } from 'Components/props.types';\nimport {\n    getDXTradeWebTerminalLink,\n    getDerivEzWebTerminalLink,\n    platformsText,\n    platformsIcons,\n    mobileDownloadLink,\n} from './constants';\nimport { Text, Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { isMobile, OSDetect, isDesktopOs } from '@deriv/shared';\nimport { TCFDDashboardContainer } from 'Containers/props.types';\n\nexport const getPlatformQRCode = (acc_type: TCFDsPlatformType) => {\n    const qr_code_width = isMobile() ? '100%' : '80%';\n    const os = OSDetect();\n    const checkForDesktop = isDesktopOs() ? (os === 'mac' ? 'ios' : 'android') : os;\n\n    return (\n        <React.Fragment>\n            <QRCode\n                value={platformsText(acc_type) === 'EZ' ? 'https://onelink.to/bkdwkd' : 'https://onelink.to/grmtyx'}\n                size={5}\n                style={{ height: 'auto', maxWidth: '100%', width: qr_code_width }}\n            />\n            <Text align='center' size='xxs'>\n                <Localize\n                    i18n_default_text='Scan the QR code to download Deriv {{ platform }}.'\n                    values={{ platform: platformsText(acc_type) === 'EZ' ? 'GO' : platformsText(acc_type) }}\n                />\n            </Text>\n        </React.Fragment>\n    );\n};\n\ntype TPlatformsDesktopDownload = {\n    platform: TCFDsPlatformType;\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    derivez_tokens: TCFDDashboardContainer['derivez_tokens'];\n    is_demo: string;\n};\n\nexport const PlatformsDesktopDownload = ({\n    platform,\n    dxtrade_tokens,\n    derivez_tokens,\n    is_demo,\n}: TPlatformsDesktopDownload) => {\n    const PlatformsDesktopDownloadLinks = () => {\n        switch (platform) {\n            case 'derivez':\n                return getDerivEzWebTerminalLink(\n                    is_demo ? 'demo' : 'real',\n                    derivez_tokens && derivez_tokens[is_demo ? 'demo' : 'real']\n                );\n            case 'dxtrade':\n                return getDXTradeWebTerminalLink(\n                    is_demo ? 'demo' : 'real',\n                    dxtrade_tokens && dxtrade_tokens[is_demo ? 'demo' : 'real']\n                );\n            default:\n                return '';\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <a\n                className='cfd-trade-modal__dxtrade-button'\n                href={PlatformsDesktopDownloadLinks()}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon\n                    className='cfd-trade-modal__dxtrade-button-icon'\n                    icon={`IcBrand${platformsIcons(platform)}Wordmark`}\n                    size={36}\n                />\n                <div className='cfd-trade-modal__dxtrade-button-text'>\n                    <Text color='colored-background' size='xxs' weight='bold'>\n                        <Localize i18n_default_text='Web terminal' />\n                    </Text>\n                </div>\n            </a>\n        </React.Fragment>\n    );\n};\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { CFDAccountCopy } from './cfd-account-copy';\n\nexport type TSpecBoxProps = {\n    value?: string;\n    is_bold?: boolean;\n};\n\nconst SpecBox = ({ value, is_bold }: TSpecBoxProps) => (\n    <div className='cfd-trade-modal__spec-box'>\n        <Text size='xs' weight={is_bold ? 'bold' : ''} className='cfd-trade-modal__spec-text'>\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-trade-modal__spec-copy' />\n    </div>\n);\n\nexport default SpecBox;\n","import React from 'react';\nimport { getCFDPlatformLabel } from '@deriv/shared';\nimport { Text, Button, Icon, Popover } from '@deriv/components';\nimport { TPasswordBoxProps } from './props.types';\nimport { localize } from '@deriv/translations';\n\nconst PasswordBox = ({ platform, onClick }: TPasswordBoxProps) => (\n    <div className='cfd-trade-modal__password-box'>\n        <div className='cfd-trade-modal__password-text'>\n            <Popover\n                alignment='right'\n                message={localize(\n                    'Use these credentials to log in to your {{platform}} account on the website and mobile apps.',\n                    {\n                        platform: getCFDPlatformLabel(platform),\n                    }\n                )}\n                classNameBubble='cfd-trade-modal__password-tooltip'\n                zIndex={9999}\n            >\n                <Text size='xs'>***************</Text>\n            </Popover>\n        </div>\n        <Popover\n            className='cfd-trade-modal__password-popover'\n            alignment='left'\n            message={localize('Change Password')}\n            relative_render\n            zIndex={9999}\n        >\n            <Button\n                className='cfd-trade-modal__password-action'\n                transparent\n                onClick={onClick}\n                icon={\n                    <Icon\n                        icon='IcEdit'\n                        className='da-article__learn-more-icon'\n                        custom_color='var(--text-less-prominent)'\n                    />\n                }\n            />\n        </Popover>\n    </div>\n);\n\nexport default PasswordBox;\n","import React from 'react';\nimport { Text, Icon, Money } from '@deriv/components';\nimport { TTradingPlatformAccounts, TCFDDashboardContainer, TCFDsPlatformType } from 'Components/props.types';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { CFD_PLATFORMS, getCFDAccountKey, isMobile } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { getPlatformQRCode, PlatformsDesktopDownload } from '../Helpers/config';\nimport { getTitle, platformsText, mobileDownloadLink } from '../Helpers/constants';\nimport SpecBox from '../Components/specbox';\nimport PasswordBox from '../Components/passwordbox';\nimport { TCFDPasswordReset } from './props.types';\n\ntype TTradeModalProps = {\n    mt5_trade_account: Required<DetailsOfEachMT5Loginid>;\n    is_eu_user: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    derivez_tokens: TCFDDashboardContainer['derivez_tokens'];\n    is_demo: string;\n    platform: TCFDsPlatformType;\n};\n\nconst PlatformIconsAndDescriptions = (\n    platform: TCFDsPlatformType,\n    is_demo: string,\n    mt5_trade_account: Required<DetailsOfEachMT5Loginid>\n) => {\n    return (\n        <React.Fragment>\n            <Icon icon={`IcRebranding${platform.charAt(0).toUpperCase()}${platform.slice(1)}Dashboard`} size={24} />\n            <div className='cfd-trade-modal__desc'>\n                <Text size='xs' line_height='l' className='cfd-trade-modal__desc-heading'>\n                    <Localize\n                        i18n_default_text='Deriv {{platform}} {{is_demo}}'\n                        values={{\n                            platform: platformsText(platform),\n                            is_demo: is_demo ? 'Demo' : '',\n                        }}\n                    />\n                </Text>\n                {(mt5_trade_account as TTradingPlatformAccounts)?.display_login && (\n                    <Text color='less-prominent' size='xxxs' line_height='xxxs'>\n                        {(mt5_trade_account as TTradingPlatformAccounts)?.display_login}\n                    </Text>\n                )}\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst TradeModal = ({\n    mt5_trade_account,\n    is_eu_user,\n    onPasswordManager,\n    toggleModal,\n    dxtrade_tokens,\n    derivez_tokens,\n    is_demo,\n    platform,\n}: TTradeModalProps) => {\n    const CTraderAndDerivEZDescription = () => {\n        const platform_name = platform === 'derivez' ? 'Deriv EZ' : 'cTrader';\n        return (\n            <div className='cfd-trade-modal__login-specs-item'>\n                <Text className='cfd-trade-modal--paragraph'>\n                    <Localize\n                        i18n_default_text='Use your Deriv account email and password to login into the {{ platform }} platform.'\n                        values={{ platform: platform_name }}\n                    />\n                </Text>\n            </div>\n        );\n    };\n    const downloadCenterDescription = () => {\n        switch (platform) {\n            case 'dxtrade':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={isMobile() ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download Deriv X on your phone to trade with the Deriv X account')}\n                    </Text>\n                );\n            case 'derivez':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={isMobile() ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download Deriv GO on your phone to trade with the Deriv EZ account')}\n                    </Text>\n                );\n            case 'ctrader':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={isMobile() ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download Deriv cTrader on your phone to trade with the Deriv cTrader account')}\n                    </Text>\n                );\n            default:\n                return '';\n        }\n    };\n\n    const downloadCenterAppOption = (platform_type: TCFDsPlatformType) => {\n        let app_title = '';\n        if (platform_type === 'dxtrade') {\n            app_title = localize('Run Deriv X on your browser');\n        } else if (platform_type === 'derivez') {\n            app_title = localize('Run Deriv EZ on your browser');\n        } else if (platform_type === 'ctrader') {\n            app_title = localize('Run Deriv cTrader on your browser');\n        } else {\n            return null;\n        }\n\n        return (\n            <React.Fragment>\n                <div className='cfd-trade-modal__download-center-app--option'>\n                    <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                        {app_title}\n                    </Text>\n                    <PlatformsDesktopDownload\n                        platform={platform}\n                        is_demo={is_demo}\n                        dxtrade_tokens={dxtrade_tokens}\n                        derivez_tokens={derivez_tokens}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    };\n\n    return (\n        <div className='cfd-trade-modal-container'>\n            <div className='cfd-trade-modal'>\n                {PlatformIconsAndDescriptions(platform, is_demo, mt5_trade_account)}\n                {mt5_trade_account?.display_balance && (\n                    <Text size='xs' color='profit-success' className='cfd-trade-modal__desc-balance' weight='bold'>\n                        <Money\n                            amount={mt5_trade_account.display_balance}\n                            currency={mt5_trade_account.currency}\n                            has_sign={!!mt5_trade_account.balance && mt5_trade_account.balance < 0}\n                            show_currency\n                        />\n                    </Text>\n                )}\n            </div>\n            <div className='cfd-trade-modal__login-specs'>\n                {platform !== 'dxtrade' && <CTraderAndDerivEZDescription />}\n                {platform === 'dxtrade' && (\n                    <React.Fragment>\n                        <div className='cfd-trade-modal__login-specs-item'>\n                            <Text className='cfd-trade-modal--paragraph'>{localize('Username')}</Text>\n                            <SpecBox is_bold value={(mt5_trade_account as TTradingPlatformAccounts)?.login} />\n                        </div>\n                        <div className='cfd-trade-modal__login-specs-item'>\n                            <Text className='cfd-trade-modal--paragraph'>{localize('Password')}</Text>\n                            <div className='cfd-trade-modal--paragraph'>\n                                <PasswordBox\n                                    platform='dxtrade'\n                                    onClick={() => {\n                                        const account_type = getCFDAccountKey({\n                                            market_type: mt5_trade_account.market_type,\n                                            sub_account_type: mt5_trade_account.sub_account_type,\n                                            platform: CFD_PLATFORMS.DMT5,\n                                            shortcode: mt5_trade_account.landing_company_short,\n                                        });\n                                        onPasswordManager(\n                                            mt5_trade_account?.login,\n                                            getTitle(mt5_trade_account.market_type, is_eu_user),\n                                            mt5_trade_account.account_type,\n                                            account_type,\n                                            (mt5_trade_account as DetailsOfEachMT5Loginid)?.server\n                                        );\n                                        toggleModal();\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                )}\n\n                <div className='cfd-trade-modal__maintenance'>\n                    <Icon\n                        icon='IcAlertWarning'\n                        size={isMobile() ? 28 : 20}\n                        className='cfd-trade-modal__maintenance-icon'\n                    />\n                    <div className='cfd-trade-modal__maintenance-text'>\n                        <Text size='xxxs' className='cfd-trade-modal__maintenance-text'>\n                            {platform === CFD_PLATFORMS.DXTRADE && (\n                                <Localize i18n_default_text='Server maintenance starts at 06:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                            )}\n                            {platform === CFD_PLATFORMS.MT5 && (\n                                <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                            )}\n                            {platform === CFD_PLATFORMS.DERIVEZ && (\n                                <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                            )}\n                        </Text>\n                    </div>\n                </div>\n            </div>\n            <div className='cfd-trade-modal__download-center-app'>{downloadCenterAppOption(platform)}</div>\n            <div className='cfd-trade-modal__download-center-description'>{downloadCenterDescription()}</div>\n            <div className='cfd-trade-modal__download-center-options'>\n                <div className='cfd-trade-modal__download-center-options--mobile-links'>\n                    <div className='cfd-trade-modal__download-center-options--mobile-links--apple'>\n                        <a href={mobileDownloadLink(platform, 'ios')} target='_blank' rel='noopener noreferrer'>\n                            <Icon icon='IcInstallationApple' width={isMobile() ? '160' : '130'} height={40} />\n                        </a>\n                    </div>\n                    <a href={mobileDownloadLink(platform, 'android')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationGoogle' width={135} height={40} />\n                    </a>\n                    <a href={mobileDownloadLink(platform, 'huawei')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationHuawei' width={135} height={40} />\n                    </a>\n                </div>\n                {!isMobile() && (\n                    <div className='cfd-trade-modal__download-center-options--qrcode'>\n                        {getPlatformQRCode(platform)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TradeModal;\n","import { OSDetect } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TCFDsPlatformType } from 'Components/props.types';\n\nconst platformsText = (platform: TCFDsPlatformType) => {\n    switch (platform) {\n        case 'derivez':\n            return 'EZ';\n        case 'dxtrade':\n            return 'X';\n        default:\n            return '';\n    }\n};\n\nconst platformsIcons = (platform: TCFDsPlatformType) => {\n    switch (platform) {\n        case 'derivez':\n            return 'DerivEz';\n        case 'dxtrade':\n            return 'Dxtrade';\n        default:\n            return '';\n    }\n};\n\nconst mobileDownloadLink = (platform: TCFDsPlatformType, type: 'ios' | 'android' | 'huawei') => {\n    switch (platform) {\n        case 'dxtrade':\n            return getPlatformDXTradeDownloadLink(type);\n        case 'derivez':\n            return getPlatformDerivEZDownloadLink(type);\n        default:\n            return '';\n    }\n};\n\nconst getTitle = (market_type: string, is_eu_user: boolean) => {\n    if (is_eu_user) localize('MT5 CFDs');\n    return market_type;\n};\n\nconst REAL_DXTRADE_URL = 'https://dx.deriv.com';\nconst DEMO_DXTRADE_URL = 'https://dx-demo.deriv.com';\n\nconst DERIVEZ_URL = 'https://dqwsqxuu0r6t9.cloudfront.net/';\nconst DERIVEZ_IOS_APP_URL = 'https://apps.apple.com/my/app/deriv-go/id1550561298';\nconst DERIVEZ_ANDROID_APP_URL = 'https://play.google.com/store/apps/details?id=com.deriv.app&pli=1';\nconst DERIVEZ_HUAWEI_APP_URL = 'https://appgallery.huawei.com/#/app/C103801913';\n\nconst DXTRADE_IOS_APP_URL = 'https://apps.apple.com/us/app/deriv-x/id1563337503';\nconst DXTRADE_ANDROID_APP_URL = 'https://play.google.com/store/apps/details?id=com.deriv.dx';\nconst DXTRADE_HUAWEI_APP_URL = 'https://appgallery.huawei.com/app/C104633219';\n\nconst getBrokerName = () => 'Deriv Holdings (Guernsey) Limited';\n\nconst getTopUpConfig = () => {\n    return {\n        minimum_amount: 1000,\n        additional_amount: 10000,\n    };\n};\n\nconst getPlatformDXTradeDownloadLink = (platform?: 'ios' | 'android' | 'huawei') => {\n    switch (platform) {\n        case 'ios':\n            return DXTRADE_IOS_APP_URL;\n        case 'huawei':\n            return DXTRADE_HUAWEI_APP_URL;\n        case 'android':\n            return DXTRADE_ANDROID_APP_URL;\n        default:\n            return '';\n    }\n};\n\nconst getPlatformDerivEZDownloadLink = (platform: 'ios' | 'android' | 'huawei') => {\n    switch (platform) {\n        case 'ios':\n            return DERIVEZ_IOS_APP_URL;\n        case 'android':\n            return DERIVEZ_ANDROID_APP_URL;\n        case 'huawei':\n            return DERIVEZ_HUAWEI_APP_URL;\n        default:\n            return '';\n    }\n};\n\nconst getPlatformMt5DownloadLink = (platform: string | undefined = undefined) => {\n    switch (platform || OSDetect()) {\n        case 'windows':\n            return 'https://download.mql5.com/cdn/web/deriv.holdings.guernsey/mt5/deriv5setup.exe';\n        case 'linux':\n            return 'https://www.metatrader5.com/en/terminal/help/start_advanced/install_linux';\n        case 'ios':\n            return 'https://download.mql5.com/cdn/mobile/mt5/ios?server=Deriv-Demo,Deriv-Server,Deriv-Server-02';\n        case 'macos':\n            return 'https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/MetaTrader5.dmg';\n        case 'huawei':\n            return 'https://appgallery.huawei.com/#/app/C102015329';\n        case 'android':\n            return 'https://download.mql5.com/cdn/mobile/mt5/android?server=Deriv-Demo,Deriv-Server,Deriv-Server-02';\n        default:\n            return getMT5WebTerminalLink({ category: 'real' }); // Web\n    }\n};\n\nconst getDXTradeWebTerminalLink = (category: string, token?: string) => {\n    let url = category === 'real' ? REAL_DXTRADE_URL : DEMO_DXTRADE_URL;\n\n    if (token) {\n        url += `?token=${token}`;\n    }\n\n    return url;\n};\n\nconst getDerivEzWebTerminalLink = (category: string, token?: string) => {\n    let url = DERIVEZ_URL;\n\n    if (token) {\n        url += `?lang=en&token=${token}`;\n    }\n\n    return url;\n};\n\nconst getMT5WebTerminalLink = ({\n    category,\n    loginid,\n    server_name = 'Deriv-Server',\n}: {\n    category?: string;\n    loginid?: string;\n    server_name?: string;\n}) => {\n    const is_demo = category === 'demo';\n    const server = is_demo ? 'Deriv-Demo' : server_name;\n    const login = loginid ?? '';\n\n    return `https://metatraderweb.app/trade?servers=${server}&trade_server=${server}${login && `&login=${login}`}`;\n};\n\nexport {\n    REAL_DXTRADE_URL,\n    DEMO_DXTRADE_URL,\n    DERIVEZ_URL,\n    getBrokerName,\n    platformsText,\n    platformsIcons,\n    getTitle,\n    mobileDownloadLink,\n    getPlatformDXTradeDownloadLink,\n    getPlatformDerivEZDownloadLink,\n    getPlatformMt5DownloadLink,\n    getDXTradeWebTerminalLink,\n    getDerivEzWebTerminalLink,\n    getMT5WebTerminalLink,\n    getTopUpConfig,\n};\n","import { localize } from '@deriv/translations';\nimport { Jurisdiction } from '@deriv/shared';\n\nexport type TDxCompanies = ReturnType<typeof getDxCompanies>;\nexport type TMtCompanies = ReturnType<typeof getMtCompanies>;\nexport type TDerivezCompanies = ReturnType<typeof getDerivezCompanies>;\n\nexport const getDxCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('CFDs'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: localize('Financial'),\n    };\n    return {\n        demo: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getMtCompanies = (is_eu: boolean) => {\n    // TODO: Move this to the getDxCompanies for real release and when separating MT5 and DerivX components.\n    const all_config = {\n        account_type: '',\n        leverage: 100,\n        short_title: localize('Swap-Free'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Derived'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: is_eu ? localize('CFDs') : localize('Financial'),\n    };\n    const financial_stp_config = {\n        account_type: 'financial_stp',\n        leverage: 100,\n        short_title: localize('Financial STP'),\n    };\n    return {\n        demo: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free SVG'),\n                short_title: localize('Swap-Free SVG'),\n            },\n            derivez: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial SVG'),\n                short_title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Demo Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free'),\n                short_title: all_config.short_title,\n            },\n            all_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            derivez: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived SVG'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_bvi: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Derived BVI'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_bvi: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial BVI'),\n                short_title: financial_config.short_title,\n            },\n            financial_fx: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Labuan'),\n                short_title: financial_config.short_title,\n            },\n            financial_v: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Vanuatu'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getDerivezCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 1000,\n        short_title: localize('CFDs'),\n    };\n    return {\n        demo: {\n            all: {\n                derivez_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                derivez_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getFormattedJurisdictionCode = (jurisdiction_code: string) => {\n    let formatted_label = '';\n\n    switch (jurisdiction_code) {\n        case Jurisdiction.SVG:\n            formatted_label = localize('SVG');\n            break;\n        case Jurisdiction.BVI:\n            formatted_label = localize('BVI');\n            break;\n        case Jurisdiction.LABUAN:\n            formatted_label = localize('Labuan');\n            break;\n        case Jurisdiction.VANUATU:\n            formatted_label = localize('Vanuatu');\n            break;\n        default:\n            formatted_label = jurisdiction_code?.toUpperCase();\n            break;\n    }\n\n    return formatted_label;\n};\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport { useStore } from '@deriv/stores';\nimport type { TCFDStore } from '../../../../types/cfd-store.types';\n\nconst CFDStoreContext = createContext<TCFDStore | null>(null);\n\nexport const CFDStoreProvider = ({ children }: PropsWithChildren<unknown>) => {\n    const { modules } = useStore();\n\n    return (\n        <CFDStoreContext.Provider\n            // value={memoizedValue}\n            value={modules?.cfd || {}}\n        >\n            {children}\n        </CFDStoreContext.Provider>\n    );\n};\n\nexport const useCfdStore = () => {\n    const store = useContext(CFDStoreContext);\n\n    if (!store) {\n        throw new Error('useCfdStore must be used within CfdStoreContext');\n    }\n\n    return store;\n};\n","class Errors {\n    constructor() {\n        this.errors = {};\n    }\n\n    add(attribute, message) {\n        if (!this.has(attribute)) {\n            this.errors[attribute] = [];\n        }\n\n        if (this.errors[attribute].indexOf(message) === -1) {\n            this.errors[attribute].push(message);\n        }\n    }\n\n    all() {\n        return this.errors;\n    }\n\n    first(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute][0];\n        }\n        return null;\n    }\n\n    get(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute];\n        }\n\n        return [];\n    }\n\n    has(attribute) {\n        return Object.prototype.hasOwnProperty.call(this.errors, attribute);\n    }\n}\n\nexport default Errors;\n","import { template } from '_common/utility';\nimport { getPreBuildDVRs } from '@deriv/shared';\nimport Error from './errors';\n\nclass Validator {\n    constructor(input, rules, store = null) {\n        this.input = input;\n        this.rules = rules;\n        this.store = store;\n        this.errors = new Error();\n\n        this.error_count = 0;\n    }\n\n    /**\n     * Add failure and error message for given rule\n     *\n     * @param {string} attribute\n     * @param {object} rule\n     */\n    addFailure(attribute, rule, error_message) {\n        let message = error_message || rule.options.message || getPreBuildDVRs()[rule.name].message();\n        if (rule.name === 'length') {\n            message = template(message, [\n                rule.options.min === rule.options.max ? rule.options.min : `${rule.options.min}-${rule.options.max}`,\n            ]);\n        } else if (rule.name === 'min') {\n            message = template(message, [rule.options.min]);\n        } else if (rule.name === 'not_equal') {\n            message = template(message, [rule.options.name1, rule.options.name2]);\n        }\n        this.errors.add(attribute, message);\n        this.error_count++;\n    }\n\n    /**\n     * Runs validator\n     *\n     * @return {boolean} Whether it passes; true = passes, false = fails\n     */\n    check() {\n        Object.keys(this.input).forEach(attribute => {\n            if (!Object.prototype.hasOwnProperty.call(this.rules, attribute)) {\n                return;\n            }\n\n            this.rules[attribute].forEach(rule => {\n                const ruleObject = Validator.getRuleObject(rule);\n\n                if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\n                    return;\n                }\n\n                if (ruleObject.options.condition && !ruleObject.options.condition(this.store)) {\n                    return;\n                }\n\n                if (this.input[attribute] === '' && ruleObject.name !== 'req') {\n                    return;\n                }\n\n                let is_valid, error_message;\n                if (ruleObject.name === 'number') {\n                    const { is_ok, message } = ruleObject.validator(\n                        this.input[attribute],\n                        ruleObject.options,\n                        this.store,\n                        this.input\n                    );\n                    is_valid = is_ok;\n                    error_message = message;\n                } else {\n                    is_valid = ruleObject.validator(this.input[attribute], ruleObject.options, this.store, this.input);\n                }\n\n                if (!is_valid) {\n                    this.addFailure(attribute, ruleObject, error_message);\n                }\n            });\n        });\n        return !this.error_count;\n    }\n\n    /**\n     * Determine if validation passes\n     *\n     * @return {boolean}\n     */\n    isPassed() {\n        return this.check();\n    }\n\n    /**\n     * Converts the rule array to an object\n     *\n     * @param {array} rule\n     * @return {object}\n     */\n    static getRuleObject(rule) {\n        const is_rule_string = typeof rule === 'string';\n        const rule_object = {\n            name: is_rule_string ? rule : rule[0],\n            options: is_rule_string ? {} : rule[1] || {},\n        };\n\n        rule_object.validator = rule_object.name === 'custom' ? rule[1].func : getPreBuildDVRs()[rule_object.name].func;\n\n        return rule_object;\n    }\n}\n\nexport default Validator;\n","import Validator from './validator';\n\nexport default Validator;\n","import { action, intercept, observable, reaction, toJS, when, makeObservable } from 'mobx';\nimport { isProduction, isEmptyObject } from '@deriv/shared';\n\nimport Validator from '../Utils/Validator';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    validation_errors = {};\n\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import { action, computed, observable, reaction, runInAction, makeObservable, override } from 'mobx';\nimport { getAccountListKey, getAccountTypeFields, CFD_PLATFORMS, WS, Jurisdiction } from '@deriv/shared';\nimport BaseStore from 'Stores/base-store';\nimport { getDxCompanies, getMtCompanies, getDerivezCompanies } from './Helpers/cfd-config';\n\nexport default class CFDStore extends BaseStore {\n    is_compare_accounts_visible = false;\n    is_cfd_personal_details_modal_visible = false;\n    is_jurisdiction_modal_visible = false;\n    is_mt5_trade_modal_visible = false;\n    jurisdiction_selected_shortcode = '';\n\n    account_type = {\n        category: '',\n        type: '',\n    };\n\n    mt5_trade_account = {};\n    new_account_response = {};\n    map_type = {};\n    has_cfd_error = false;\n    error_message = '';\n\n    is_account_being_created = false;\n    is_cfd_success_dialog_enabled = false;\n    is_mt5_financial_stp_modal_open = false;\n    is_cfd_password_modal_enabled = false;\n\n    current_account = undefined; // this is a tmp value, don't rely on it, unless you set it first.\n\n    error_type = undefined;\n\n    is_cfd_verification_modal_visible = false;\n    dxtrade_tokens = {\n        demo: '',\n        real: '',\n    };\n    derivez_tokens = {\n        demo: '',\n        real: '',\n    };\n\n    real_synthetic_accounts_existing_data = [];\n    real_financial_accounts_existing_data = [];\n    real_swapfree_accounts_existing_data = [];\n\n    constructor({ root_store }) {\n        super({ root_store });\n\n        makeObservable(this, {\n            is_compare_accounts_visible: observable,\n            is_cfd_personal_details_modal_visible: observable,\n            is_jurisdiction_modal_visible: observable,\n            is_mt5_trade_modal_visible: observable,\n            jurisdiction_selected_shortcode: observable,\n            account_type: observable,\n            mt5_trade_account: observable,\n            new_account_response: observable,\n            map_type: observable,\n            has_cfd_error: observable,\n            error_message: observable,\n            is_account_being_created: observable,\n            is_cfd_success_dialog_enabled: observable,\n            is_mt5_financial_stp_modal_open: observable,\n            is_cfd_password_modal_enabled: observable,\n            current_account: observable,\n            is_cfd_verification_modal_visible: observable,\n            error_type: observable,\n            dxtrade_tokens: observable,\n            derivez_tokens: observable,\n            account_title: computed,\n            current_list: computed,\n            has_created_account_for_selected_jurisdiction: computed,\n            has_submitted_cfd_personal_details: computed,\n            is_high_risk_client_for_mt5: computed,\n            onMount: action.bound,\n            onUnmount: override,\n            checkShouldOpenAccount: action.bound,\n            realAccountSignupEndListener: action.bound,\n            resetFormErrors: action.bound,\n            clearCFDError: action.bound,\n            createCFDAccount: action.bound,\n            disableCFDPasswordModal: action.bound,\n            enableCFDPasswordModal: action.bound,\n            getName: action.bound,\n            openMT5Account: action.bound,\n            openCFDAccount: action.bound,\n            beginRealSignupForMt5: action.bound,\n            enableMt5FinancialStpModal: action.bound,\n            setAccountType: action.bound,\n            setCurrentAccount: action.bound,\n            setMT5TradeAccount: action.bound,\n            setIsAccountBeingCreated: action.bound,\n            setError: action.bound,\n            setCFDNewAccount: action.bound,\n            setCFDSuccessDialog: action.bound,\n            storeProofOfAddress: action.bound,\n            getAccountStatus: action.bound,\n            creatMT5Password: action.bound,\n            submitMt5Password: action.bound,\n            createCFDPassword: action.bound,\n            submitCFDPassword: action.bound,\n            toggleCompareAccountsModal: action.bound,\n            getRealSyntheticAccountsExistingData: action.bound,\n            getRealFinancialAccountsExistingData: action.bound,\n            getRealSwapfreeAccountsExistingData: action.bound,\n            toggleJurisdictionModal: action.bound,\n            toggleMT5TradeModal: action.bound,\n            disableMt5FinancialStpModal: action.bound,\n            topUpVirtual: action.bound,\n            sendVerifyEmail: action.bound,\n            setJurisdictionSelectedShortcode: action.bound,\n            toggleCFDVerificationModal: action.bound,\n            setDxtradeToken: action.bound,\n            setDerivezToken: action.bound,\n            loadDxtradeTokens: action.bound,\n            loadDerivezTokens: action.bound,\n        });\n\n        // reaction(\n        //     () => [this.root_store.client.dxtrade_accounts_list],\n        //     () => {\n        //         if (this.root_store.client.dxtrade_accounts_list.length > 0) {\n        //             this.loadDxtradeTokens();\n        //         }\n        //     }\n        // );\n\n        reaction(\n            () => [this.root_store.client.derivez_accounts_list],\n            () => {\n                if (this.root_store.client.derivez_accounts_list.length > 0) {\n                    this.loadDerivezTokens();\n                }\n            }\n        );\n    }\n\n    get account_title() {\n        return this.account_type.category\n            ? getMtCompanies(this.root_store.traders_hub.show_eu_related_content)[this.account_type.category][\n                  this.account_type.type\n              ].title\n            : '';\n    }\n\n    get has_submitted_cfd_personal_details() {\n        const { citizen, place_of_birth, tax_residence, tax_identification_number, account_opening_reason } =\n            this.root_store.client.account_settings;\n        return !!(citizen && place_of_birth && tax_residence && tax_identification_number && account_opening_reason);\n    }\n\n    get current_list() {\n        const list = {};\n        const show_eu_related_content = this.root_store.traders_hub.show_eu_related_content;\n        this.root_store.client.mt5_login_list\n            .filter(acc =>\n                show_eu_related_content\n                    ? acc.landing_company_short === 'maltainvest'\n                    : acc.landing_company_short !== 'maltainvest'\n            )\n            .forEach(account => {\n                // e.g. mt5.real.financial_stp\n                list[getAccountListKey(account, CFD_PLATFORMS.MT5, account.landing_company_short)] = {\n                    ...account,\n                };\n            });\n\n        this.root_store.client.dxtrade_accounts_list.forEach(account => {\n            // e.g. dxtrade.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DXTRADE)] = {\n                ...account,\n            };\n        });\n\n        this.root_store.client.derivez_accounts_list.forEach(account => {\n            // e.g. derivez.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DERIVEZ)] = {\n                ...account,\n            };\n        });\n\n        return list;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get mt5_companies() {\n        return getMtCompanies(this.root_store.client.is_eu);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get dxtrade_companies() {\n        return getDxCompanies();\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get derivez_companies() {\n        return getDerivezCompanies();\n    }\n\n    get has_created_account_for_selected_jurisdiction() {\n        switch (this.account_type.type) {\n            case 'synthetic':\n                return this.real_synthetic_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            case 'all':\n                return this.real_swapfree_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n            default:\n                return this.real_financial_accounts_existing_data?.some(\n                    account => account.landing_company_short === this.jurisdiction_selected_shortcode\n                );\n        }\n    }\n\n    onMount() {\n        this.checkShouldOpenAccount();\n        this.onRealAccountSignupEnd(this.realAccountSignupEndListener);\n        this.root_store.ui.is_cfd_page = true;\n    }\n\n    onUnmount() {\n        this.disposeRealAccountSignupEnd();\n        this.root_store.ui.is_cfd_page = false;\n    }\n\n    // other platforms can redirect to here using account switcher's `Add` account button\n    // so in that case we should open the corresponding account opening modal on load/component update\n    checkShouldOpenAccount() {\n        const account_type = sessionStorage.getItem('open_cfd_account_type');\n        if (account_type) {\n            const [category, platform, type, set_password] = account_type.split('.');\n            this.createCFDAccount({ category, platform, type, set_password });\n            sessionStorage.removeItem('open_cfd_account_type');\n        }\n    }\n\n    setIsAccountBeingCreated(is_account_being_created) {\n        this.is_account_being_created = is_account_being_created;\n    }\n\n    realAccountSignupEndListener() {\n        const post_signup = JSON.parse(sessionStorage.getItem('post_real_account_signup'));\n        if (post_signup && post_signup.category && post_signup.type) {\n            sessionStorage.removeItem('post_real_account_signup');\n            this.enableCFDPasswordModal();\n        }\n        return Promise.resolve();\n    }\n\n    resetFormErrors() {\n        this.error_message = '';\n        this.error_type = undefined;\n        this.has_cfd_error = false;\n    }\n\n    clearCFDError() {\n        this.resetFormErrors();\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    async createCFDAccount({ category, platform, type, set_password }) {\n        this.clearCFDError();\n        this.setIsAccountBeingCreated(true);\n        this.setAccountType({\n            category,\n            type,\n        });\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (category === 'real') {\n                this.realCFDSignup(set_password);\n            } else {\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (category === 'real') {\n                this.toggleJurisdictionModal();\n            } else {\n                if (this.root_store.traders_hub.show_eu_related_content) {\n                    this.setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                } else this.setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.DERIVEZ) {\n            this.setJurisdictionSelectedShortcode('svg');\n            const values = {\n                platform,\n                account_type: this.account_type.category,\n                market_type: this.account_type.type,\n                company: this.jurisdiction_selected_shortcode,\n            };\n            const response = await this.openCFDAccount(values);\n            if (!response.error) {\n                this.enableCFDPasswordModal();\n                this.setCFDSuccessDialog(true);\n                const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n                this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n                this.setCFDNewAccount(response.trading_platform_new_account);\n                this.setIsAccountBeingCreated(false);\n            } else {\n                this.setError(true, response.error);\n                this.setIsAccountBeingCreated(false);\n            }\n        }\n    }\n\n    demoCFDSignup() {\n        this.enableCFDPasswordModal();\n    }\n\n    disableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    enableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = true;\n    }\n\n    getName() {\n        const { first_name } = this.root_store.client.account_settings && this.root_store.client.account_settings;\n        const title = this.mt5_companies[this.account_type.category][this.account_type.type].title;\n\n        // First name is not set when user has no real account\n        return first_name ? [first_name, title].join(' ') : title;\n    }\n\n    openMT5Account(values) {\n        const name = this.getName();\n        const leverage = this.mt5_companies[this.account_type.category][this.account_type.type].leverage;\n        const type_request = getAccountTypeFields(this.account_type);\n        const { address_line_1, address_line_2, address_postcode, address_city, address_state, country_code, phone } =\n            this.root_store.client.account_settings;\n\n        return WS.mt5NewAccount({\n            mainPassword: values.password,\n            email: this.root_store.client.email_address,\n            leverage,\n            name,\n            address: address_line_1 || address_line_2,\n            city: address_city,\n            country: country_code,\n            phone,\n            state: address_state,\n            zipCode: address_postcode,\n            ...(this.account_type.type === 'all' ? { sub_account_category: 'swap_free' } : {}),\n            ...(values.server ? { server: values.server } : {}),\n            ...(this.jurisdiction_selected_shortcode ? { company: this.jurisdiction_selected_shortcode } : {}),\n            ...(this.jurisdiction_selected_shortcode !== Jurisdiction.LABUAN\n                ? type_request\n                : {\n                      account_type: 'financial',\n                      mt5_account_type: 'financial_stp',\n                  }),\n        });\n    }\n\n    openCFDAccount(values) {\n        return WS.tradingPlatformNewAccount({\n            password: CFD_PLATFORMS.DXTRADE ? values.password : '',\n            platform: values.platform,\n            account_type: this.account_type.category,\n            market_type:\n                this.account_type.type === 'dxtrade' || this.account_type.type === 'derivez'\n                    ? 'all'\n                    : this.account_type.type,\n            company: CFD_PLATFORMS.DERIVEZ ? this.jurisdiction_selected_shortcode : '',\n        });\n    }\n\n    beginRealSignupForMt5() {\n        sessionStorage.setItem('post_real_account_signup', JSON.stringify(this.account_type));\n        this.root_store.ui.openRealAccountSignup('svg');\n    }\n\n    realCFDSignup(set_password) {\n        switch (this.account_type.type) {\n            case 'financial':\n                this.enableCFDPasswordModal();\n                break;\n            case 'financial_stp':\n                this.root_store.client.fetchResidenceList();\n                this.root_store.client.fetchStatesList();\n                this.root_store.client.fetchAccountSettings();\n                if (set_password) this.enableCFDPasswordModal();\n                else this.enableMt5FinancialStpModal();\n                break;\n            case 'synthetic':\n            case 'dxtrade':\n            case 'all':\n                this.enableCFDPasswordModal();\n                break;\n            default:\n                throw new Error('Cannot determine mt5 account signup.');\n        }\n    }\n\n    enableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = true;\n    }\n\n    setAccountType(account_type) {\n        this.account_type = account_type;\n    }\n\n    setCurrentAccount(data, meta) {\n        this.current_account = {\n            ...meta,\n            ...data,\n        };\n    }\n\n    setMT5TradeAccount(mt5_trade_account) {\n        this.mt5_trade_account = mt5_trade_account;\n    }\n\n    setError(state, obj) {\n        this.has_cfd_error = state;\n        this.error_message = obj ? obj.message : '';\n        this.error_type = obj?.code ?? undefined;\n    }\n\n    setCFDNewAccount(cfd_new_account) {\n        this.new_account_response = cfd_new_account;\n    }\n\n    setCFDSuccessDialog(value) {\n        this.is_cfd_success_dialog_enabled = !!value;\n    }\n\n    storeProofOfAddress(file_uploader_ref, values, { setStatus }) {\n        return new Promise((resolve, reject) => {\n            setStatus({ msg: '' });\n            this.setState({ is_btn_loading: true });\n\n            WS.setSettings(values).then(data => {\n                if (data.error) {\n                    setStatus({ msg: data.error.message });\n                    reject(data);\n                } else {\n                    this.root_store.fetchAccountSettings();\n                    // force request to update settings cache since settings have been updated\n                    file_uploader_ref.current.upload().then(api_response => {\n                        if (api_response.warning) {\n                            setStatus({ msg: api_response.message });\n                            reject(api_response);\n                        } else {\n                            WS.authorized.storage.getAccountStatus().then(({ error, get_account_status }) => {\n                                if (error) {\n                                    reject(error);\n                                }\n                                const { identity } = get_account_status.authentication;\n                                const has_poi = !(identity && identity.status === 'none');\n                                resolve({\n                                    identity,\n                                    has_poi,\n                                });\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    }\n\n    async getAccountStatus(platform) {\n        const should_load_account_status =\n            (platform === CFD_PLATFORMS.MT5 && this.root_store.client.is_mt5_password_not_set) ||\n            (platform === CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set);\n\n        if (should_load_account_status) {\n            await WS.getAccountStatus();\n        }\n    }\n\n    async creatMT5Password(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.MT5,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n        return false;\n    }\n\n    async submitMt5Password(values, actions) {\n        if (this.root_store.client.is_mt5_password_not_set) {\n            const has_error = await this.creatMT5Password(values, actions);\n            if (has_error) return;\n        }\n\n        this.resetFormErrors();\n        const response = await this.openMT5Account(values);\n        if (!response.error) {\n            actions.setStatus({ success: true });\n            actions.setSubmitting(false);\n            this.setError(false);\n            this.setCFDSuccessDialog(true);\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n\n            const mt5_login_list_response = await WS.authorized.mt5LoginList();\n            this.root_store.client.responseMt5LoginList(mt5_login_list_response);\n\n            WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n            this.root_store.client.responseMT5TradingServers(await WS.tradingServers(CFD_PLATFORMS.MT5));\n            this.setCFDNewAccount(response.mt5_new_account);\n        } else {\n            await this.getAccountStatus(CFD_PLATFORMS.MT5);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n        }\n    }\n\n    async createCFDPassword(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.DXTRADE,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n\n        return false;\n    }\n\n    async submitCFDPassword(values, actions) {\n        if (CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set) {\n            const has_error = await this.createCFDPassword(values, actions);\n            if (has_error) return;\n        }\n\n        const response = await this.openCFDAccount(values);\n\n        if (response.error) {\n            await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return;\n        }\n\n        actions.setStatus({ success: true });\n        actions.setSubmitting(false);\n        this.setError(false);\n        this.setCFDSuccessDialog(true);\n        await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n\n        const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n        this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n\n        WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n        this.setCFDNewAccount(response.trading_platform_new_account);\n    }\n\n    toggleCompareAccountsModal() {\n        this.is_compare_accounts_visible = !this.is_compare_accounts_visible;\n    }\n\n    getRealSyntheticAccountsExistingData(real_synthetic_accounts_existing_data) {\n        this.real_synthetic_accounts_existing_data = real_synthetic_accounts_existing_data;\n    }\n\n    getRealFinancialAccountsExistingData(real_financial_accounts_existing_data) {\n        this.real_financial_accounts_existing_data = real_financial_accounts_existing_data;\n    }\n\n    getRealSwapfreeAccountsExistingData(real_swapfree_accounts_existing_data) {\n        this.real_swapfree_accounts_existing_data = real_swapfree_accounts_existing_data;\n    }\n\n    toggleJurisdictionModal() {\n        this.is_jurisdiction_modal_visible = !this.is_jurisdiction_modal_visible;\n    }\n\n    toggleMT5TradeModal() {\n        this.is_mt5_trade_modal_visible = !this.is_mt5_trade_modal_visible;\n    }\n\n    disableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = false;\n    }\n\n    async topUpVirtual(platform) {\n        this.root_store.ui.setTopUpInProgress(true);\n        let response;\n\n        switch (platform) {\n            case CFD_PLATFORMS.DXTRADE: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.DXTRADE,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.MT5: {\n                response = await WS.authorized.mt5Deposit({\n                    to_mt5: this.current_account.login,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.DERIVEZ: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.DERIVEZ,\n                    to_account: this.current_account.login,\n                });\n                break;\n            }\n            default: {\n                response.error = 'Invalid platform';\n                break;\n            }\n        }\n\n        if (!response.error) {\n            let new_balance;\n            switch (platform) {\n                case CFD_PLATFORMS.DXTRADE: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DXTRADE)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.dxtrade_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.MT5: {\n                    await WS.authorized.mt5LoginList().then(this.root_store.client.responseMt5LoginList);\n\n                    new_balance = this.root_store.client.mt5_login_list.find(\n                        item => item.login === this.current_account.login\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.DERIVEZ: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DERIVEZ)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.derivez_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n            runInAction(() => {\n                // Get new current account\n                this.root_store.ui.is_top_up_virtual_open = false;\n                this.current_account.balance = new_balance;\n            });\n            setTimeout(() => {\n                runInAction(() => {\n                    this.root_store.ui.is_top_up_virtual_success = true;\n                });\n            }, 250);\n        } else {\n            // eslint-disable-next-line no-console\n            console.error(response);\n        }\n        this.root_store.ui.setTopUpInProgress(false);\n    }\n\n    sendVerifyEmail() {\n        return WS.verifyEmail(this.root_store.client.email, 'trading_platform_investor_password_reset');\n    }\n\n    setDxtradeToken(response, server) {\n        if (!response.error) {\n            const { dxtrade } = response.service_token;\n            this.dxtrade_tokens[server] = dxtrade.token;\n        }\n    }\n\n    loadDxtradeTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.dxtrade_accounts_list.some(\n                account => account.account_type === account_type\n            );\n            if (!this.dxtrade_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DXTRADE, account_type).then(response =>\n                    this.setDxtradeToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    setDerivezToken(response, server) {\n        if (!response.error) {\n            const { pandats } = response.service_token;\n            this.derivez_tokens[server] = pandats.token;\n        }\n    }\n\n    loadDerivezTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.derivez_accounts_list.some(\n                account => account.account_type === account_type\n            );\n\n            if (!this.derivez_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DERIVEZ, account_type).then(response =>\n                    this.setDerivezToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    static async changePassword({ login, old_password, new_password, password_type }) {\n        let response;\n\n        if (password_type === 'investor') {\n            response = await WS.authorized.tradingPlatformInvestorPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        } else {\n            response = await WS.authorized.tradingPlatformPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        }\n\n        return response?.error?.message;\n    }\n\n    setJurisdictionSelectedShortcode(shortcode) {\n        this.jurisdiction_selected_shortcode = shortcode;\n    }\n\n    toggleCFDVerificationModal() {\n        this.is_cfd_verification_modal_visible = !this.is_cfd_verification_modal_visible;\n    }\n\n    get is_high_risk_client_for_mt5() {\n        const { trading_platform_available_accounts } = this.root_store.client;\n        const financial_available_accounts = trading_platform_available_accounts.filter(\n            available_account => available_account.market_type === 'financial'\n        );\n\n        const synthetic_available_accounts = trading_platform_available_accounts.filter(\n            available_account => available_account.market_type === 'gaming'\n        );\n\n        return (\n            financial_available_accounts.length === 1 &&\n            financial_available_accounts.every(acc => acc.shortcode === 'svg') &&\n            synthetic_available_accounts.length === 1 &&\n            synthetic_available_accounts.every(acc => acc.shortcode === 'svg')\n        );\n    }\n}\n","const template = (string, content) => {\n    let to_replace = content;\n    if (content && !Array.isArray(content)) {\n        to_replace = [content];\n    }\n    return string.replace(/\\[_(\\d+)]/g, (s, index) => to_replace[+index - 1]);\n};\n\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach(attr => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash =\n        static_hash || (document.querySelector('script[src*=\"main\"]').getAttribute('src') || '').split('.')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    template,\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n","import React from 'react';\nimport { CFD_PLATFORMS } from '@deriv/shared';\nimport { Button, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { TMissingRealAccount } from './props.types';\n\nconst MissingRealAccount = ({ onClickSignup, platform }: TMissingRealAccount) => (\n    <div className='cfd-dashboard__missing-real'>\n        <div className='cfd-dashboard__missing-real-wrapper'>\n            <Text className='cfd-dashboard__missing-real--heading' as='h1' weight='bold' line_height='l'>\n                {platform === CFD_PLATFORMS.MT5 ? (\n                    <Localize i18n_default_text='You need a real account (fiat currency or cryptocurrency) in Deriv to create a real Deriv MT5 account.' />\n                ) : (\n                    <Localize i18n_default_text='To create a Deriv X real account, create a Deriv real account first.' />\n                )}\n            </Text>\n        </div>\n        <div>\n            <Button className='cfd-dashboard__missing-real--button' onClick={onClickSignup} type='button' primary large>\n                <span className='btn__text'>\n                    <Localize i18n_default_text='Create a Deriv account' />\n                </span>\n            </Button>\n        </div>\n    </div>\n);\n\nexport default MissingRealAccount;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype LoadingProps = {\n    className?: string;\n    is_invisible?: boolean;\n    theme?: string;\n    id?: string;\n};\n\nconst Loading = ({ className, is_invisible, theme, id }: LoadingProps) => (\n    <div\n        id={id}\n        data-testid='dt_barspinner'\n        className={classNames('barspinner', `barspinner--${theme || 'dark'}`, { invisible: is_invisible }, className)}\n    >\n        {Array.from(new Array(5)).map((x, inx) => (\n            <div key={inx} className={`barspinner__rect barspinner__rect--${inx + 1} rect${inx + 1}`} />\n        ))}\n    </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport Loading from '../templates/_common/components/loading';\n\nconst LoadingCFDRealAccountDisplay = () => (\n    <div className='cfd-real-accounts-display'>\n        <Loading />\n    </div>\n);\n\nexport default LoadingCFDRealAccountDisplay;\n","import { CFD_PLATFORMS } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nexport const general_messages = {\n    getWelcomeHeader: (is_logged_in, platform) => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (is_logged_in) return localize('Welcome to your Deriv X dashboard');\n            return localize('Welcome to Deriv X');\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            return localize('Welcome to Deriv MT5 dashboard');\n        }\n        return localize('');\n    },\n    getDownloadHeader: platform => {\n        if (platform === CFD_PLATFORMS.DXTRADE)\n            return localize('Run Deriv X on your browser or download the mobile app');\n        else if (platform === CFD_PLATFORMS.MT5)\n            return localize('Run MT5 from your browser or download the MT5 app for your devices');\n        return '';\n    },\n    getFinancialAccountDescriptor: (platform, show_eu_related_content) => {\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            return localize('Trade forex, basket indices, commodities, and cryptocurrencies with high leverage.');\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (show_eu_related_content) {\n                return localize(\n                    'Trade CFDs on forex, stocks, stock indices, synthetic indices, cryptocurrencies, and commodities with leverage.'\n                );\n            }\n            return localize('Trade CFDs on forex, stocks & stock indices, commodities, and crypto.');\n        }\n        return '';\n    },\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { QRCode } from 'react-qrcode';\nimport { Icon, Text, DesktopWrapper, MobileWrapper } from '@deriv/components';\nimport { CFD_PLATFORMS, isDesktop, isMobile } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    getDXTradeWebTerminalLink,\n    getPlatformDXTradeDownloadLink,\n    getPlatformMt5DownloadLink,\n} from '../Helpers/constants';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport { TCFDDashboardContainer } from './props.types';\n\ntype TDxtradeDesktopDownloadProps = {\n    active_index: TCFDDashboardContainer['active_index'];\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n};\n\ntype TMobileDownloadProps = {\n    is_dark_mode_on: TCFDDashboardContainer['is_dark_mode_on'];\n    platform: TCFDDashboardContainer['platform'];\n};\n\nconst mobileDownloadLink = (platform: string, type: 'ios' | 'android' | 'huawei') => {\n    return platform === CFD_PLATFORMS.MT5 ? getPlatformMt5DownloadLink(type) : getPlatformDXTradeDownloadLink(type);\n};\n\nconst DxtradeDesktopDownload = ({ active_index, dxtrade_tokens }: TDxtradeDesktopDownloadProps) => (\n    <React.Fragment>\n        <h1 className='cfd-dashboard__download-container-heading'>{localize('Run Deriv X on your browser')}</h1>\n        <a\n            className='cfd-dashboard__download-container-dxtrade-button'\n            href={getDXTradeWebTerminalLink(\n                active_index === 0 ? 'real' : 'demo',\n                dxtrade_tokens && dxtrade_tokens[active_index === 0 ? 'real' : 'demo']\n            )}\n            target='_blank'\n            rel='noopener noreferrer'\n        >\n            <Icon\n                className='cfd-dashboard__download-container-dxtrade-button-icon'\n                icon='IcRebrandingDxtrade'\n                size={32}\n            />\n            <div className='cfd-dashboard__download-container-dxtrade-button-text'>\n                <Text color='colored-background' size='xxs' weight='bold'>\n                    <Localize i18n_default_text='Web terminal' />\n                </Text>\n            </div>\n        </a>\n    </React.Fragment>\n);\n\nconst MT5DesktopDownload = () => (\n    <React.Fragment>\n        <div className='cfd-dashboard__download-container-links-icons'>\n            <Icon icon='IcMt5DeviceDesktop' width={118} height={85} />\n            <Icon icon='IcMt5DeviceLaptop' width={75} height={51} />\n        </div>\n        <div className='cfd-dashboard__download-container-links-download-buttons'>\n            <a href={getPlatformMt5DownloadLink('windows')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationWindows' width={138} height={40} />\n            </a>\n            <a href={getPlatformMt5DownloadLink('macos')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationMacos' width={138} height={40} />\n            </a>\n            <a href={getPlatformMt5DownloadLink('linux')} target='_blank' rel='noopener noreferrer'>\n                <Icon icon='IcInstallationLinux' width={138} height={40} />\n            </a>\n        </div>\n        <Text as='p' align='center' size='xxxs' className='cfd-dashboard__download-center--hint'>\n            <Localize i18n_default_text='The MT5 desktop app is not supported by Windows XP, Windows 2003, and Windows Vista.' />\n        </Text>\n    </React.Fragment>\n);\n\nconst MobileDownload = ({ is_dark_mode_on, platform }: TMobileDownloadProps) => (\n    <React.Fragment>\n        {platform === CFD_PLATFORMS.DXTRADE && (\n            <h1 className='cfd-dashboard__download-container-heading'>{localize('Download the Deriv X mobile app')}</h1>\n        )}\n        <div\n            className={classnames({\n                'cfd-dashboard__download-container-links-icons': isMobile() || platform === CFD_PLATFORMS.MT5,\n            })}\n        >\n            {isMobile() && platform === CFD_PLATFORMS.DXTRADE && (\n                <React.Fragment>\n                    <Icon\n                        icon={is_dark_mode_on ? 'IcDxtradeDeviceTabletLight' : 'IcDxtradeDeviceTablet'}\n                        width={133}\n                        height={106}\n                    />\n                    <Icon\n                        icon={is_dark_mode_on ? 'IcDxtradeDevicePhoneLight' : 'IcDxtradeDevicePhone'}\n                        width={48}\n                        height={74}\n                    />\n                </React.Fragment>\n            )}\n            {platform === CFD_PLATFORMS.MT5 && (\n                <React.Fragment>\n                    <Icon icon='IcMt5DeviceTablet' width={133} height={106} />\n                    <Icon icon='IcMt5DevicePhone' width={48} height={74} />\n                </React.Fragment>\n            )}\n        </div>\n        <div\n            className={classnames('cfd-dashboard__download-container-links-download-buttons', {\n                'cfd-dashboard__download-container-links-download-buttons--column':\n                    isMobile() && platform === CFD_PLATFORMS.MT5,\n            })}\n        >\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'ios')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationApple' width={135} height={40} />\n            </a>\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'android')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationGoogle' width={135} height={40} />\n            </a>\n            <a\n                className='cfd-dashboard__download-center-options--mobile-link'\n                href={mobileDownloadLink(platform, 'huawei')}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <Icon icon='IcInstallationHuawei' width={135} height={40} />\n            </a>\n        </div>\n    </React.Fragment>\n);\n\nconst QRCodeBox = ({ platform }: { platform: string }) => (\n    <DesktopWrapper>\n        <div className='cfd-dashboard__download-container-qrcode'>\n            <QRCode value={mobileDownloadLink(platform, 'android')} size={160} />\n            <span className='cfd-dashboard__download-container-qrcode__hint'>\n                {localize('Scan the QR code to download the Deriv X Mobile App')}\n            </span>\n        </div>\n    </DesktopWrapper>\n);\n\nconst CFDDownloadContainer = ({ platform, is_dark_mode_on, active_index, dxtrade_tokens }: TCFDDashboardContainer) => (\n    <React.Fragment>\n        <MobileWrapper>\n            <Text\n                className='cfd-dashboard__download-container-mobile-hint'\n                color='general'\n                size='xxs'\n                weight='400'\n                align='center'\n            >\n                <Localize i18n_default_text='If you have the app, launch it to start trading.' />\n            </Text>\n        </MobileWrapper>\n        <div\n            className={classnames('cfd-dashboard__download-container', {\n                'cfd-dashboard__download-container--is-mt5': platform === CFD_PLATFORMS.MT5,\n            })}\n            data-testid='dt_cfd_dashboard_download_center_container'\n        >\n            {platform === CFD_PLATFORMS.MT5 && (\n                <h1 className='cfd-dashboard__download-container-heading'>\n                    {isDesktop() ? general_messages.getDownloadHeader(platform) : localize('Download the MT5 app')}\n                </h1>\n            )}\n            <div\n                className={classnames('cfd-dashboard__download-container-links', {\n                    'cfd-dashboard__download-container-links--is-mt5': platform === CFD_PLATFORMS.MT5,\n                })}\n            >\n                <DesktopWrapper>\n                    <div className='cfd-dashboard__download-container-links--desktop'>\n                        {platform === CFD_PLATFORMS.DXTRADE && (\n                            <DxtradeDesktopDownload active_index={active_index} dxtrade_tokens={dxtrade_tokens} />\n                        )}\n                        {platform === CFD_PLATFORMS.MT5 && <MT5DesktopDownload />}\n                    </div>\n                </DesktopWrapper>\n\n                <div className='cfd-dashboard__download-container-links--mobile'>\n                    <MobileDownload is_dark_mode_on={is_dark_mode_on} platform={platform} />\n                </div>\n            </div>\n\n            {platform === CFD_PLATFORMS.DXTRADE && <QRCodeBox platform={platform} />}\n        </div>\n    </React.Fragment>\n);\n\nexport default CFDDownloadContainer;\n","import React from 'react';\nimport { Dialog, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nconst SwitchToRealAccountModal = observer(() => {\n    const { ui } = useStore();\n\n    const {\n        is_switch_to_deriv_account_modal_visible: is_open,\n        openSwitchToRealAccountModal: onClose,\n        disableApp,\n        enableApp,\n    } = ui;\n\n    return (\n        <Dialog\n            className='switch-to-real-account-modal'\n            confirm_button_text={localize('Ok')}\n            onConfirm={onClose}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_closed_on_confirm\n            is_visible={is_open}\n        >\n            <Icon icon={'IcPoaLock'} size={60} />\n            <Text\n                className='da-icon-with-message__text'\n                as='p'\n                size={isMobile() ? 'xxs' : 'xs'}\n                color='general'\n                line_height='m'\n                align='center'\n            >\n                {localize('Switch to your real account to create a Deriv MT5 account')}\n            </Text>\n        </Dialog>\n    );\n});\n\nexport default SwitchToRealAccountModal;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, Money, Button, Text, DesktopWrapper, MobileWrapper, Popover } from '@deriv/components';\nimport { isMobile, mobileOSDetect, getCFDPlatformLabel, CFD_PLATFORMS, isDesktop } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { CFDAccountCopy } from './cfd-account-copy';\nimport {\n    getDXTradeWebTerminalLink,\n    getDerivEzWebTerminalLink,\n    getPlatformDXTradeDownloadLink,\n} from '../Helpers/constants';\nimport {\n    TAccountIconValues,\n    TSpecBoxProps,\n    TPasswordBoxProps,\n    TCFDAccountCardActionProps,\n    TCFDAccountCard,\n    TTradingPlatformAccounts,\n    TTradingPlatformAvailableAccount,\n} from './props.types';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { useStore, observer } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { FormikValues } from 'formik';\n\nconst account_icons: { [key: string]: TAccountIconValues } = {\n    mt5: {\n        synthetic: 'IcMt5SyntheticPlatform',\n        financial: 'IcMt5FinancialPlatform',\n        financial_stp: 'IcMt5FinancialStpPlatform',\n        cfd: 'IcMt5CfdPlatform',\n        all: 'IcMt5SwapFreePlatform',\n    },\n    // TODO: Line 30, 31 and 32 should be removed after real released.\n    dxtrade: {\n        synthetic: 'IcDxtradeSyntheticPlatform',\n        financial: 'IcDxtradeFinancialPlatform',\n        cfd: 'IcMt5CfdPlatform',\n        all: 'IcDxtradeDerivxPlatform',\n    },\n};\n\nconst AddAccountButton = React.forwardRef<HTMLDivElement, { onSelectAccount: () => void; is_disabled?: boolean }>(\n    ({ onSelectAccount, is_disabled }, ref) => {\n        return (\n            <div\n                onClick={is_disabled ? () => undefined : onSelectAccount}\n                className={classNames('cfd-account-card__add-server', {\n                    'cfd-account-card__add-server--disabled': is_disabled,\n                })}\n                ref={ref}\n            >\n                <span className='cfd-account-card__add-server--icon'>+</span>\n                <Localize i18n_default_text='Add account' />\n            </div>\n        );\n    }\n);\n\nAddAccountButton.displayName = 'AddAccountButton';\n\nconst SpecBox = ({ value, is_bold }: TSpecBoxProps) => (\n    <div className='cfd-account-card__spec-box'>\n        <Text size='xs' weight={is_bold ? 'bold' : ''} className='cfd-account-card__spec-text'>\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-account-card__spec-copy' />\n    </div>\n);\n\nconst PasswordBox = ({ platform, onClick }: TPasswordBoxProps) => (\n    <div className='cfd-account-card__password-box'>\n        <div className='cfd-account-card__password-text'>\n            <Popover\n                alignment='right'\n                message={localize(\n                    'Use these credentials to log in to your {{platform}} account on the website and mobile apps.',\n                    {\n                        platform: getCFDPlatformLabel(platform),\n                    }\n                )}\n                classNameBubble='cfd-account-card__password-tooltip'\n            >\n                <Text size='xs'>•••••••••••••••</Text>\n            </Popover>\n        </div>\n        <Popover alignment='bottom' message={localize('Change Password')}>\n            <Button\n                className='cfd-account-card__password-action'\n                transparent\n                onClick={onClick}\n                icon={\n                    <Icon\n                        icon='IcEdit'\n                        className='da-article__learn-more-icon'\n                        custom_color='var(--text-less-prominent)'\n                    />\n                }\n            />\n        </Popover>\n    </div>\n);\n\nconst CFDAccountCardAction = ({\n    button_label,\n    handleClickSwitchAccount,\n    has_real_account,\n    is_accounts_switcher_on,\n    is_button_primary,\n    is_disabled,\n    is_virtual,\n    onSelectAccount,\n    type,\n    platform,\n    title,\n    real_account_creation_unlock_date,\n    setShouldShowCooldownModal,\n}: TCFDAccountCardActionProps) => {\n    if (\n        is_virtual &&\n        type.category === 'real' &&\n        typeof handleClickSwitchAccount === 'function' &&\n        (platform === CFD_PLATFORMS.MT5 ? has_real_account && type.type === 'financial_stp' : true)\n    ) {\n        return (\n            <div className='cfd-account-card__action-wrapper'>\n                <Localize\n                    i18n_default_text='<0>Switch to your real account</0><1> to create a {{platform}} {{account_title}} account.</1>'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                        account_title: title === 'Deriv X' ? '' : title,\n                    }}\n                    components={[\n                        <a\n                            className={classNames('cfd-account-card__action-wrapper__link link link--orange', {\n                                'cfd-account-card__action-wrapper__link--disabled': is_accounts_switcher_on,\n                            })}\n                            key={0}\n                            onClick={handleClickSwitchAccount}\n                        />,\n                        <Text key={1} line_height='s' size='xxs' />,\n                    ]}\n                />\n            </div>\n        );\n    }\n    const lbl_add_account =\n        type.category === 'real' ? (\n            <Localize i18n_default_text='Add real account' />\n        ) : (\n            <Localize i18n_default_text='Add demo account' />\n        );\n    const cta_label = button_label || lbl_add_account;\n    return (\n        <Button\n            className='cfd-account-card__account-selection'\n            onClick={() => {\n                if (real_account_creation_unlock_date) {\n                    setShouldShowCooldownModal(true);\n                } else {\n                    onSelectAccount();\n                }\n            }}\n            type='button'\n            is_disabled={is_disabled}\n            primary={is_button_primary}\n            secondary={!is_button_primary}\n            large\n        >\n            {cta_label}\n        </Button>\n    );\n};\n\nconst CFDAccountCardComponent = observer(\n    ({\n        button_label,\n        commission_message,\n        descriptor,\n        existing_accounts_data,\n        has_banner,\n        has_cfd_account_error,\n        has_real_account,\n        is_accounts_switcher_on,\n        is_button_primary,\n        is_disabled,\n        is_logged_in,\n        is_virtual,\n        onClickFund,\n        onPasswordManager,\n        onSelectAccount,\n        platform,\n        specs,\n        title,\n        toggleAccountsDialog,\n        toggleShouldShowRealAccountsList,\n        type,\n    }: TCFDAccountCard) => {\n        const { ui, common, traders_hub, client } = useStore();\n\n        const { setIsAcuityModalOpen, setShouldShowCooldownModal } = ui;\n        const { setAppstorePlatform } = common;\n        const { show_eu_related_content } = traders_hub;\n        const {\n            updateAccountStatus,\n            isEligibleForMoreRealMt5,\n            isEligibleForMoreDemoMt5Svg,\n            real_account_creation_unlock_date,\n        } = client;\n\n        const {\n            dxtrade_tokens,\n            derivez_tokens,\n            setAccountType,\n            setJurisdictionSelectedShortcode,\n            setMT5TradeAccount,\n            toggleCFDVerificationModal,\n            toggleMT5TradeModal,\n        } = useCfdStore();\n\n        const existing_data = existing_accounts_data?.length ? existing_accounts_data?.[0] : existing_accounts_data;\n\n        const should_show_extra_add_account_button =\n            is_logged_in &&\n            !show_eu_related_content &&\n            platform === CFD_PLATFORMS.MT5 &&\n            (type.category === 'demo'\n                ? isEligibleForMoreDemoMt5Svg(\n                      type.type as TTradingPlatformAvailableAccount['market_type'] | 'synthetic'\n                  ) && !!existing_data\n                : isEligibleForMoreRealMt5(\n                      type.type as TTradingPlatformAvailableAccount['market_type'] | 'synthetic'\n                  ) && !!existing_data);\n\n        const platform_icon = show_eu_related_content && platform === CFD_PLATFORMS.MT5 ? 'cfd' : type.type;\n\n        const icon: React.ReactNode | null = type.type ? (\n            <Icon icon={account_icons[type.platform][platform_icon]} size={64} />\n        ) : null;\n        const has_popular_banner: boolean = type.type === 'synthetic';\n        const has_demo_banner: boolean = type.category === 'demo';\n        const has_server_banner =\n            is_logged_in &&\n            existing_data &&\n            type.category === 'real' &&\n            type.type === 'synthetic' &&\n            (existing_data as DetailsOfEachMT5Loginid)?.server_info;\n\n        const ref = React.useRef<HTMLDivElement | null>(null);\n        const wrapper_ref = React.useRef<HTMLDivElement | null>(null);\n        const button_ref = React.useRef<HTMLDivElement | null>(null);\n\n        const handleClickSwitchAccount: () => void = () => {\n            toggleShouldShowRealAccountsList?.(true);\n            toggleAccountsDialog?.(true);\n        };\n\n        const getDxtradeDownloadLink: () => string = () => {\n            const os = mobileOSDetect();\n            if (os === 'iOS') {\n                return getPlatformDXTradeDownloadLink('ios');\n            }\n            return getPlatformDXTradeDownloadLink('android');\n        };\n\n        const checkMultipleSvgAcc = () => {\n            const all_svg_acc: DetailsOfEachMT5Loginid[] = [];\n            existing_accounts_data?.map(acc => {\n                if (acc.landing_company_short === 'svg') {\n                    if (all_svg_acc.length) {\n                        all_svg_acc.forEach(svg_acc => {\n                            if (svg_acc.server !== acc.server) all_svg_acc.push(acc);\n                            return all_svg_acc;\n                        });\n                    } else {\n                        all_svg_acc.push(acc);\n                    }\n                }\n            });\n            return all_svg_acc;\n        };\n\n        const getServerName: (value: DetailsOfEachMT5Loginid) => string = React.useCallback(server => {\n            if (server) {\n                const server_region = (server as DetailsOfEachMT5Loginid).server_info?.geolocation?.region;\n                if (server_region) {\n                    return `${server_region} ${\n                        (server as DetailsOfEachMT5Loginid)?.server_info?.geolocation?.sequence === 1\n                            ? ''\n                            : (server as DetailsOfEachMT5Loginid)?.server_info?.geolocation?.sequence\n                    }`;\n                }\n            }\n            return '';\n        }, []);\n\n        const getBannerStatus = (account: DetailsOfEachMT5Loginid) => {\n            const { landing_company_short, status } = account;\n            if (landing_company_short && status && ['proof_failed', 'verification_pending'].includes(status)) {\n                const should_show_pending_button = status === 'verification_pending';\n                return (\n                    <Button\n                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                        type='button'\n                        onClick={() => {\n                            setAccountType({\n                                category: type.category,\n                                type: type.type,\n                            });\n                            setJurisdictionSelectedShortcode(landing_company_short);\n                            updateAccountStatus();\n                            toggleCFDVerificationModal();\n                        }}\n                        primary\n                        large\n                        disabled={should_show_pending_button}\n                    >\n                        {should_show_pending_button ? (\n                            <Localize i18n_default_text='Pending verification' />\n                        ) : (\n                            <Localize i18n_default_text='Resubmit document' />\n                        )}\n                    </Button>\n                );\n            }\n            return null;\n        };\n\n        const is_web_terminal_unsupported = isMobile() && platform === CFD_PLATFORMS.DXTRADE;\n        const tbody_content = platform === CFD_PLATFORMS.DXTRADE && (\n            <React.Fragment>\n                <tr className='cfd-account-card__login-specs-table-row'>\n                    <td className='cfd-account-card__login-specs-table-attribute'>\n                        <div className='cfd-account-card--paragraph'>{localize('Username')}</div>\n                    </td>\n                    <td className='cfd-account-card__login-specs-table-data'>\n                        <div className='cfd-account-card--paragraph'>\n                            <SpecBox value={existing_data?.login} is_bold />\n                        </div>\n                    </td>\n                </tr>\n            </React.Fragment>\n        );\n\n        return (\n            <div ref={wrapper_ref} className='cfd-account-card__wrapper'>\n                <div\n                    className={classNames('cfd-account-card', { 'cfd-account-card__logged-out': !is_logged_in })}\n                    ref={ref}\n                >\n                    {has_popular_banner && (\n                        <div className='cfd-account-card__banner'>\n                            <Localize i18n_default_text='Most popular' />\n                        </div>\n                    )}\n                    {has_demo_banner && (\n                        <div className='cfd-account-card__banner cfd-account-card__banner--demo'>\n                            <Localize i18n_default_text='DEMO' />\n                        </div>\n                    )}\n                    <div\n                        className={classNames('cfd-account-card__type', {\n                            'cfd-account-card__type--has-banner': has_banner || has_popular_banner || has_server_banner,\n                        })}\n                        id={`${platform === CFD_PLATFORMS.DXTRADE ? CFD_PLATFORMS.DXTRADE : CFD_PLATFORMS.MT5}_${\n                            type.category\n                        }_${type.type}`}\n                    >\n                        {icon}\n                        <div className='cfd-account-card__type--description'>\n                            <Text size='xxl' className='cfd-account-card--heading'>\n                                {title}\n                            </Text>\n                            {platform === CFD_PLATFORMS.DXTRADE ? (\n                                (!existing_data || !is_logged_in) && (\n                                    <p className='cfd-account-card--paragraph'>{descriptor}</p>\n                                )\n                            ) : (\n                                <p className='cfd-account-card--paragraph'>{descriptor}</p>\n                            )}\n                            {existing_data?.display_balance && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                    <Money\n                                        amount={existing_data.display_balance}\n                                        currency={existing_data.currency}\n                                        has_sign={existing_data.balance ? existing_data.balance < 0 : false}\n                                        show_currency\n                                    />\n                                </Text>\n                            )}\n                            {(existing_data as TTradingPlatformAccounts)?.display_login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.DXTRADE && (\n                                    <Text color='less-prominent' size='xxxs' line_height='s'>\n                                        {(existing_data as TTradingPlatformAccounts)?.display_login}\n                                    </Text>\n                                )}\n                        </div>\n                    </div>\n                    {platform === CFD_PLATFORMS.MT5 && isDesktop() && is_logged_in && (\n                        <div className='cfd-account-card__acuity-container'>\n                            {type.type === 'financial' && (\n                                <Button\n                                    onClick={() => setIsAcuityModalOpen(true)}\n                                    className='cfd-account-card__acuity-banner'\n                                    type='button'\n                                    transparent\n                                >\n                                    <div className='cfd-account-card__acuity-banner--wrapper'>\n                                        <Icon icon='icMt5Acuity' />\n                                        <Text as='p' size='xxs' weight='bold' color='prominent'>\n                                            <Localize i18n_default_text='Get Acuity trading tools' />\n                                        </Text>\n                                        <Icon icon='IcAddOutline' color='secondary' />\n                                    </div>\n                                </Button>\n                            )}\n                        </div>\n                    )}\n                    {existing_data && <div className='cfd-account-card__divider' />}\n\n                    <div className='cfd-account-card__cta' style={!existing_data?.login ? { marginTop: 'auto' } : {}}>\n                        <div className='cfd-account-card__cta-wrapper'>\n                            {platform === CFD_PLATFORMS.DXTRADE && (!existing_data?.login || !is_logged_in) && (\n                                <div className='cfd-account-card__specs'>\n                                    <table className='cfd-account-card__specs-table'>\n                                        <tbody>\n                                            {typeof specs !== 'undefined' &&\n                                                Object.keys(specs).map((spec_attribute, idx) => (\n                                                    <tr key={idx} className='cfd-account-card__specs-table-row'>\n                                                        <td className='cfd-account-card__specs-table-attribute'>\n                                                            <p className='cfd-account-card--paragraph'>\n                                                                {specs[spec_attribute].key()}\n                                                            </p>\n                                                        </td>\n                                                        <td className='cfd-account-card__specs-table-data'>\n                                                            <p className='cfd-account-card--paragraph'>\n                                                                {specs[spec_attribute].value()}\n                                                            </p>\n                                                        </td>\n                                                    </tr>\n                                                ))}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            )}\n                            {existing_data?.login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.MT5 &&\n                                type.category === 'demo' &&\n                                existing_accounts_data?.length &&\n                                existing_accounts_data?.map((acc: FormikValues, index: number) => (\n                                    <div className='cfd-account-card__item' key={index}>\n                                        {acc?.display_balance &&\n                                            is_logged_in &&\n                                            acc.landing_company_short === 'labuan' && (\n                                                <div className='cfd-account-card__item--banner'>\n                                                    <Localize i18n_default_text={'Labuan'} />\n                                                </div>\n                                            )}\n                                        {(acc as TTradingPlatformAccounts)?.display_login && (\n                                            <div\n                                                className={`cfd-account-card--login-id${\n                                                    acc.landing_company_short === 'labuan' ? '' : '-demo'\n                                                }`}\n                                            >\n                                                <Text size='xxxs' weight='bold'>\n                                                    {(acc as TTradingPlatformAccounts)?.display_login}\n                                                </Text>\n                                            </div>\n                                        )}\n                                        {acc?.display_balance && is_logged_in && (\n                                            <div className='cfd-account-card__balance'>\n                                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                    <Money\n                                                        amount={acc.display_balance}\n                                                        currency={acc.currency}\n                                                        has_sign={!!acc.balance && acc.balance < 0}\n                                                        show_currency\n                                                    />\n                                                </Text>\n                                            </div>\n                                        )}\n                                        <div className='cfd-account-card__manage--mt5'>\n                                            {acc && is_logged_in && (\n                                                <Button onClick={() => onClickFund(acc)} type='button' secondary>\n                                                    <Localize i18n_default_text='Top up' />\n                                                </Button>\n                                            )}\n                                            {acc && is_logged_in && !is_web_terminal_unsupported && (\n                                                <Button\n                                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                    type='button'\n                                                    onClick={() => {\n                                                        setAppstorePlatform(platform);\n                                                        toggleMT5TradeModal();\n                                                        setMT5TradeAccount(acc);\n                                                    }}\n                                                    primary\n                                                    large\n                                                >\n                                                    <Localize i18n_default_text='Trade' />\n                                                </Button>\n                                            )}\n                                        </div>\n                                    </div>\n                                ))}\n                            {existing_data?.login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.MT5 &&\n                                !existing_accounts_data?.length &&\n                                type.category === 'demo' && (\n                                    <div className='cfd-account-card__item'>\n                                        {(existing_data as TTradingPlatformAccounts)?.display_login && (\n                                            <div className='cfd-account-card--login-id-demo'>\n                                                <Text size='xxxs' weight='bold'>\n                                                    {(existing_data as TTradingPlatformAccounts)?.display_login}\n                                                </Text>\n                                            </div>\n                                        )}\n                                        {existing_data?.display_balance && is_logged_in && (\n                                            <div className='cfd-account-card__balance'>\n                                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                    <Money\n                                                        amount={existing_data.display_balance}\n                                                        currency={existing_data.currency}\n                                                        has_sign={!!existing_data.balance && existing_data.balance < 0}\n                                                        show_currency\n                                                    />\n                                                </Text>\n                                            </div>\n                                        )}\n                                        <div className='cfd-account-card__manage--mt5'>\n                                            {existing_data && is_logged_in && (\n                                                <Button\n                                                    onClick={() => onClickFund(existing_data)}\n                                                    type='button'\n                                                    secondary\n                                                >\n                                                    <Localize i18n_default_text='Top up' />\n                                                </Button>\n                                            )}\n                                            {existing_data && is_logged_in && !is_web_terminal_unsupported && (\n                                                <Button\n                                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                    type='button'\n                                                    onClick={() => {\n                                                        setAppstorePlatform(platform);\n                                                        toggleMT5TradeModal();\n                                                        setMT5TradeAccount(existing_data);\n                                                    }}\n                                                    primary\n                                                    large\n                                                >\n                                                    <Localize i18n_default_text='Trade' />\n                                                </Button>\n                                            )}\n                                        </div>\n                                    </div>\n                                )}\n                            {existing_data?.login &&\n                                is_logged_in &&\n                                platform === CFD_PLATFORMS.MT5 &&\n                                type.category === 'real' &&\n                                existing_accounts_data?.map((acc: FormikValues, index: number) => (\n                                    <div className='cfd-account-card__item' key={index}>\n                                        {existing_data?.display_balance && is_logged_in && !show_eu_related_content && (\n                                            <div className='cfd-account-card__item--banner'>\n                                                <Localize\n                                                    i18n_default_text={\n                                                        acc.landing_company_short &&\n                                                        !['svg', 'bvi'].includes(acc?.landing_company_short)\n                                                            ? acc.landing_company_short?.charAt(0).toUpperCase() +\n                                                              acc.landing_company_short.slice(1)\n                                                            : acc.landing_company_short?.toUpperCase()\n                                                    }\n                                                />\n                                            </div>\n                                        )}\n                                        {(acc as TTradingPlatformAccounts)?.display_login && (\n                                            <div className='cfd-account-card--login-id'>\n                                                <Text size='xxxs' weight='bold'>\n                                                    {(acc as TTradingPlatformAccounts)?.display_login}\n                                                </Text>\n                                            </div>\n                                        )}\n                                        {existing_data?.display_balance && is_logged_in && (\n                                            <div className='cfd-account-card__balance'>\n                                                <Text size='xxl' className='cfd-account-card__balance--value'>\n                                                    <Money\n                                                        amount={acc.display_balance}\n                                                        currency={acc.currency}\n                                                        has_sign={!!acc.balance && acc.balance < 0}\n                                                        show_currency\n                                                    />\n                                                </Text>\n                                                {checkMultipleSvgAcc()?.length > 1 &&\n                                                    acc.landing_company_short === 'svg' && (\n                                                        <Text\n                                                            className='cfd-account-card__balance--region'\n                                                            color='colored-background'\n                                                            size='xxxs'\n                                                            weight='bold'\n                                                        >\n                                                            {getServerName(acc)}\n                                                        </Text>\n                                                    )}\n                                            </div>\n                                        )}\n                                        <div className='cfd-account-card__manage--mt5'>\n                                            {getBannerStatus(acc) ?? (\n                                                <React.Fragment>\n                                                    {existing_data && is_logged_in && (\n                                                        <Button\n                                                            onClick={() => {\n                                                                const selected_account_data =\n                                                                    existing_accounts_data?.find(\n                                                                        data =>\n                                                                            data.landing_company_short ===\n                                                                                acc.landing_company_short &&\n                                                                            data.login === acc.login\n                                                                    );\n\n                                                                onClickFund(\n                                                                    selected_account_data as DetailsOfEachMT5Loginid\n                                                                );\n                                                            }}\n                                                            type='button'\n                                                            secondary\n                                                        >\n                                                            <Localize i18n_default_text='Top up' />\n                                                        </Button>\n                                                    )}\n                                                    {existing_data && is_logged_in && !is_web_terminal_unsupported && (\n                                                        <Button\n                                                            className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                                            type='button'\n                                                            onClick={() => {\n                                                                const selected_account_data =\n                                                                    existing_accounts_data?.find(\n                                                                        data =>\n                                                                            data.landing_company_short ===\n                                                                                acc.landing_company_short &&\n                                                                            data.login === acc.login\n                                                                    );\n                                                                setAppstorePlatform(platform);\n                                                                toggleMT5TradeModal();\n                                                                setMT5TradeAccount(selected_account_data);\n                                                            }}\n                                                            primary\n                                                            large\n                                                        >\n                                                            <Localize i18n_default_text='Trade' />\n                                                        </Button>\n                                                    )}\n                                                </React.Fragment>\n                                            )}\n                                        </div>\n                                    </div>\n                                ))}\n                            {existing_data?.login && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                                <React.Fragment>\n                                    <div className='cfd-account-card__login-specs'>\n                                        <table className='cfd-account-card__login-specs-table'>\n                                            <tbody>\n                                                {tbody_content}\n                                                <tr className='cfd-account-card__login-specs-table-row cfd-account-card__login-specs-table-row--account-id'>\n                                                    <td className='cfd-account-card__login-specs-table-attribute'>\n                                                        <div className='cfd-account-card--paragraph'>\n                                                            {localize('Password')}\n                                                        </div>\n                                                    </td>\n                                                    <td className='cfd-account-card__login-specs-table-data'>\n                                                        <div className='cfd-account-card--paragraph'>\n                                                            <PasswordBox\n                                                                platform={platform}\n                                                                onClick={() => {\n                                                                    onPasswordManager(\n                                                                        existing_data?.login,\n                                                                        title,\n                                                                        type.category,\n                                                                        type.type,\n                                                                        (existing_data as DetailsOfEachMT5Loginid)\n                                                                            ?.server\n                                                                    );\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </React.Fragment>\n                            )}\n                            {((!existing_data && commission_message) || !is_logged_in) &&\n                                platform === CFD_PLATFORMS.DXTRADE && (\n                                    <div className='cfd-account-card__commission'>\n                                        <Text as='p' color='general' size='xs' styles={{ margin: '1.6rem auto' }}>\n                                            {commission_message}\n                                        </Text>\n                                    </div>\n                                )}\n                            {existing_data && is_logged_in && platform === CFD_PLATFORMS.DXTRADE && (\n                                <div className='cfd-account-card__manage'>\n                                    <Button onClick={() => onClickFund(existing_data)} type='button' secondary>\n                                        {type.category === 'real' && <Localize i18n_default_text='Fund transfer' />}\n                                        {type.category === 'demo' && <Localize i18n_default_text='Top up' />}\n                                    </Button>\n                                </div>\n                            )}\n                            {existing_data &&\n                                is_logged_in &&\n                                !is_web_terminal_unsupported &&\n                                platform === CFD_PLATFORMS.DXTRADE && (\n                                    <a\n                                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                        type='button'\n                                        href={getDXTradeWebTerminalLink(\n                                            type.category,\n                                            dxtrade_tokens[type.category as 'demo' | 'real']\n                                        )}\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                    >\n                                        <Localize i18n_default_text='Trade on web terminal' />\n                                    </a>\n                                )}\n                            {existing_data && is_logged_in && is_web_terminal_unsupported && (\n                                <a\n                                    className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                    type='button'\n                                    href={getDxtradeDownloadLink()}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                >\n                                    <Localize i18n_default_text='Download the app' />\n                                </a>\n                            )}\n                            {existing_data &&\n                                is_logged_in &&\n                                !is_web_terminal_unsupported &&\n                                platform === CFD_PLATFORMS.DERIVEZ && (\n                                    <a\n                                        className='dc-btn cfd-account-card__account-selection cfd-account-card__account-selection--primary'\n                                        type='button'\n                                        href={getDerivEzWebTerminalLink(\n                                            type.category,\n                                            derivez_tokens[type.category as 'demo' | 'real']\n                                        )}\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                    >\n                                        <Localize i18n_default_text='Trade on web terminal' />\n                                    </a>\n                                )}\n                            {!existing_data && is_logged_in && (\n                                <CFDAccountCardAction\n                                    button_label={button_label}\n                                    handleClickSwitchAccount={handleClickSwitchAccount}\n                                    has_real_account={has_real_account}\n                                    is_accounts_switcher_on={is_accounts_switcher_on}\n                                    is_button_primary={is_button_primary}\n                                    is_disabled={is_disabled}\n                                    is_virtual={is_virtual}\n                                    onSelectAccount={onSelectAccount}\n                                    type={type}\n                                    platform={platform}\n                                    title={title}\n                                    real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                    setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                />\n                            )}\n                        </div>\n                    </div>\n                    <React.Fragment>\n                        {should_show_extra_add_account_button && (\n                            <MobileWrapper>\n                                <AddAccountButton\n                                    ref={button_ref}\n                                    onSelectAccount={onSelectAccount}\n                                    is_disabled={has_cfd_account_error}\n                                />\n                            </MobileWrapper>\n                        )}\n                    </React.Fragment>\n                </div>\n                <DesktopWrapper>\n                    <CSSTransition\n                        in={should_show_extra_add_account_button}\n                        timeout={0}\n                        classNames='cfd-account-card__add-server'\n                        unmountOnExit\n                    >\n                        <AddAccountButton\n                            ref={button_ref}\n                            onSelectAccount={onSelectAccount}\n                            is_disabled={has_cfd_account_error}\n                        />\n                    </CSSTransition>\n                </DesktopWrapper>\n            </div>\n        );\n    }\n);\n\nconst CFDAccountCard = CFDAccountCardComponent;\n\nexport { CFDAccountCard };\n","import { localize } from '@deriv/translations';\n\ntype TMT5 = {\n    real_synthetic_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    eu_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_stp_specs: Record<string, { key: () => string; value: () => string }>;\n    au_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    demo_financial_stp_specs: Record<string, { key: () => string; value: () => string }>;\n};\n\ntype TDXTrade = {\n    demo_all_specs: Record<string, { key: () => string; value: () => string }>;\n    real_all_specs: Record<string, { key: () => string; value: () => string }>;\n    real_synthetic_specs: Record<string, { key: () => string; value: () => string }>;\n    real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    eu_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    au_real_financial_specs: Record<string, { key: () => string; value: () => string }>;\n    demo_financial_stp_specs?: Record<string, { key: () => string; value: () => string }>;\n    real_financial_stp_specs?: Record<string, { key: () => string; value: () => string }>;\n};\n\nexport type TSpecifications = {\n    mt5: TMT5;\n    dxtrade: TDXTrade;\n};\n\nconst mt5 = {\n    real_synthetic_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('20+') },\n    },\n    real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('150+') },\n    },\n    real_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('40+') },\n    },\n    eu_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('50+') },\n    },\n    real_financial_stp_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:100') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('70+') },\n    },\n    au_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('100+') },\n    },\n    demo_financial_stp_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:100') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('70+') },\n    },\n};\n\n// TODO: Edit this after real accounts release\nconst dxtrade = {\n    demo_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('110+') },\n    },\n    real_all_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('110+') },\n    },\n    real_synthetic_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('20+') },\n    },\n    real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:1000') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n    eu_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n    au_real_financial_specs: {\n        leverage: { key: () => localize('Leverage'), value: () => localize('Up to 1:30') },\n        'margin-call': { key: () => localize('Margin call'), value: () => localize('100%') },\n        'stop-out-level': { key: () => localize('Stop out level'), value: () => localize('50%') },\n        'number-of-assets': { key: () => localize('Number of assets'), value: () => localize('90+') },\n    },\n};\n\nconst specifications = {\n    mt5,\n    dxtrade,\n};\n\nexport default specifications;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport { CFDAccountCard } from './cfd-account-card';\nimport specifications from '../Constants/cfd-specifications';\nimport Loading from '../templates/_common/components/loading';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\nimport { TCFDPasswordReset } from '../Containers/props.types';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCFDDemoAccountDisplayProps = {\n    has_cfd_account_error: boolean;\n    standpoint: TStandPoint;\n    is_loading: boolean;\n    is_logged_in: boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    current_list: Record<\n        string,\n        DetailsOfEachMT5Loginid & {\n            enabled: number;\n        }\n    >;\n    openPasswordManager: (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => void;\n    landing_companies?: LandingCompany;\n};\n\nconst CFDDxtradeDemoAccountDisplay = ({\n    has_cfd_account_error,\n    standpoint,\n    is_loading,\n    is_logged_in,\n    onSelectAccount,\n    openAccountTransfer,\n    platform,\n    current_list,\n    openPasswordManager,\n}: TCFDDemoAccountDisplayProps) => {\n    const existing_accounts_data = (acc_type: 'dxtrade') => {\n        const acc = Object.keys(current_list).some(\n            key => key.startsWith(`${platform}.demo.${acc_type}`) && current_list[key].enabled === 1\n        )\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(`${platform}.demo.${acc_type}`))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    const current_list_index = Object.keys(current_list).find(key => key.startsWith(`${platform}.demo.dxtrade`)) || '';\n\n    return (\n        <div className='cfd-demo-accounts-display' data-testid='dt_cfd_demo_accounts_display'>\n            {is_loading ? (\n                <Loading />\n            ) : (\n                <CFDAccountCard\n                    key='cfd'\n                    title={localize('Deriv X')}\n                    type={{\n                        category: 'demo',\n                        platform: 'dxtrade',\n                        type: 'all',\n                    }}\n                    is_disabled={has_cfd_account_error || standpoint.malta}\n                    is_logged_in={is_logged_in}\n                    existing_accounts_data={existing_accounts_data('dxtrade')}\n                    commission_message={localize('No commission')}\n                    onSelectAccount={() =>\n                        onSelectAccount({\n                            category: 'demo',\n                            platform: 'dxtrade',\n                            type: 'all',\n                        })\n                    }\n                    onPasswordManager={openPasswordManager}\n                    onClickFund={() =>\n                        openAccountTransfer(current_list[current_list_index], {\n                            category: 'demo',\n                            type: 'all',\n                        })\n                    }\n                    platform={platform}\n                    descriptor={localize(\n                        'Trade CFDs on forex, derived indices, cryptocurrencies, and commodities with high leverage.'\n                    )}\n                    specs={specifications.dxtrade.demo_all_specs}\n                    has_banner\n                />\n            )}\n        </div>\n    );\n};\n\nexport default CFDDxtradeDemoAccountDisplay;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport { CFDAccountCard } from './cfd-account-card';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport specifications, { TSpecifications } from '../Constants/cfd-specifications';\nimport Loading from '../templates/_common/components/loading';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\nimport { TCFDPasswordReset } from '../Containers/props.types';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCFDDemoAccountDisplayProps = {\n    is_eu: boolean;\n    is_eu_country: boolean;\n    has_maltainvest_account: boolean;\n    has_cfd_account_error: boolean;\n    openAccountNeededModal: (target: string, target_label: string, target_dmt5_label: string) => void;\n    standpoint: TStandPoint;\n    is_loading: boolean;\n    is_logged_in: boolean;\n    isSyntheticCardVisible: (account_category: string) => boolean;\n    isFinancialCardVisible: () => boolean;\n    isSwapFreeCardVisible: () => boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    current_list: Record<string, DetailsOfEachMT5Loginid & DetailsOfEachMT5Loginid[]>;\n    openPasswordManager: (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => void;\n    residence: string;\n    landing_companies?: LandingCompany;\n    toggleMT5TradeModal: () => void;\n    show_eu_related_content: boolean;\n};\n\nconst CFDMT5DemoAccountDisplay = ({\n    is_eu,\n    is_eu_country,\n    has_maltainvest_account,\n    has_cfd_account_error,\n    openAccountNeededModal,\n    standpoint,\n    is_loading,\n    is_logged_in,\n    isSyntheticCardVisible,\n    isFinancialCardVisible,\n    isSwapFreeCardVisible,\n    onSelectAccount,\n    openAccountTransfer,\n    platform,\n    current_list,\n    openPasswordManager,\n    residence,\n    show_eu_related_content,\n}: TCFDDemoAccountDisplayProps) => {\n    const openAccountTransferList = (type: DetailsOfEachMT5Loginid['market_type']) => {\n        return Object.keys(current_list).find((key: string) => key.startsWith(`${platform}.demo.${type}`)) || '';\n    };\n\n    const openCFDAccount = () => {\n        if (is_eu && !has_maltainvest_account && standpoint.iom) {\n            openAccountNeededModal('maltainvest', localize('Deriv Multipliers'), localize('demo CFDs'));\n        } else {\n            onSelectAccount({\n                category: 'demo',\n                type: 'financial',\n                platform,\n            });\n        }\n    };\n\n    const financial_accounts_data = () => {\n        const acc = Object.keys(current_list).some(key => key.startsWith(`${platform}.demo.financial`))\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(`${platform}.demo.financial`))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    const financial_specs = React.useMemo(() => {\n        const should_show_eu = (is_logged_in && is_eu) || (!is_logged_in && is_eu_country);\n        if (residence === 'au') {\n            return specifications[platform as keyof TSpecifications].au_real_financial_specs;\n        }\n        if (should_show_eu) {\n            return specifications[platform as keyof TSpecifications].eu_real_financial_specs;\n        }\n        return specifications[platform as keyof TSpecifications].real_financial_specs;\n    }, [is_logged_in, is_eu, is_eu_country, residence, platform]);\n\n    return (\n        <React.Fragment>\n            {is_loading ? (\n                <Loading />\n            ) : (\n                <div className='cfd-demo-accounts-display' data-testid='dt_cfd_demo_accounts_display'>\n                    {isSyntheticCardVisible('demo') && (\n                        <CFDAccountCard\n                            title={localize('Derived')}\n                            type={{\n                                category: 'demo',\n                                type: 'synthetic',\n                                platform,\n                            }}\n                            is_disabled={has_cfd_account_error || standpoint.malta}\n                            is_logged_in={is_logged_in}\n                            existing_accounts_data={current_list[openAccountTransferList('synthetic')]}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={() =>\n                                onSelectAccount({\n                                    category: 'demo',\n                                    type: 'synthetic',\n                                    platform,\n                                })\n                            }\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('synthetic')], {\n                                    category: 'demo',\n                                    type: 'synthetic',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={localize('Trade CFDs on our synthetics, baskets, and derived FX.')}\n                            specs={specifications[platform as keyof TSpecifications].real_synthetic_specs}\n                            has_banner\n                        />\n                    )}\n\n                    {isFinancialCardVisible() && (\n                        <CFDAccountCard\n                            title={show_eu_related_content ? localize('CFDs') : localize('Financial')}\n                            is_disabled={has_cfd_account_error}\n                            is_logged_in={is_logged_in}\n                            type={{\n                                category: 'demo',\n                                type: 'financial',\n                                platform,\n                            }}\n                            existing_accounts_data={financial_accounts_data()}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={openCFDAccount}\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('financial')], {\n                                    category: 'demo',\n                                    type: 'financial',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={general_messages.getFinancialAccountDescriptor(\n                                platform,\n                                show_eu_related_content\n                            )}\n                            specs={financial_specs}\n                            has_banner\n                        />\n                    )}\n\n                    {isSwapFreeCardVisible() && (\n                        <CFDAccountCard\n                            title={localize('Swap-Free')}\n                            type={{\n                                category: 'demo',\n                                type: 'all',\n                                platform,\n                            }}\n                            is_disabled={has_cfd_account_error || standpoint.malta}\n                            is_logged_in={is_logged_in}\n                            existing_accounts_data={current_list[openAccountTransferList('all')]}\n                            commission_message={localize('No commission')}\n                            onSelectAccount={() =>\n                                onSelectAccount({\n                                    category: 'demo',\n                                    type: 'all',\n                                    platform,\n                                })\n                            }\n                            onPasswordManager={openPasswordManager}\n                            onClickFund={() =>\n                                openAccountTransfer(current_list[openAccountTransferList('all')], {\n                                    category: 'demo',\n                                    type: 'all',\n                                })\n                            }\n                            platform={platform}\n                            descriptor={localize(\n                                'Trade swap-free CFDs on MT5 with synthetics, forex, stocks, stock indices, cryptocurrencies, and ETFs.'\n                            )}\n                            specs={specifications[platform as keyof TSpecifications].real_all_specs}\n                            has_banner\n                        />\n                    )}\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default CFDMT5DemoAccountDisplay;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { localize } from '@deriv/translations';\nimport { DesktopWrapper, MobileWrapper, Carousel } from '@deriv/components';\nimport { getAccountTypeFields, getAccountListKey, getCFDAccountKey } from '@deriv/shared';\nimport specifications, { TSpecifications } from '../Constants/cfd-specifications';\nimport { CFDAccountCard } from './cfd-account-card';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { TTradingPlatformAccounts, TCFDPlatform } from './props.types';\nimport { TObjectCFDAccount } from '../Containers/cfd-dashboard';\nimport { TCFDPasswordReset } from '../Containers/props.types';\n\ntype TStandPoint = {\n    financial_company: string;\n    gaming_company: string;\n    iom: boolean;\n    malta: boolean;\n    maltainvest: boolean;\n    svg: boolean;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TCurrentList = DetailsOfEachMT5Loginid & {\n    enabled: number;\n};\n\ntype TCFDRealAccountDisplayProps = {\n    has_real_account: boolean;\n    is_accounts_switcher_on: boolean;\n    is_eu: boolean;\n    is_eu_country: boolean;\n    has_cfd_account_error: boolean;\n    standpoint: TStandPoint;\n    is_loading?: boolean;\n    is_logged_in: boolean;\n    isSyntheticCardVisible: (account_category: string) => boolean;\n    isDxtradeAllCardVisible: (account_category: string) => boolean;\n    is_virtual: boolean;\n    isFinancialCardVisible: () => boolean;\n    onSelectAccount: (objCFDAccount: TObjectCFDAccount) => void;\n    realSyntheticAccountsExistingData: (getRealExistingData: DetailsOfEachMT5Loginid[] | undefined) => void;\n    realFinancialAccountsExistingData: (getRealExistingData: DetailsOfEachMT5Loginid[] | undefined) => void;\n    openAccountTransfer: (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => void;\n    platform: TCFDPlatform;\n    isAccountOfTypeDisabled: (\n        account: Array<DetailsOfEachMT5Loginid> & { [key: string]: DetailsOfEachMT5Loginid }\n    ) => boolean;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    current_list: Record<string, TCurrentList>;\n    openPasswordManager: (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => void;\n    toggleAccountsDialog: (is_accounts_switcher_on?: boolean) => void;\n    toggleShouldShowRealAccountsList: (prop: boolean) => void;\n    residence: string;\n    account_status?: object;\n    openDerivRealAccountNeededModal: () => void;\n    should_enable_add_button?: boolean;\n    real_account_creation_unlock_date: string;\n    setShouldShowCooldownModal: (value: boolean) => void;\n    show_eu_related_content: boolean;\n};\n\nconst CFDRealAccountDisplay = ({\n    has_real_account,\n    is_accounts_switcher_on,\n    is_eu,\n    is_eu_country,\n    has_cfd_account_error,\n    is_virtual,\n    isSyntheticCardVisible,\n    isFinancialCardVisible,\n    isDxtradeAllCardVisible,\n    onSelectAccount,\n    realSyntheticAccountsExistingData,\n    realFinancialAccountsExistingData,\n    openAccountTransfer,\n    isAccountOfTypeDisabled,\n    current_list,\n    openPasswordManager,\n    platform,\n    standpoint,\n    is_logged_in,\n    toggleAccountsDialog,\n    toggleShouldShowRealAccountsList,\n    residence,\n    openDerivRealAccountNeededModal,\n    should_enable_add_button,\n    show_eu_related_content,\n}: TCFDRealAccountDisplayProps) => {\n    const financial_specs = React.useMemo(() => {\n        const should_show_eu = (is_logged_in && is_eu) || (!is_logged_in && is_eu_country);\n        const is_australian = residence === 'au';\n        if (is_australian) {\n            return specifications[platform as keyof TSpecifications].au_real_financial_specs;\n        }\n        if (should_show_eu) {\n            return specifications[platform as keyof TSpecifications].eu_real_financial_specs;\n        }\n        return specifications[platform as keyof TSpecifications].real_financial_specs;\n    }, [residence, is_logged_in, is_eu, is_eu_country, platform]);\n\n    const onSelectRealAccount = (type: string) => {\n        if (should_enable_add_button) {\n            openDerivRealAccountNeededModal();\n        } else {\n            onSelectAccount({ type, category: 'real', platform });\n        }\n    };\n\n    const onClickFundReal = (account: DetailsOfEachMT5Loginid) => {\n        if (platform === 'dxtrade') {\n            return openAccountTransfer(current_list[getAccountListKey(account, platform)], {\n                category: account.account_type as keyof TOpenAccountTransferMeta,\n                type: getCFDAccountKey({\n                    market_type: account.market_type,\n                    sub_account_type: (account as DetailsOfEachMT5Loginid).sub_account_type,\n                    platform,\n                }),\n            });\n        }\n        return openAccountTransfer(account, {\n            category: account.account_type as keyof TOpenAccountTransferMeta,\n            type: getCFDAccountKey({\n                market_type: account.market_type,\n                sub_account_type: (account as DetailsOfEachMT5Loginid).sub_account_type,\n                platform: 'mt5',\n            }),\n        });\n    };\n\n    const isMT5AccountCardDisabled = (sub_account_type: string) => {\n        if (has_cfd_account_error) return true;\n\n        if (sub_account_type === 'synthetic' && standpoint.malta) return true;\n\n        if (is_eu) {\n            const account = getAccountTypeFields({ category: 'real', type: sub_account_type });\n            return isAccountOfTypeDisabled(account?.account_type);\n        }\n\n        switch (sub_account_type) {\n            case 'synthetic':\n            case 'financial':\n                return should_enable_add_button ? false : !has_real_account;\n            default:\n                return false;\n        }\n    };\n\n    const existing_accounts_data = (acc_type: 'synthetic' | 'financial' | 'all') => {\n        // We need to check enabled property for DXTRADE accounts only.\n        const account_key =\n            acc_type === 'all' ? `${platform}.real.${platform}@${acc_type}` : `${platform}.real.${acc_type}`;\n        // TODO: This condition should be removed after separating the DXTRADE and MT5 component.\n        const should_be_enabled = (list_item: TCurrentList) =>\n            platform === 'dxtrade' ? list_item.enabled === 1 : true;\n        const acc = Object.keys(current_list).some(\n            key => key.startsWith(account_key) && should_be_enabled(current_list[key])\n        )\n            ? Object.keys(current_list)\n                  .filter(key => key.startsWith(account_key))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n\n    realSyntheticAccountsExistingData(existing_accounts_data('synthetic'));\n    realFinancialAccountsExistingData(existing_accounts_data('financial'));\n\n    const synthetic_account_items = isSyntheticCardVisible('real') && (\n        <CFDAccountCard\n            key='real.synthetic'\n            has_cfd_account_error={has_cfd_account_error}\n            title={platform === 'mt5' ? localize('Derived') : localize('Synthetic')}\n            has_real_account={has_real_account}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_disabled={isMT5AccountCardDisabled('synthetic')}\n            is_logged_in={is_logged_in}\n            type={{\n                category: 'real',\n                type: 'synthetic',\n                platform,\n            }}\n            existing_accounts_data={existing_accounts_data('synthetic')}\n            commission_message={localize('No commission')}\n            onSelectAccount={() => onSelectRealAccount('synthetic')}\n            onPasswordManager={openPasswordManager}\n            onClickFund={onClickFundReal}\n            platform={platform}\n            descriptor={\n                platform === 'mt5'\n                    ? localize('Trade CFDs on our synthetics, baskets, and derived FX.')\n                    : localize('Trade CFDs on our synthetic indices that simulate real-world market movements.')\n            }\n            specs={specifications[platform as keyof TSpecifications].real_synthetic_specs}\n            is_virtual={is_virtual}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            toggleAccountsDialog={toggleAccountsDialog}\n        />\n    );\n\n    const financial_account = isFinancialCardVisible() && (\n        <CFDAccountCard\n            key='real.financial'\n            has_real_account={has_real_account}\n            is_disabled={isMT5AccountCardDisabled('financial')}\n            title={show_eu_related_content ? localize('CFDs') : localize('Financial')}\n            type={{\n                category: 'real',\n                type: 'financial',\n                platform,\n            }}\n            existing_accounts_data={existing_accounts_data('financial')}\n            commission_message={localize('No commission')}\n            onSelectAccount={() => onSelectRealAccount('financial')}\n            onPasswordManager={openPasswordManager}\n            onClickFund={onClickFundReal}\n            platform={platform}\n            descriptor={general_messages.getFinancialAccountDescriptor(platform, show_eu_related_content)}\n            specs={financial_specs}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_logged_in={is_logged_in}\n            is_virtual={is_virtual}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            toggleAccountsDialog={toggleAccountsDialog}\n        />\n    );\n\n    const derivx_all_account = platform === 'dxtrade' && isDxtradeAllCardVisible('real') && (\n        <CFDAccountCard\n            commission_message={localize('No commission')}\n            descriptor={localize(\n                'Trade CFDs on forex, derived indices, cryptocurrencies, and commodities with high leverage.'\n            )}\n            existing_accounts_data={existing_accounts_data('all')}\n            has_real_account={has_real_account}\n            is_accounts_switcher_on={is_accounts_switcher_on}\n            is_disabled={has_cfd_account_error || standpoint.malta}\n            is_logged_in={is_logged_in}\n            is_virtual={is_virtual}\n            key='cfd'\n            onClickFund={onClickFundReal}\n            onPasswordManager={openPasswordManager}\n            onSelectAccount={() => onSelectRealAccount('all')}\n            platform={platform}\n            specs={specifications.dxtrade.real_all_specs}\n            title={localize('Deriv X')}\n            toggleAccountsDialog={toggleAccountsDialog}\n            toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n            type={{\n                category: 'real',\n                type: 'all',\n                platform,\n            }}\n        />\n    );\n\n    const items = [synthetic_account_items, financial_account, derivx_all_account].filter(Boolean);\n\n    return (\n        <div data-testid='dt_cfd_real_accounts_display' className={classNames('cfd-real-accounts-display')}>\n            <DesktopWrapper>\n                <Carousel\n                    list={items}\n                    width={328}\n                    nav_position='middle'\n                    show_bullet={false}\n                    item_per_window={2}\n                    is_mt5={true}\n                />\n            </DesktopWrapper>\n            <MobileWrapper>{items}</MobileWrapper>\n        </div>\n    );\n};\n\nexport { CFDRealAccountDisplay };\n","import React from 'react';\nimport { RouteComponentProps, useLocation } from 'react-router';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { Icon, Tabs, PageError, Loading, Text } from '@deriv/components';\nimport {\n    isEmptyObject,\n    isMobile,\n    routes,\n    getCFDPlatformLabel,\n    getPlatformSettings,\n    CFD_PLATFORMS,\n    isLandingCompanyEnabled,\n} from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { ResetTradingPasswordModal } from '@deriv/account';\nimport MissingRealAccount from './missing-real-account';\nimport LoadingCFDRealAccountDisplay from './loading-cfd-real-account-display';\nimport CompareAccountsModal from './compare-accounts-modal';\nimport JurisdictionModal from './jurisdiction-modal/jurisdiction-modal';\nimport MT5TradeModal from './mt5-trade-modal';\nimport CFDDbviOnboarding from './cfd-dbvi-onboarding';\nimport CFDDownloadContainer from '../Components/cfd-download-container';\nimport CFDPasswordManagerModal from './cfd-password-manager-modal';\nimport CFDPasswordModal from './cfd-password-modal';\nimport CFDServerErrorDialog from './cfd-server-error-dialog';\nimport CFDTopUpDemoModal from './cfd-top-up-demo-modal';\nimport CFDResetPasswordModal from './cfd-reset-password-modal';\nimport { general_messages } from '../Constants/cfd-shared-strings';\nimport SwitchToRealAccountModal from './switch-to-real-account';\nimport 'Sass/cfd-dashboard.scss';\nimport { LandingCompany, DetailsOfEachMT5Loginid } from '@deriv/api-types';\n// TODO: Change these imports after real released\nimport CFDDxtradeDemoAccountDisplay from '../Components/cfd-dxtrade-demo-account-display';\nimport CFDMT5DemoAccountDisplay from '../Components/cfd-mt5-demo-account-display';\nimport { CFDRealAccountDisplay } from '../Components/cfd-real-account-display';\nimport { observer, useStore } from '@deriv/stores';\nimport { TCFDPasswordReset } from './props.types';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { TTradingPlatformAccounts } from 'Components/props.types';\n\ndeclare module 'react' {\n    interface HTMLAttributes<T> extends React.AriaAttributes, React.DOMAttributes<T> {\n        label?: string;\n        hash?: string;\n    }\n}\n\ntype TLoadTab = {\n    children: React.ReactNode;\n    is_loading: boolean;\n    loading_component: () => JSX.Element;\n    active_index: number;\n    top: boolean;\n    center: boolean;\n    is_logged_in: boolean;\n    onTabItemClick: (index: number) => void;\n    should_update_hash: boolean;\n    landing_companies?: LandingCompany;\n};\n\nconst LoadTab = ({ children, is_loading, loading_component, ...props }: TLoadTab) => {\n    const LoadingComponent = loading_component;\n    if (is_loading) {\n        return <LoadingComponent />;\n    }\n\n    return <Tabs {...props}>{children}</Tabs>;\n};\n\ntype TOpenAccountTransferMeta = {\n    category: string;\n    type?: string;\n};\n\ntype TMt5StatusServerType = {\n    all: number;\n    platform: number;\n    server_number: number;\n    deposits?: number;\n    withdrawals?: number;\n};\n\ntype TMt5StatusServer = Record<'demo' | 'real', TMt5StatusServerType[]>;\n\nexport type TObjectCFDAccount = { category: string; type: string; set_password?: number; platform?: string };\n\nexport type TCFDDashboardProps = RouteComponentProps & {\n    account_status: object;\n    // TODO: update this type (DetailsOfEachMT5Loginid) when BE changed the schema\n    platform: 'mt5' | 'dxtrade';\n};\n\ntype TPasswordManager = {\n    is_visible: boolean;\n    selected_login: string;\n    selected_account: string;\n    selected_account_type: string;\n    selected_account_group: TCFDPasswordReset['account_group'];\n    selected_server: string;\n};\n\nconst CFDDashboard = observer((props: TCFDDashboardProps) => {\n    const { client, ui, traders_hub, notifications } = useStore();\n\n    const {\n        landing_companies,\n        isAccountOfTypeDisabled,\n        is_logged_in,\n        is_logging_in,\n        is_eu,\n        is_eu_country,\n        is_virtual,\n        is_mt5_allowed,\n        is_dxtrade_allowed,\n        mt5_disabled_signup_types,\n        dxtrade_disabled_signup_types,\n        has_maltainvest_account,\n        dxtrade_accounts_list_error,\n        residence,\n        is_populating_mt5_account_list: is_loading,\n        has_account_error_in_mt5_real_list: has_mt5_real_account_error,\n        has_account_error_in_mt5_demo_list: has_mt5_demo_account_error,\n        has_account_error_in_dxtrade_real_list: has_dxtrade_real_account_error,\n        has_account_error_in_dxtrade_demo_list: has_dxtrade_demo_account_error,\n        has_active_real_account: has_real_account,\n        standpoint,\n        verification_code: platform_verification_code,\n        website_status,\n        upgradeable_landing_companies,\n        real_account_creation_unlock_date,\n        account_settings,\n    } = client;\n\n    const {\n        trading_platform_mt5_password_reset: mt5_verification_code,\n        trading_platform_dxtrade_password_reset: dxtrade_verification_code,\n    } = platform_verification_code;\n    const { mt5_status: mt5_status_server, dx_trade_status: dxtrade_status_server } = website_status;\n    const { dxtrade_user_exception: is_user_exception, residence: country } = account_settings;\n\n    const {\n        setCFDPasswordResetModal,\n        openAccountNeededModal,\n        is_accounts_switcher_on,\n        openTopUpModal,\n        notification_messages_ui: NotificationMessages,\n        toggleAccountsDialog,\n        toggleShouldShowRealAccountsList,\n        is_dark_mode_on,\n        disableApp,\n        enableApp,\n        is_reset_trading_password_modal_visible,\n        setResetTradingPasswordModalOpen: toggleResetTradingPasswordModal,\n        openDerivRealAccountNeededModal,\n        setShouldShowCooldownModal,\n    } = ui;\n    const { show_eu_related_content } = traders_hub;\n    const { refreshNotifications } = notifications;\n\n    const {\n        onMount,\n        onUnmount,\n        setAccountType,\n        setCurrentAccount,\n        enableCFDPasswordModal,\n        getRealSyntheticAccountsExistingData,\n        getRealFinancialAccountsExistingData,\n        toggleMT5TradeModal,\n        beginRealSignupForMt5,\n        disableCFDPasswordModal,\n        checkShouldOpenAccount,\n        is_mt5_trade_modal_visible,\n        createCFDAccount,\n        current_list,\n        dxtrade_tokens,\n        derivez_tokens,\n    } = useCfdStore();\n\n    const [is_demo_enabled, setIsDemoEnabled] = React.useState<boolean>(false);\n    const [is_real_enabled, setIsRealEnabled] = React.useState<boolean>(false);\n    const [active_index, setActiveIndex] = React.useState<number>(0);\n    const [is_demo_tab, setIsDemoTab] = React.useState<boolean>(false);\n    const [is_notification_loaded, setIsNotificationLoaded] = React.useState<boolean>(false);\n    const [password_manager, setPasswordManager] = React.useState<TPasswordManager>({\n        is_visible: false,\n        selected_login: '',\n        selected_account: '',\n        selected_account_type: '',\n        selected_account_group: '',\n        selected_server: '',\n    });\n\n    const history = useHistory();\n    const location = useLocation();\n\n    React.useEffect(() => {\n        if (window.location.href.includes(routes.mt5) || window.location.href.includes(routes.dxtrade)) {\n            history.push(routes.traders_hub);\n        }\n    }, [history]);\n\n    React.useEffect(() => {\n        updateActiveIndex(getIndexToSet());\n        openResetPassword();\n        refreshNotifications();\n        onMount();\n        return () => {\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    React.useEffect(() => {\n        checkShouldOpenAccount();\n\n        if (is_logged_in) {\n            ['demo', 'real'].forEach(account_type => {\n                const should_enable_tab =\n                    isDxtradeAllCardVisible(account_type) ||\n                    isSyntheticCardVisible(account_type) ||\n                    isFinancialCardVisible();\n\n                if (account_type === 'real' && is_real_enabled !== should_enable_tab) {\n                    setIsRealEnabled(should_enable_tab);\n                }\n\n                if (account_type === 'demo' && is_demo_enabled !== should_enable_tab) {\n                    setIsDemoEnabled(should_enable_tab);\n                }\n            });\n        }\n\n        if (!is_logged_in && (!is_real_enabled || !is_demo_enabled)) {\n            setIsRealEnabled(true);\n            setIsDemoEnabled(true);\n        }\n        if (props.location.hash === '#demo') {\n            setIsDemoEnabled(true);\n            setActiveIndex(1);\n        }\n    });\n\n    React.useEffect(() => {\n        if (props.location.hash === '#real') {\n            setActiveIndex(0);\n        }\n        if (props.location.hash === '#demo-all' || props.location.hash === '#demo') {\n            setActiveIndex(1);\n        }\n    }, [props.location.hash]);\n\n    const openResetPassword = () => {\n        if (!/reset-password/.test(location.hash)) {\n            return;\n        }\n\n        setCFDPasswordResetModal(true);\n    };\n\n    const getIndexToSet = () => {\n        if (is_real_enabled) {\n            return 0;\n        }\n        if (is_demo_enabled) {\n            return 1;\n        }\n\n        const hash = location.hash;\n        if (hash) {\n            return /demo/.test(location.hash) ? 1 : 0;\n        }\n        return undefined;\n    };\n\n    const stopNotificationLoading = () => {\n        setIsNotificationLoaded(true);\n    };\n\n    const updateActiveIndex = (index?: number) => {\n        if (index === undefined) return;\n        const updated_state: { is_demo_tab?: boolean; active_index?: number } = {};\n        // updateActiveIndex is called in componentDidUpdate causing tab_index to always revert back to 0\n        if (index === 1) updated_state.is_demo_tab = true;\n        else if (index === 0) updated_state.is_demo_tab = false;\n\n        if (active_index !== index) {\n            updated_state.active_index = index;\n        }\n\n        if (!isEmptyObject(updated_state)) {\n            setActiveIndex(updated_state.active_index as number);\n            setIsDemoTab(updated_state.is_demo_tab as boolean);\n        }\n    };\n\n    const openAccountTransfer = (\n        data: DetailsOfEachMT5Loginid | TTradingPlatformAccounts,\n        meta: TOpenAccountTransferMeta\n    ) => {\n        if (meta.category === 'real') {\n            if (data) {\n                if ('platform' in data && data.platform === CFD_PLATFORMS.DXTRADE)\n                    sessionStorage.setItem('cfd_transfer_to_login_id', data.account_id || '');\n                else sessionStorage.setItem('cfd_transfer_to_login_id', data.login || '');\n\n                disableCFDPasswordModal();\n                history.push(routes.cashier_acc_transfer);\n            }\n        } else {\n            if ('sub_account_type' in data) setCurrentAccount(data, meta);\n            openTopUpModal();\n        }\n    };\n\n    const togglePasswordManagerModal = (\n        login?: string,\n        title?: string,\n        group?: TCFDPasswordReset['account_group'],\n        type?: string,\n        server?: string\n    ) => {\n        setPasswordManager(prev_state => ({\n            is_visible: !prev_state.is_visible,\n            selected_login: typeof login === 'string' ? login : '',\n            selected_account: typeof title === 'string' ? title : '',\n            selected_account_group: group || '',\n            selected_account_type: type || '',\n            selected_server: server || '',\n        }));\n    };\n\n    const openRealPasswordModal = (account_type: TOpenAccountTransferMeta) => {\n        setAccountType(account_type);\n        enableCFDPasswordModal();\n    };\n\n    const hasAccount = (category: string, type: string) => {\n        return Object.keys(current_list).some(key => key.startsWith(`${platform}.${category}.${type}`));\n    };\n\n    const isDxtradeAllCardVisible = (account_category: string) => {\n        const { platform } = props;\n\n        const has_synthetic_account = hasAccount(account_category, 'synthetic');\n        const has_financial_account = hasAccount(account_category, 'financial');\n\n        if (has_synthetic_account || has_financial_account) return false;\n\n        if (is_dxtrade_allowed && !is_logged_in) return true;\n\n        return isLandingCompanyEnabled({\n            landing_companies,\n            platform,\n            type: 'all',\n        });\n    };\n\n    const isSyntheticCardVisible = (account_category: string) => {\n        const { platform } = props;\n        const has_synthetic_account = hasAccount(account_category, 'synthetic');\n        const has_financial_account = hasAccount(account_category, 'financial');\n\n        // Hiding card for logged out EU users\n        if (!is_logged_in && is_eu_country) return false;\n\n        if (is_eu && !has_synthetic_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        if (!has_synthetic_account && !has_financial_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        return isLandingCompanyEnabled({ landing_companies, platform, type: 'gaming' }) || !is_logged_in;\n    };\n\n    const isFinancialCardVisible = () => {\n        const { platform } = props;\n\n        const has_synthetic_account = hasAccount('real', 'synthetic');\n        const has_financial_account = hasAccount('real', 'financial');\n\n        if (!has_synthetic_account && !has_financial_account && platform === CFD_PLATFORMS.DXTRADE) return false;\n\n        return (\n            !is_logged_in ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform,\n                type: 'financial',\n            })\n        );\n    };\n\n    const { account_status, platform } = props;\n\n    const isSwapFreeCardVisible = () => {\n        return (\n            !is_logged_in ||\n            isLandingCompanyEnabled({\n                landing_companies,\n                platform,\n                type: 'all',\n            })\n        );\n    };\n\n    const should_show_missing_real_account =\n        is_logged_in && !has_real_account && upgradeable_landing_companies?.length > 0;\n    const should_enable_add_button = should_show_missing_real_account && CFD_PLATFORMS.MT5 && is_real_enabled;\n\n    if ((!country && is_logged_in) || is_logging_in) return <Loading />; // Wait for country name to be loaded before rendering\n\n    // all: 1 in mt5_status response means that server is suspended\n    const getIsSuspendedMt5Server = (type_server: TMt5StatusServer['demo' | 'real']) =>\n        type_server?.map((item: TMt5StatusServerType) => item.all).some((item: number) => item === 1);\n\n    const is_suspended_mt5_demo_server = getIsSuspendedMt5Server(mt5_status_server?.demo);\n    const is_suspended_mt5_real_server = getIsSuspendedMt5Server(mt5_status_server?.real);\n    const is_suspended_dxtrade_demo_server = !!dxtrade_status_server?.demo;\n    const is_suspended_dxtrade_real_server = !!dxtrade_status_server?.real;\n\n    const has_mt5_account_error = is_demo_tab\n        ? is_suspended_mt5_demo_server || has_mt5_demo_account_error || mt5_disabled_signup_types.demo\n        : is_suspended_mt5_real_server || has_mt5_real_account_error || mt5_disabled_signup_types.real;\n\n    const has_dxtrade_account_error = is_demo_tab\n        ? is_suspended_dxtrade_demo_server || has_dxtrade_demo_account_error || dxtrade_disabled_signup_types.demo\n        : is_suspended_dxtrade_real_server || has_dxtrade_real_account_error || dxtrade_disabled_signup_types.real;\n\n    // eslint-disable-next-line no-nested-ternary\n    const has_cfd_account_error = is_user_exception\n        ? !is_user_exception\n        : platform === CFD_PLATFORMS.MT5\n        ? has_mt5_account_error\n        : has_dxtrade_account_error || !!dxtrade_accounts_list_error;\n\n    const has_cfd_real_account_dxtrade_error =\n        is_suspended_dxtrade_real_server || dxtrade_disabled_signup_types.real || !!dxtrade_accounts_list_error;\n    const has_cfd_demo_account_dxtrade_error =\n        is_suspended_dxtrade_demo_server || dxtrade_disabled_signup_types.demo || !!dxtrade_accounts_list_error;\n    const has_cfd_real_account_mt5_error = is_suspended_mt5_real_server || mt5_disabled_signup_types.real;\n    const has_cfd_demo_account_mt5_error = is_suspended_mt5_demo_server || mt5_disabled_signup_types.demo;\n\n    const verification_code = platform === CFD_PLATFORMS.MT5 ? mt5_verification_code : dxtrade_verification_code;\n\n    if (platform === CFD_PLATFORMS.MT5 || platform === CFD_PLATFORMS.DXTRADE)\n        return <Redirect to={routes.traders_hub} />;\n    if (platform === CFD_PLATFORMS.DXTRADE && !is_dxtrade_allowed) return <Redirect to={routes.mt5} />;\n\n    if ((is_logged_in && !landing_companies) || is_loading) return <Loading />;\n\n    return (\n        <React.Fragment>\n            {is_mt5_allowed || platform === CFD_PLATFORMS.DXTRADE || !is_logged_in ? (\n                <div className='cfd-dashboard__container'>\n                    <NotificationMessages\n                        is_mt5\n                        is_notification_loaded={is_notification_loaded}\n                        stopNotificationLoading={stopNotificationLoading}\n                    />\n                    <div className='cfd-dashboard'>\n                        <div className='cfd-dashboard__welcome-message'>\n                            <h1 className='cfd-dashboard__welcome-message--heading'>\n                                {general_messages.getWelcomeHeader(is_logged_in, platform)}\n                            </h1>\n                        </div>\n                        {is_logged_in && has_cfd_account_error && (\n                            <div className='cfd-dashboard__accounts-error'>\n                                <Text\n                                    as='p'\n                                    className='cfd-dashboard__accounts-error-message'\n                                    line_height='l'\n                                    size='xxs'\n                                    color='prominent'\n                                    weight='normal'\n                                    align='center'\n                                >\n                                    <Localize\n                                        i18n_default_text='Due to an issue on our server, some of your {{platform}} accounts are unavailable at the moment. Please bear with us and thank you for your patience.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                        }}\n                                    />\n                                </Text>\n                            </div>\n                        )}\n                        <div className='cfd-dashboard__accounts-display'>\n                            <CFDPasswordManagerModal\n                                is_visible={password_manager.is_visible}\n                                platform={platform}\n                                selected_login={password_manager.selected_login}\n                                selected_account_group={password_manager.selected_account_group}\n                                selected_account_type={password_manager.selected_account_type}\n                                selected_server={password_manager.selected_server}\n                                toggleModal={togglePasswordManagerModal}\n                            />\n                            <LoadTab\n                                active_index={active_index}\n                                top\n                                center\n                                is_loading={is_loading}\n                                is_logged_in={is_logged_in}\n                                loading_component={LoadingCFDRealAccountDisplay}\n                                onTabItemClick={updateActiveIndex}\n                                should_update_hash\n                            >\n                                {is_real_enabled && (\n                                    <div label={localize('Real account')} data-hash='real'>\n                                        <React.Fragment>\n                                            {should_show_missing_real_account && (\n                                                <MissingRealAccount\n                                                    onClickSignup={() => {\n                                                        if (real_account_creation_unlock_date) {\n                                                            setShouldShowCooldownModal(true);\n                                                        } else {\n                                                            beginRealSignupForMt5();\n                                                        }\n                                                    }}\n                                                    platform={platform}\n                                                />\n                                            )}\n                                            <CFDRealAccountDisplay\n                                                is_accounts_switcher_on={is_accounts_switcher_on}\n                                                is_eu={is_eu}\n                                                is_eu_country={is_eu_country}\n                                                is_logged_in={is_logged_in}\n                                                has_cfd_account_error={\n                                                    // eslint-disable-next-line no-nested-ternary\n                                                    platform === CFD_PLATFORMS.MT5\n                                                        ? has_cfd_real_account_mt5_error\n                                                        : is_user_exception\n                                                        ? !is_user_exception\n                                                        : has_cfd_real_account_dxtrade_error\n                                                }\n                                                current_list={current_list}\n                                                account_status={account_status}\n                                                onSelectAccount={createCFDAccount}\n                                                realSyntheticAccountsExistingData={getRealSyntheticAccountsExistingData}\n                                                realFinancialAccountsExistingData={getRealFinancialAccountsExistingData}\n                                                is_virtual={is_virtual}\n                                                isSyntheticCardVisible={isSyntheticCardVisible}\n                                                isFinancialCardVisible={isFinancialCardVisible}\n                                                isDxtradeAllCardVisible={isDxtradeAllCardVisible}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                platform={platform}\n                                                isAccountOfTypeDisabled={isAccountOfTypeDisabled}\n                                                has_real_account={has_real_account}\n                                                standpoint={standpoint}\n                                                toggleAccountsDialog={toggleAccountsDialog}\n                                                toggleShouldShowRealAccountsList={toggleShouldShowRealAccountsList}\n                                                residence={residence}\n                                                openDerivRealAccountNeededModal={openDerivRealAccountNeededModal}\n                                                should_enable_add_button={should_enable_add_button}\n                                                real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                                setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                                show_eu_related_content={show_eu_related_content}\n                                            />\n                                        </React.Fragment>\n                                    </div>\n                                )}\n                                {is_demo_enabled && (\n                                    <div label={localize('Demo account')} data-hash='demo'>\n                                        {platform === CFD_PLATFORMS.DXTRADE && (\n                                            <CFDDxtradeDemoAccountDisplay\n                                                is_logged_in={is_logged_in}\n                                                has_cfd_account_error={\n                                                    is_user_exception\n                                                        ? !is_user_exception\n                                                        : has_cfd_demo_account_dxtrade_error\n                                                }\n                                                standpoint={standpoint}\n                                                is_loading={is_loading}\n                                                current_list={current_list}\n                                                onSelectAccount={createCFDAccount}\n                                                landing_companies={landing_companies}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                platform={platform}\n                                            />\n                                        )}\n                                        {platform === CFD_PLATFORMS.MT5 && (\n                                            <CFDMT5DemoAccountDisplay\n                                                is_eu={is_eu}\n                                                is_eu_country={is_eu_country}\n                                                is_logged_in={is_logged_in}\n                                                has_maltainvest_account={has_maltainvest_account}\n                                                has_cfd_account_error={has_cfd_demo_account_mt5_error}\n                                                openAccountNeededModal={openAccountNeededModal}\n                                                standpoint={standpoint}\n                                                is_loading={is_loading}\n                                                isSyntheticCardVisible={isSyntheticCardVisible}\n                                                isFinancialCardVisible={isFinancialCardVisible}\n                                                isSwapFreeCardVisible={isSwapFreeCardVisible}\n                                                current_list={current_list}\n                                                onSelectAccount={createCFDAccount}\n                                                landing_companies={landing_companies}\n                                                openAccountTransfer={openAccountTransfer}\n                                                openPasswordManager={togglePasswordManagerModal}\n                                                toggleMT5TradeModal={toggleMT5TradeModal}\n                                                platform={platform}\n                                                residence={residence}\n                                                show_eu_related_content={show_eu_related_content}\n                                            />\n                                        )}\n                                    </div>\n                                )}\n                            </LoadTab>\n                            <CompareAccountsModal\n                                platform={platform}\n                                is_demo_tab={is_demo_tab}\n                                openPasswordModal={openRealPasswordModal}\n                                is_real_enabled={is_real_enabled}\n                                real_account_creation_unlock_date={real_account_creation_unlock_date}\n                                setShouldShowCooldownModal={setShouldShowCooldownModal}\n                                has_unmerged_account={\n                                    hasAccount('real', 'synthetic') || hasAccount('real', 'financial')\n                                }\n                            />\n                            <SwitchToRealAccountModal />\n                            <JurisdictionModal openPasswordModal={openRealPasswordModal} />\n                            <MT5TradeModal\n                                is_demo=''\n                                is_open={is_mt5_trade_modal_visible}\n                                onPasswordManager={togglePasswordManagerModal}\n                                toggleModal={toggleMT5TradeModal}\n                                is_eu_user={(is_logged_in && is_eu) || (!is_logged_in && is_eu_country)}\n                            />\n                            <div className='cfd-dashboard__maintenance'>\n                                <Icon\n                                    icon='IcAlertWarning'\n                                    size={isMobile() ? 28 : 16}\n                                    className='cfd-dashboard__maintenance-icon'\n                                />\n                                <div className='cfd-dashboard__maintenance-text'>\n                                    {platform === CFD_PLATFORMS.DXTRADE && (\n                                        <Localize i18n_default_text='Server maintenance starts at 06:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                                    )}\n                                    {platform === CFD_PLATFORMS.MT5 && (\n                                        <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                        <CFDDownloadContainer\n                            platform={platform}\n                            active_index={active_index}\n                            is_dark_mode_on={is_dark_mode_on}\n                            dxtrade_tokens={dxtrade_tokens}\n                            derivez_tokens={derivez_tokens}\n                        />\n                        <CFDTopUpDemoModal platform={platform} />\n                        <CFDPasswordModal platform={platform} />\n                        <CFDServerErrorDialog />\n                        {platform === CFD_PLATFORMS.MT5 && is_logged_in && <CFDDbviOnboarding />}\n                        <CFDResetPasswordModal platform={platform} />\n                        <ResetTradingPasswordModal\n                            platform={platform}\n                            enableApp={enableApp}\n                            disableApp={disableApp}\n                            toggleResetTradingPasswordModal={toggleResetTradingPasswordModal}\n                            is_visible={is_reset_trading_password_modal_visible}\n                            is_loading={is_loading}\n                            verification_code={verification_code}\n                        />\n                    </div>\n                </div>\n            ) : (\n                <PageError\n                    buttonSize={'medium'}\n                    header={\n                        <Localize\n                            i18n_default_text='{{platform_name_mt5}} is not available in {{country}}'\n                            values={{\n                                country,\n                                platform_name_mt5: getPlatformSettings('mt5').name,\n                            }}\n                            components={[<br key={0} />]}\n                        />\n                    }\n                    messages={[<Localize key={0} i18n_default_text='Please explore our other platforms.' />]}\n                    redirect_urls={[routes.trade, routes.bot]}\n                    redirect_labels={[\n                        <Localize\n                            key={0}\n                            i18n_default_text='Explore {{platform_name_trader}}'\n                            values={{ platform_name_trader: getPlatformSettings('trader').name }}\n                        />,\n                        <Localize\n                            key={1}\n                            i18n_default_text='Explore {{platform_name_dbot}}'\n                            values={{ platform_name_dbot: getPlatformSettings('dbot').name }}\n                        />,\n                    ]}\n                />\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default CFDDashboard;\n","import CFDDashboard from './cfd-dashboard';\nimport CFDPasswordModal from './cfd-password-modal';\nimport CFDServerErrorDialog from './cfd-server-error-dialog';\n\nexport { CFDPasswordModal };\nexport { CFDServerErrorDialog };\nexport default CFDDashboard;\n","import React from 'react';\nimport CFD from '../Containers';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\n// Error Routes\nconst Page404 = React.lazy(() => import(/* webpackChunkName: \"404\" */ '../Modules/Page404'));\n\n// Order matters\nconst initRoutesConfig = () => {\n    return [\n        {\n            path: routes.dxtrade,\n            // eslint-disable-next-line react/display-name\n            component: props => <CFD {...props} platform='dxtrade' />,\n            getTitle: () => localize('Deriv X'),\n            is_authenticated: false,\n        },\n        {\n            path: routes.mt5,\n            // eslint-disable-next-line react/display-name\n            component: props => <CFD {...props} platform='mt5' />,\n            getTitle: () => localize('MT5'),\n            is_authenticated: false,\n        },\n    ];\n};\n\nlet routesConfig;\n\n// For default page route if page/path is not found, must be kept at the end of routes_config array\nconst route_default = { path: routes.error404, component: Page404, getTitle: () => localize('Error 404') };\n\nconst getRoutesConfig = () => {\n    if (!routesConfig) {\n        routesConfig = initRoutesConfig();\n        routesConfig.push(route_default);\n    }\n    return routesConfig;\n};\n\nexport default getRoutesConfig;\n","import { matchPath } from 'react-router';\nimport { routes } from '@deriv/shared';\n\nexport const normalizePath = path => (/^\\//.test(path) ? path : `/${path || ''}`); // Default to '/'\n\nexport const findRouteByPath = (path, routes_config) => {\n    let result;\n\n    routes_config.some(route_info => {\n        let match_path;\n        try {\n            match_path = matchPath(path, route_info);\n        } catch (e) {\n            if (/undefined/.test(e.message)) {\n                return undefined;\n            }\n        }\n\n        if (match_path) {\n            result = route_info;\n            return true;\n        } else if (route_info.routes) {\n            result = findRouteByPath(path, route_info.routes);\n            return result;\n        }\n        return false;\n    });\n\n    return result;\n};\n\nexport const isRouteVisible = (route, is_logged_in) => !(route && route.is_authenticated && !is_logged_in);\n\nexport const getPath = (route_path, params = {}) =>\n    Object.keys(params).reduce((p, name) => p.replace(`:${name}`, params[name]), route_path);\n\nexport const getContractPath = contract_id => getPath(routes.contract, { contract_id });\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { PlatformContext } from '@deriv/shared';\nimport getRoutesConfig from '../../Constants/routes-config';\nimport { findRouteByPath, normalizePath } from './helpers';\n\nconst BinaryLink = ({ active_class, to, children, ...props }) => {\n    const { is_dashboard } = React.useContext(PlatformContext);\n    const path = normalizePath(to);\n    const route = findRouteByPath(path, getRoutesConfig({ is_dashboard }));\n\n    if (!route) {\n        throw new Error(`Route not found: ${to}`);\n    }\n\n    return to ? (\n        <NavLink to={path} activeClassName={active_class || 'active'} exact={route.exact} {...props}>\n            {children}\n        </NavLink>\n    ) : (\n        <a {...props}>{children}</a>\n    );\n};\n\nBinaryLink.propTypes = {\n    active_class: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),\n    to: PropTypes.string,\n};\n\nexport default BinaryLink;\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { redirectToLogin, isEmptyObject, routes, removeBranchName, default_title } from '@deriv/shared';\nimport { getLanguage } from '@deriv/translations';\n\nconst RouteWithSubRoutes = route => {\n    const renderFactory = props => {\n        let result = null;\n\n        if (route.component === Redirect) {\n            let to = route.to;\n\n            // This if clause has been added just to remove '/index' from url in localhost env.\n            if (route.path === routes.index) {\n                const { location } = props;\n                to = location.pathname.toLowerCase().replace(route.path, '');\n            }\n            result = <Redirect to={to} />;\n        } else if (route.is_authenticated && !route.is_logged_in && !route.is_logging_in) {\n            redirectToLogin(route.is_logged_in, getLanguage());\n        } else {\n            const default_subroute = (route.routes ?? []).reduce(\n                (acc, cur) => ({\n                    ...acc,\n                    ...cur.subroutes.find(subroute => subroute.default),\n                }),\n                {}\n            );\n            const has_default_subroute = !isEmptyObject(default_subroute);\n            const pathname = removeBranchName(location.pathname);\n\n            result = (\n                <React.Fragment>\n                    {has_default_subroute && pathname === route.path && <Redirect to={default_subroute.path} />}\n                    <route.component {...props} routes={route.routes} />\n                </React.Fragment>\n            );\n        }\n\n        const title = route.getTitle?.() || '';\n        document.title = `${title} | ${default_title}`;\n        return result;\n    };\n\n    return <Route exact={route.exact} path={route.path} render={renderFactory} />;\n};\n\nexport default RouteWithSubRoutes;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\nimport { PlatformContext } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport getRoutesConfig from '../../Constants/routes-config';\nimport RouteWithSubRoutes from './route-with-sub-routes.jsx';\n\nconst BinaryRoutes = props => {\n    const { is_dashboard } = React.useContext(PlatformContext);\n\n    return (\n        <React.Suspense\n            fallback={() => {\n                return (\n                    <div>\n                        <Localize i18n_default_text='Loading...' />\n                    </div>\n                );\n            }}\n        >\n            <Switch>\n                {getRoutesConfig({ is_dashboard }).map(route => (\n                    <RouteWithSubRoutes key={route.path} {...route} {...props} />\n                ))}\n            </Switch>\n        </React.Suspense>\n    );\n};\n\nexport default BinaryRoutes;\n","import BinaryLink from './binary-link.jsx';\nimport BinaryRoutes from './binary-routes.jsx';\nimport RouteWithSubRoutes from './route-with-sub-routes.jsx';\n\nexport { BinaryLink };\nexport default BinaryRoutes;\nexport * from './helpers';\nexport { RouteWithSubRoutes };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dialog, PageErrorContainer } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    is_dialog,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}) => {\n    const refresh_message = should_show_refresh ? localize('Please refresh this page to continue.') : '';\n\n    if (is_dialog) {\n        return (\n            <Dialog\n                title={header || localize('There was an error')}\n                is_visible\n                confirm_button_text={redirect_label || localize('Ok')}\n                onConfirm={redirectOnClick || (() => location.reload())}\n            >\n                {message || localize('Sorry, an error occured while processing your request.')}\n            </Dialog>\n        );\n    }\n    return (\n        <PageErrorContainer\n            error_header={header ?? ''}\n            error_messages={message ? [message, refresh_message] : []}\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label || localize('Refresh')]}\n            buttonOnClick={redirectOnClick || (() => location.reload())}\n        />\n    );\n};\n\nErrorComponent.propTypes = {\n    header: PropTypes.string,\n    is_dialog: PropTypes.bool,\n    message: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    redirect_label: PropTypes.string,\n    redirectOnClick: PropTypes.func,\n    should_show_refresh: PropTypes.bool,\n    type: PropTypes.string,\n};\n\nexport default ErrorComponent;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport BinaryRoutes from '../Components/Routes';\nimport ErrorComponent from '../Components/Errors/error-component.jsx';\nimport { observer, useStore } from '@deriv/stores';\n\nconst Routes = observer(({ passthrough }) => {\n    const { client, common } = useStore();\n\n    const { is_logged_in, is_logging_in } = client;\n    const { error, has_error } = common;\n\n    if (has_error) {\n        return <ErrorComponent {...error} />;\n    }\n\n    return <BinaryRoutes is_logged_in={is_logged_in} is_logging_in={is_logging_in} passthrough={passthrough} />;\n});\n\nRoutes.propTypes = {\n    passthrough: PropTypes.object,\n};\n\n// need to wrap withRouter around connect\n// to prevent updates on <BinaryRoutes /> from being blocked\nexport default withRouter(Routes);\n","import CFDStore from './CFD/cfd-store';\n\nexport default class ModulesStore {\n    constructor(root_store) {\n        this.cfd = new CFDStore({ root_store });\n    }\n}\n","import ModulesStore from './Modules';\n\nexport default class RootStore {\n    constructor(core_store) {\n        this.client = core_store.client;\n        this.common = core_store.common;\n        this.modules = new ModulesStore(this, core_store);\n        this.ui = core_store.ui;\n        this.gtm = core_store.gtm;\n        this.pushwoosh = core_store.pushwoosh;\n        this.notifications = core_store.notifications;\n        this.traders_hub = core_store.traders_hub;\n    }\n}\n","import { PromiseClass } from '../utility';\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = new PromiseClass();\n    let common_store;\n\n    const init = store => {\n        if (!clock_started) {\n            common_store = store;\n            pending.resolve(common_store.server_time);\n            clock_started = true;\n        }\n    };\n\n    const get = () => (clock_started && common_store.server_time ? common_store.server_time.clone() : undefined);\n\n    return {\n        init,\n        get,\n        timePromise: () => (clock_started ? Promise.resolve(common_store.server_time) : pending.promise),\n    };\n})();\n\nexport default ServerTime;\n","import { configure } from 'mobx';\nimport RootStore from './Stores';\nimport { setWebsocket } from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\n\nconfigure({ enforceActions: 'observed' });\n\nlet root_store;\n\nconst initStore = (core_store, websocket) => {\n    if (root_store) return root_store;\n\n    ServerTime.init(core_store.common);\n    setWebsocket(websocket);\n    root_store = new RootStore(core_store);\n\n    return root_store;\n};\n\nexport default initStore;\n","import React from 'react';\nimport { StoreProvider } from '@deriv/stores';\nimport { CFDStoreProvider } from './Stores/Modules/CFD/Helpers/useCfdStores';\nimport type { TCoreStores } from '@deriv/stores/types';\n\nconst CFDProviders = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    return (\n        <StoreProvider store={store}>\n            <CFDStoreProvider>{children}</CFDStoreProvider>\n        </StoreProvider>\n    );\n};\n\nexport default CFDProviders;\n","import React from 'react';\nimport Routes from './Containers/routes.jsx';\nimport initStore from './init-store';\nimport CFDProviders from './cfd-providers';\nimport type { TCoreStores } from '@deriv/stores/types';\n\ntype TAppProps = {\n    passthrough: {\n        root_store: TCoreStores;\n        WS: unknown;\n    };\n};\n\nconst App = ({ passthrough }: TAppProps) => {\n    initStore(passthrough.root_store, passthrough.WS);\n\n    return (\n        <CFDProviders store={passthrough.root_store}>\n            <Routes />\n        </CFDProviders>\n    );\n};\n\nexport default App;\n","import { createContext } from 'react';\nimport type { TStores } from '../types';\n\nconst StoreContext = createContext<TStores | null>(null);\n\nexport default StoreContext;\n","import { useContext } from 'react';\nimport StoreContext from './storeContext';\n\nconst useStore = () => {\n    const store = useContext(StoreContext);\n\n    if (!store) {\n        throw new Error('useStore must be used within StoreProvider');\n    }\n\n    return store;\n};\n\nexport default useStore;\n","import React, { useEffect } from 'react';\nimport { useSubscription } from '@deriv/api';\nimport merge from 'lodash.merge';\nimport { observer } from 'mobx-react-lite';\nimport useStore from '../useStore';\n\nconst ExchangeRatesProvider = observer(({ children }: React.PropsWithChildren<unknown>) => {\n    const { data, subscribe } = useSubscription('exchange_rates');\n    const {\n        exchange_rates: { update },\n    } = useStore();\n\n    useEffect(() => {\n        subscribe({ payload: { base_currency: 'USD' } });\n    }, [subscribe]);\n\n    useEffect(() => {\n        if (data) {\n            const { exchange_rates } = data;\n\n            if (exchange_rates) update(prev => merge(prev, exchange_rates));\n        }\n    }, [update, data]);\n\n    return <>{children}</>;\n});\n\nexport default ExchangeRatesProvider;\n","import { action, makeObservable, observable } from 'mobx';\nimport { makePersistable, stopPersisting } from 'mobx-persist-store';\n\nexport default class BaseStore<T> {\n    data: T | undefined = undefined;\n\n    constructor(name: string, onHydrationDone?: VoidFunction) {\n        makeObservable(this, {\n            data: observable,\n            update: action.bound,\n            unmount: action.bound,\n        });\n\n        makePersistable(this, { name, properties: ['data'], storage: window.localStorage }).then(() =>\n            onHydrationDone?.()\n        );\n    }\n\n    update(data: NonNullable<T> | ((previous?: T) => NonNullable<T>)) {\n        this.data = data instanceof Function ? data(this.data) : data;\n    }\n\n    unmount() {\n        stopPersisting(this);\n    }\n}\n","import BaseStore from './BaseStore';\nimport type { ExchangeRatesResponse } from '@deriv/api-types';\n\nexport default class ExchangeRatesStore extends BaseStore<ExchangeRatesResponse['exchange_rates']> {\n    constructor() {\n        super('ExchangeRatesStore');\n    }\n}\n","import BaseStore from './BaseStore';\n\nconst FLAGS = {\n    foo: false,\n    bar: false,\n    baz: false,\n    // Add your flag here 🚀\n} satisfies Record<string, boolean>;\n\nexport default class FeatureFlagsStore extends BaseStore<{ [k in keyof typeof FLAGS]: boolean }> {\n    constructor() {\n        super('FeatureFlagsStore', () => {\n            // Set the default values for the first time.\n            if (!this.data) this.update(FLAGS);\n\n            // Update the store data if a new flag was added or removed.\n            if (this.data && Object.keys(this.data).length !== Object.keys(FLAGS).length) {\n                this.update(old => {\n                    const data = FLAGS;\n\n                    Object.keys(FLAGS).forEach(flag => {\n                        // @ts-expect-error flag key is always present in the object, Hence can ignore the TS error.\n                        if (old[flag] !== undefined) data[flag] = old[flag];\n                    });\n\n                    return data;\n                });\n            }\n        });\n    }\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { ExchangeRatesProvider } from './providers';\nimport StoreContext from './storeContext';\nimport { ExchangeRatesStore, FeatureFlagsStore } from './stores';\nimport type { TCoreStores, TStores } from '../types';\n\nconst StoreProvider = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    const memoizedValue: TStores = useMemo(() => {\n        // If the store is mocked for testing purposes, then return the mocked value.\n        if ('is_mock' in store && store.is_mock) return store as unknown as TStores;\n\n        // Otherwise, instantiate store and return it.\n        return {\n            ...store,\n            exchange_rates: new ExchangeRatesStore(),\n            feature_flags: new FeatureFlagsStore(),\n        };\n    }, [store]);\n\n    useEffect(() => {\n        return () => {\n            Object.values(memoizedValue).forEach(value => {\n                if (typeof value === 'object' && 'unmount' in value) value.unmount();\n            });\n        };\n    }, [memoizedValue]);\n\n    return (\n        <StoreContext.Provider value={memoizedValue}>\n            <ExchangeRatesProvider>{children}</ExchangeRatesProvider>\n        </StoreContext.Provider>\n    );\n};\n\nexport default StoreProvider;\n"],"names":["QueryClient","name","useState","is_loading","setIsLoading","is_subscribed","setSubscribed","error","setError","data","setData","subscriber","useRef","WS","useWS","subscribe","useCallback","props","prop","payload","undefined","current","response","e","unsubscribe","useEffect","PlatformIcons","Derived","styles","viewBox","fill","xmlns","d","Financial","CFDs","DerivEz","SwapFree","icon","className","size","onClick","PlatformIcon","style","width","height","CFDAccountCopy","text","Clipboard","text_copy","info_message","isMobile","localize","success_message","popoverAlignment","Checkmark","Icon","custom_color","SuccessDialog","classNameMessage","has_cancel","has_submit","message","onCancel","onSubmit","heading","icon_size","text_submit","text_cancel","is_open","toggleModal","title","has_close_icon","is_medium_button","Modal","small","Body","classNames","Text","as","weight","Localize","i18n_default_text","React","Footer","Button","has_effect","secondary","medium","large","primary","defaultProps","propTypes","PropTypes","icon_type","confirm_label","platform","onConfirm","context","initialValues","password","isSubmitting","handleSubmit","CFD_PLATFORMS","MT5","align","values","getCFDPlatformLabel","color","FormSubmitButton","is_center","label","cancel_label","CFDDbviOnboarding","account_status","fetchAccountSettings","is_virtual","client","updateAccountStatus","updateMT5Status","disableApp","enableApp","useCfdStore","has_created_account_for_selected_jurisdiction","has_submitted_cfd_personal_details","is_cfd_verification_modal_visible","jurisdiction_selected_shortcode","enableCFDPasswordModal","toggleCFDVerificationModal","showSubmittedModal","setShowSubmittedModal","getAccountStatusFromAPI","get_account_status","getAuthenticationStatusInfo","poi_acknowledged_for_maltainvest","poi_acknowledged_for_bvi_labuan_vanuatu","poa_acknowledged","poa_resubmit_for_labuan","need_poa_submission","Jurisdiction","getModalTitle","getModalContent","InputField","maxLength","optional","field","form","errors","touched","Input","type","required","autoComplete","validatePersonalDetails","residence_list","account_opening_reason","is_tin_required","tax_residence_obj","filter","res","tax_residence","tin_format","tin_regex","validations","citizen","v","map","i","includes","tax_identification_number","some","regex","match","value","place_of_birth","mappedKey","Object","entries","forEach","field_name","key","error_index","findIndex","changeable_fields","landing_company","index","form_error","config","tax_details_required","length","Loading","is_fullscreen","validateOnChange","validateOnBlur","validate","actions","idx","is_dirty","citizen_text","tax_residence_text","place_of_birth_text","item","findDefaultValuesInResidenceList","setSubmitting","submitForm","isDeepEqual","validateOnMount","handleChange","handleBlur","setFieldValue","isValid","citizenship_error","place_of_birth_error","tax_residence_error","account_opening_reason_error","is_citizenship_disabled","is_place_of_birth_disabled","is_tax_residence_disabled","is_account_opening_reason_disabled","handleItemSelection","_field","item_value","tin_field_label","find","AutoHeightWrapper","default_height","height_offset","isDesktop","setRef","ref","noValidate","Div100vhContainer","max_autoheight_offset","is_disabled","ThemedScrollbars","is_bypassed","DesktopWrapper","Autocomplete","id","disabled","list_items","onItemSelection","list_portal_id","MobileWrapper","SelectNative","placeholder","use_text","onChange","target","should_hide_disabled_options","onBlur","Dropdown","is_align_text_left","list","data_testid","has_separator","FormSubmitErrorMessage","keys","is_absolute","poa_status","form_state","document_upload","setDocumentUpload","hasPOAFailed","sethasPOAfailed","PoaStatusCodes","validLength","uploadables","setFormState","authorized","api_response","storage","onSave","poa_failed_status","needs_poi","identity_status","poi_status","refreshNotifications","isFormDisabled","address_line_1","address_city","address_state","address_postcode","is_form_visible","address_line_2","validateForm","onSubmitValues","is_ok","validAddress","validLetterSymbol","validation_errors","max","max_number","rules","onFileDrop","setFieldTouched","files","error_message","states_list","file_uploader_ref","df","document_file","useStore","common","notifications","traders_hub","fetchResidenceList","is_switching","is_high_risk","is_withdrawal_lock","should_allow_authentication","account_settings","getChangeableFields","app_routing_history","routeBackInApp","is_eu_user","poi_state","citizen_data","onStateChange","setPOIState","status","CFDPOI","observer","setAccountSettings","setFormError","form_values","setFormValues","initiatePersonalDetails","getSettings","get_settings_response","get_settings","transform","then","result","getPropertyValue","saveFormData","_index","updateValue","setSettings","getPersonalDetailsForm","onFinish","removeNotificationMessage","removeNotificationByKey","addNotificationMessageByKey","authentication_status","email","is_fully_authenticated","fetchStatesList","storeProofOfAddress","passthroughProps","step","setStep","state_index","is_mounted","need_poi_for_maltainvest","need_poi_for_bvi_labuan_vanuatu","is_authenticated_with_idv_photoid","status_list","useIsAccountStatusPresent","poi_config","body","form_value","forwarded_props","poa_config","CFDPOA","upload_file","personal_details_config","CFDPersonalDetailsContainer","shouldShowPOA","LABUAN","document_status","should_show_personal_details","MALTA_INVEST","verification_configs","items","setItems","unmount","cloned_items","getCurrent","BodyComponent","passthrough","reduce","forwarded_prop","assign","ChangePassword","PasswordReset","account_group","onClickSendEmail","redirect_to","Number","password_reset_code","verifyEmail","url_parameters","SendEmailTemplate","subtitle","lbl_no_receive","txt_resend","txt_resend_in","multi_step_ref","steps","component","goNextStep","goPrevStep","MultiStep","CFDPasswordSuccessMessage","is_investor","InvestorPasswordManager","error_message_investor","is_submit_success_investor","setPasswordType","validatePassword","initial_values","old_password","new_password","password_type","PasswordInput","PasswordMeter","input","has_error","custom_feedback_messages","getErrorMessages","password_warnings","has_warning","hint","tertiary","CountdownComponent","count_from","onTimeout","count","setCount","interval","setTimeout","clearTimeout","CFDPasswordReset","sendVerifyEmail","account_type","server","is_resend_verification_requested","setResendVerification","is_resend_verification_sent","setResendVerificationSent","localStorage","setItem","join","components","CFDPasswordManagerTabContentWrapper","lbl_previous","CFDPasswordManagerTabContent","selected_login","onChangeActiveTabIndex","active_tab_index","setActiveTabIndex","setErrorMessageInvestor","setSubmitSuccessInvestor","container_height","min","validPassword","toLowerCase","min_number","CFDStore","changePassword","login","trading_password_manager","autohide","DXTRADE","Tabs","active_index","onTabItemClick","top","is_visible","selected_account_type","selected_account_group","selected_server","ui","setIndex","fallback","UILoader","should_header_stick_body","PageOverlay","portal_id","header","onClickClose","account_title","should_set_trading_password","element","alignment","is_password_reset_error","ReviewMessageForMT5","manual_status","is_selected_mt5_verified","show_eu_related_content","window","error_type","CreatePassword","is_real_financial_stp","handlePasswordInputChange","submitPassword","CFDPasswordForm","closeModal","has_mt5_account","onForgotPassword","useMemo","cancel_button_label","handleCancel","has_cancel_button","button_label","showJuristiction","platform_name","account","getFormattedJurisdictionCode","getAccountTitle","legal_entity_name","getLegalEntityName","landing_companies","is_logged_in","is_dxtrade_allowed","mt5_login_list","disableCFDPasswordModal","getAccountStatus","has_cfd_error","is_cfd_success_dialog_enabled","is_cfd_password_modal_enabled","setCFDSuccessDialog","submitMt5Password","submitCFDPassword","new_account_response","useHistory","is_password_modal_exited","setPasswordModalExited","isArray","is_password_error","is_password_reset","is_sent_email_modal_open","setIsSentEmailModalOpen","poi_verified_for_bvi_labuan_vanuatu","poi_verified_for_maltainvest","poa_verified","getVerificationStatus","setIsSelectedMT5Verified","BVI","closeDialogs","should_show_password_modal","should_show_password","category","handleForgotPassword","password_modal","cfd_password_form","should_show_password_dialog","should_show_success","getSubmitText","category_label","type_label","getMtCompanies","getDxCompanies","short_title","DERIVEZ","getDerivezCompanies","jurisdiction_label","success_modal_submit_label","should_show_sent_email_modal","CFDPasswordModal","ResetPasswordIntent","group","current_list","children","is_eu","reset_password_intent","getItem","reset_password_type","test","split","pop","CFDResetPasswordModal","is_cfd_reset_password_modal_enabled","setCFDPasswordResetModal","error_code","is_finished","changed_password_type","state","setState","clearAddressBar","removeItem","resetPassword","request","account_id","verification_code","tradingPlatformInvestorPasswordReset","code","getIsListFetched","is_invalid_investor_token","onMount","redirectToLogin","getLanguage","line_height","clearCFDError","should_show_error","Dialog","confirm_button_text","UnhandledErrorModal","is_top_up_virtual_open","is_top_up_virtual_in_progress","is_top_up_virtual_success","closeTopUpModal","closeSuccessTopUpModal","current_account","dxtrade_companies","derivez_companies","mt5_companies","topUpVirtual","platform_title","getTopUpConfig","minimum_amount","additional_amount","Money","amount","currency","show_currency","display_balance","has_sign","balance","getAccounts","is_uk","account_types_count","mt_gaming_company","financial","mt_financial_company","financial_stp","dxtrade_gaming_company","dxtrade_financial_company","Boolean","financial_eu_trading_instruments","attribute","mt5","synthetic","synthetic_eu","financial_au","financial_eu","footnote","dxtrade","CFDAttributeDescriber","counter","setIsVisible","compareAccountsData","is_eu_client","residence","is_australian","table","getFinancialObject","footnote_number","row","synthetic_object","financial_object","footnote_counter","filterAvailableAccounts","CFDCompareAccountHint","show_risk_message","cols","setCols","template_columns","updateColumnsStyle","financial_account_table_head_text","Table","Header","Row","Head","fixed","isLandingCompanyEnabled","col","j","Cell","getEuFooterButtons","action","pre_appstore_class","available_accounts_count","classname_for_demo_and_eu","is_pre_appstore_setting","content_flag","is_high_risk_for_mt5","CFDs_restricted_countries","financial_restricted_countries","is_preappstore_restricted_cr_demo_account","is_leverage_row","is_platform_row","is_instruments_row","is_other_countries","getContentSize","synthetic_bvi","derivx","financial_svg","financial_labuan","ContentFlag","CR_DEMO","HIGH_RISK_CR","rowKey","tooltip_msg","Array","options","should_show_asterick_at_end","Popover","classNameBubble","disable_message_icon","is_bubble_hover_enabled","zIndex","is_demo_tab","is_preappstore_cr_demo_account","is_real_enabled","openDerivRealAccountNeededModal","openPasswordModal","real_account_creation_unlock_date","setShouldShowCooldownModal","should_show_derivx","toggleCompareAccounts","has_real_account","has_active_real_account","should_restrict_bvi_account_creation","should_restrict_vanuatu_account_creation","trading_platform_available_accounts","upgradeable_landing_companies","openSwitchToRealAccountModal","setAppstorePlatform","no_CR_account","no_MF_account","setAccountType","setJurisdictionSelectedShortcode","has_submitted_personal_details","setHasSubmittedPersonalDetails","mt5_platforms","market_type","shortcode","has_synthetic","available_accounts_keys","logged_out_available_accounts_count","synthetic_accounts_count","startsWith","financial_accounts_count","poi_or_poa_not_submitted","poa_pending","footer_button_data","modal_content","isMt5AccountAdded","market","current_account_type","landing_company_short","onButtonClick","should_show_missing_real_account","type_of_account","SVG","VANUATU","onSelectRealAccount","synthetic_svg","EU_DEMO","financial_maltainvest","paddingTop","padding","synthetic_vanuatu","financial_bvi","financial_vanuatu","row_data","available_accounts_values","acc","content_data","col_num","sorted_values","el","rest","shouldShowPendingStatus","primary_light","getLoggedInTypesCount","dxtrade_all_company","prev","DxtradeCompareAccountContent","has_unmerged_account","is_populating_mt5_account_list","is_compare_accounts_visible","toggleCompareAccountsModal","location","pathname","has_derivx","is_dxtrade","cfd_account_button_label","getCFDModalTitle","getModalStyle","marginTop","exit_classname","MobileDialog","portal_element_id","wrapper_classname","visible","onClose","header_classname","has_full_height","jurisdictionVerificationContents","short_description","required_verification_docs","document_number","selfie","identity_document","name_and_address","not_applicable","status_references","card_classname","is_card_selected","toggleCardFlip","verification_docs","verification_item","status_item","clickable_description","description_part","title_indicators","type_of_card","poi_pending_for_bvi_labuan_vanuatu","poi_resubmit_for_bvi_labuan_vanuatu","poi_pending_for_maltainvest","poi_resubmit_for_maltainvest","need_poa_resubmission","getVerificationIconVariant","verification_document","icon_variant","display_text_skin_color","display_text","concat","card_section_item","description","card_data","card_values","is_over_header_available","over_header","is_non_idv_design","is_synthetic","is_swapfree","svg","synthetic_contents","financial_contents","swapfree_contents","synthetic_verification_docs","financial_verification_docs","bvi","vanuatu","labuan","maltainvest","non_synthetic_card_data","is_card_flipped","setIsCardFlipped","event","stopPropagation","cardType","synthetic_available_accounts","financial_available_accounts","real_synthetic_accounts_existing_data","real_financial_accounts_existing_data","real_swapfree_accounts_existing_data","swapfree_available_accounts","disableCard","jurisdiction_cards_array","card","cardsToBeShown","class_name","is_checked","onCheck","dbvi_company_names","tnc_url","Checkbox","company","StaticUrl","href","defaultChecked","FooterNote","account_type_name","getMT5Title","is_jurisdiction_modal_visible","toggleJurisdictionModal","checked","setChecked","available_account","is_svg_selected","is_bvi_selected","is_vanuatu_selected","is_labuan_selected","is_maltainvest_selected","is_idv_country","elem","identity","services","idv","is_country_supported","has_idv_attempts","authentication","submissions_left","modal_title","SpecBox","is_bold","is_broker","PasswordBox","relative_render","transparent","mt5_trade_account","onPasswordManager","getCompanyShortcode","getCFDAccountDisplay","sub_account_type","is_mt5_trade_modal","display_login","server_info","environment","getCFDAccountKey","DMT5","getTitle","getMT5WebTerminalLink","loginid","server_name","rel","getPlatformMt5DownloadLink","src","getUrlBase","getPlatformSettings","is_demo","dxtrade_tokens","derivez_tokens","CFDTradeModal","PlatformsDesktopDownload","getDerivEzWebTerminalLink","getDXTradeWebTerminalLink","PlatformsDesktopDownloadLinks","platformsIcons","CTraderAndDerivEZDescription","charAt","toUpperCase","slice","platformsText","PlatformIconsAndDescriptions","platform_type","app_title","downloadCenterAppOption","downloadCenterDescription","mobileDownloadLink","acc_type","qr_code_width","OSDetect","isDesktopOs","maxWidth","getPlatformQRCode","getPlatformDXTradeDownloadLink","getPlatformDerivEZDownloadLink","token","url","all_config","leverage","synthetic_config","financial_config","demo","all","dxtrade_account_type","real","mt5_account_type","financial_stp_config","all_svg","derivez","financial_fx","financial_v","derivez_account_type","jurisdiction_code","formatted_label","CFDStoreContext","createContext","CFDStoreProvider","modules","Provider","cfd","store","useContext","Error","this","has","indexOf","push","prototype","hasOwnProperty","call","error_count","rule","is_rule_string","rule_object","validator","func","getPreBuildDVRs","template","name1","name2","add","ruleObject","Validator","getRuleObject","condition","is_valid","addFailure","check","BaseStore","validation_rules","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","partial_fetch_time","makeObservable","observable","retrieveFromStorage","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","bound","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","root_store","local_storage_properties","session_storage_properties","store_name","defineProperty","enumerable","writable","setupReactionForLocalStorage","setupReactionForSessionStorage","properties","snapshot","toJS","isEmptyObject","p","reaction","saveToStorage","STORAGES","LOCAL_STORAGE","SESSION_STORAGE","JSON","stringify","getSnapshot","sessionStorage","local_storage_snapshot","parse","session_storage_snapshot","k","propertyName","messages","x","property","intercept","change","newValue","trigger","inputs","isPassed","get","listener","when","switch_broadcast","switchEndSignal","isProduction","console","pre_switch_broadcast","setPreSwitchAccount","has_logged_out","setLogout","initialized_broadcast","setInitialized","is_network_online","is_online","is_dark_mode_on","has_real_account_signup_ended","setRealAccountSignupEnd","reactions","act","freeze","Symbol","is_cfd_personal_details_modal_visible","is_mt5_trade_modal_visible","map_type","is_account_being_created","is_mt5_financial_stp_modal_open","computed","is_high_risk_client_for_mt5","override","checkShouldOpenAccount","realAccountSignupEndListener","resetFormErrors","createCFDAccount","getName","openMT5Account","openCFDAccount","beginRealSignupForMt5","enableMt5FinancialStpModal","setCurrentAccount","setMT5TradeAccount","setIsAccountBeingCreated","setCFDNewAccount","creatMT5Password","createCFDPassword","getRealSyntheticAccountsExistingData","getRealFinancialAccountsExistingData","getRealSwapfreeAccountsExistingData","toggleMT5TradeModal","disableMt5FinancialStpModal","setDxtradeToken","setDerivezToken","loadDxtradeTokens","loadDerivezTokens","derivez_accounts_list","getAccountListKey","dxtrade_accounts_list","is_cfd_page","set_password","post_signup","Promise","resolve","realCFDSignup","demoCFDSignup","tradingPlatformAccountsList","trading_platform_accounts_list_response","responseTradingPlatformAccountsList","trading_platform_new_account","first_name","type_request","getAccountTypeFields","country_code","phone","mt5NewAccount","mainPassword","email_address","address","city","country","zipCode","sub_account_category","tradingPlatformNewAccount","openRealAccountSignup","meta","obj","cfd_new_account","setStatus","reject","msg","is_btn_loading","upload","warning","has_poi","is_mt5_password_not_set","is_dxtrade_password_not_set","tradingPlatformPasswordChange","resetForm","success","mt5LoginList","mt5_login_list_response","responseMt5LoginList","transferBetweenAccounts","tradingServers","responseMT5TradingServers","mt5_new_account","setTopUpInProgress","send","trading_platform_deposit","to_account","mt5Deposit","to_mt5","new_balance","runInAction","service_token","has_existing_account","getServiceToken","pandats","every","tradingPlatformInvestorPasswordChange","static_hash","PromiseClass","promise","module","exports","string","content","to_replace","replace","s","createElement","tag_name","attributes","document","attr","textContent","html","setAttribute","getStaticHash","querySelector","getAttribute","onClickSignup","is_invisible","theme","invisible","from","inx","general_messages","DxtradeDesktopDownload","MT5DesktopDownload","MobileDownload","classnames","QRCodeBox","is_switch_to_deriv_account_modal_visible","is_closed_on_confirm","account_icons","AddAccountButton","onSelectAccount","displayName","CFDAccountCardAction","handleClickSwitchAccount","is_accounts_switcher_on","is_button_primary","lbl_add_account","cta_label","CFDAccountCard","commission_message","descriptor","existing_accounts_data","has_banner","has_cfd_account_error","onClickFund","specs","toggleAccountsDialog","toggleShouldShowRealAccountsList","setIsAcuityModalOpen","isEligibleForMoreRealMt5","isEligibleForMoreDemoMt5Svg","existing_data","should_show_extra_add_account_button","platform_icon","has_popular_banner","has_demo_banner","has_server_banner","wrapper_ref","button_ref","getServerName","server_region","geolocation","region","sequence","is_web_terminal_unsupported","tbody_content","spec_attribute","all_svg_acc","svg_acc","should_show_pending_button","getBannerStatus","selected_account_data","margin","mobileOSDetect","CSSTransition","in","timeout","unmountOnExit","real_synthetic_specs","real_financial_specs","real_all_specs","eu_real_financial_specs","real_financial_stp_specs","au_real_financial_specs","demo_financial_stp_specs","demo_all_specs","standpoint","openAccountTransfer","openPasswordManager","current_list_index","malta","enabled","_acc","cur","specifications","is_eu_country","has_maltainvest_account","openAccountNeededModal","isSyntheticCardVisible","isFinancialCardVisible","isSwapFreeCardVisible","openAccountTransferList","financial_specs","should_show_eu","iom","CFDRealAccountDisplay","isDxtradeAllCardVisible","realSyntheticAccountsExistingData","realFinancialAccountsExistingData","isAccountOfTypeDisabled","should_enable_add_button","onClickFundReal","isMT5AccountCardDisabled","account_key","list_item","Carousel","nav_position","show_bullet","item_per_window","is_mt5","loading_component","LoadingComponent","is_logging_in","is_mt5_allowed","mt5_disabled_signup_types","dxtrade_disabled_signup_types","dxtrade_accounts_list_error","has_mt5_real_account_error","has_account_error_in_mt5_real_list","has_mt5_demo_account_error","has_dxtrade_real_account_error","has_dxtrade_demo_account_error","platform_verification_code","website_status","dxtrade_verification_code","dxtrade_status_server","dx_trade_status","dxtrade_user_exception","openTopUpModal","NotificationMessages","notification_messages_ui","is_reset_trading_password_modal_visible","toggleResetTradingPasswordModal","is_demo_enabled","is_notification_loaded","setIsNotificationLoaded","password_manager","useLocation","history","openResetPassword","setIsRealEnabled","should_enable_tab","setIsDemoEnabled","hash","setActiveIndex","updated_state","togglePasswordManagerModal","selected_account","account_category","hasAccount","has_synthetic_account","getIsSuspendedMt5Server","type_server","is_suspended_mt5_demo_server","is_suspended_dxtrade_real_server","has_mt5_account_error","is_suspended_mt5_real_server","has_dxtrade_account_error","is_user_exception","has_cfd_real_account_mt5_error","has_cfd_demo_account_mt5_error","mt5_verification_code","to","routes","stopNotificationLoading","openRealPasswordModal","platform_name_trader","platform_name_dbot","routesConfig","Page404","route_default","path","error404","is_authenticated","findRouteByPath","routes_config","route_info","match_path","matchPath","BinaryLink","active_class","is_dashboard","PlatformContext","normalizePath","route","getRoutesConfig","NavLink","activeClassName","exact","Route","render","Redirect","default_subroute","subroutes","subroute","has_default_subroute","removeBranchName","default_title","Switch","ErrorComponent","is_dialog","redirect_label","redirectOnClick","should_show_refresh","refresh_message","reload","PageErrorContainer","error_header","error_messages","redirect_urls","trade","redirect_labels","buttonOnClick","Routes","withRouter","ModulesStore","common_store","clock_started","pending","RootStore","core_store","gtm","pushwoosh","init","server_time","clone","timePromise","configure","enforceActions","websocket","ServerTime","setWebsocket","initStore","StoreContext","useSubscription","update","exchange_rates","base_currency","merge","onHydrationDone","makePersistable","Function","stopPersisting","ExchangeRatesStore","FLAGS","foo","bar","baz","FeatureFlagsStore","old","flag","memoizedValue","is_mock","feature_flags"],"sourceRoot":""}