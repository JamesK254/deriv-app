{"version":3,"file":"reports/js/reports.reports-routes.8a52dc3f8e0e516e4f5a.js","mappings":"4XAOMA,EAAwB,SAAH,OAAMC,EAAK,EAALA,MAAK,OAClC,kBAAC,KAAa,CACVC,OAAQ,GACRC,MAAO,IACPF,MAAOA,EACPG,gBAAiB,uBACjBC,gBAAiB,yBAEjB,0BAAMC,EAAE,KAAKC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIN,MAAM,KAAKD,OAAO,OACpD,0BAAMI,EAAE,KAAKC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIN,MAAM,KAAKD,OAAO,OACpD,0BAAMI,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIN,MAAM,MAAMD,OAAO,MACtD,0BAAMI,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIN,MAAM,MAAMD,OAAO,MACtD,0BAAMI,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIN,MAAM,KAAKD,OAAO,MACrD,0BAAMI,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIN,MAAM,KAAKD,OAAO,MACrD,0BAAMI,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIN,MAAM,KAAKD,OAAO,MACrD,0BAAMI,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIN,MAAM,KAAKD,OAAO,MACzC,ECSpB,QAtBiC,SAAH,OAC1BQ,EAAiB,EAAjBA,kBACAC,EAAc,EAAdA,eACAC,EAAiB,EAAjBA,kBACAC,EAAwB,EAAxBA,yBAAwB,OAExB,kBAAC,aAAc,KACX,yBAAKC,UAAU,uBACX,kBAAC,EAAAC,KAAI,CACDC,YAAY,8BACZC,KAAMN,EACNG,UAAU,4BACVI,MAAM,WACNC,KAAM,KAEV,kBAAC,EAAAC,KAAI,CAACD,KAAK,KAAKE,MAAM,SAASH,MAAM,WAAWJ,UAAU,6BACpDJ,EAAwCG,EAApBD,IAGjB,E,0FCGrB,SAAeU,EAAAA,EAAAA,KAAQ,gBAAGC,EAAM,EAANA,OAAiB,MAAoB,CAC3DC,WADuC,EAATC,UACRD,WACtBE,YAAaH,EAAOG,YACvB,GAHD,EAnB6B,SAAH,GAA0E,IAApEC,EAAa,EAAbA,cAAeH,EAAU,EAAVA,WAAYE,EAAW,EAAXA,YACvD,IAAKC,EACD,OAAO,8BAEX,IAAMC,EAAeD,EAAcE,aAAcC,EAAAA,EAAAA,gBAAeH,GAEhE,OACI,kBAAC,EAAAI,eAAc,CACXH,aAAcA,EACdI,YAAaL,EAAcM,YAC3BC,cAAeA,EAAAA,cACfV,WAAYA,EACZE,YAAaA,EACbS,WAAYR,EAAcS,WAC1BC,YAAaV,EAAcE,YAGvC,IC9BO,IAAMS,EAAkB,SAACC,GAAa,OAAOA,EAAMC,QAAQ,KAAM,KAAO,EAAI,SAAW,MAAM,E,+hCC2DpG,SAAelB,EAAAA,EAAAA,KAAQ,YAAY,MAAoB,CACnDmB,YAD+B,EAAThB,UACCgB,YAC1B,GAFD,EA3CuB,SAAH,GAOG,IANnBC,EAAM,EAANA,OACAC,EAAQ,EAARA,SACAhB,EAAa,EAAbA,cACAiB,EAAS,EAATA,UACAH,EAAW,EAAXA,YACAI,EAAiB,EAAjBA,kBAEmE,IAAnCC,IAAAA,SAA8B,MAAK,GAA5DC,EAAQ,KAAEC,EAAW,KAC4B,IAAjBF,IAAAA,SAAe,GAAE,GAAjDG,EAAY,KAAEC,EAAc,KASnC,OAPAJ,IAAAA,WAAgB,WACZE,GAAY,WACR,OAAON,GAAUO,EAAe,SAAW,MAC/C,IACAC,EAAeR,EACnB,GAAG,CAACA,EAAQO,IAGR,yBAAKnC,UAAU,8BACX,yBAAKA,UAAU,sCACX,kBAAC,EAAAqC,MAAK,CAACT,OAAQU,KAAKC,IAAIX,GAASC,SAAUA,IAC/B,cAAXW,QAAqC,IAAXZ,GACvB,kBAAC,aAAc,KACG,WAAbK,GAAyB,kBAAC,EAAAhC,KAAI,CAACE,KAAK,aACvB,SAAb8B,GAAuB,kBAAC,EAAAhC,KAAI,CAACE,KAAK,aAI/C,kBAAC,EAAAsC,eAAc,MACTX,GACE,kBAAC,EAAAY,aAAaC,KAAI,CACd9B,cAAeA,EACfkB,kBAAmBA,EACnBX,cAAeA,EAAAA,cACfO,YAAaA,KAMrC,IC0DA,QAjG4B,SAAH,GAMG,ICeEiB,EDpB1BC,EAAuB,EAAvBA,wBACA1C,EAAI,EAAJA,KACA2C,EAAO,EAAPA,QAAO,IACPC,wBAAAA,OAAuB,IAAG,GAAI,MAC9BC,uBAAAA,OAAsB,IAAG,GAAI,EAEvBC,EAAyD,iBAAtBH,EAAQI,UAC3CC,GAAsBC,EAAAA,EAAAA,0BAAyBN,EAAQI,WACvDG,GAAcC,EAAAA,EAAAA,WAAU,CAAEC,eAAgBJ,IAC1CK,ECcsB,SAACC,GAAoE,IAAlDJ,EAAc,UAAH,8CAAUK,EAAmB,UAAH,8CAC9EC,EACFF,IACCG,EAAAA,EAAAA,mBAAkBP,GAAaI,EAASI,eAC7C,OAAKF,IACGD,GAAoBC,EAAWG,aAAgBH,EAAWI,OAD1C,IAE5B,CDpB2BC,CACnBb,EAAoBM,SACpBJ,EACAR,GAEJ,OAAII,GAA6BE,EAEzB,yBACInD,UAAWiE,IAAW,qBAAsB,CACxC,iCAAkCpB,KAGtC,yBAAK7C,UAAU,2BACX,kBAAC,EAAAkE,QAAO,CACJC,gBAAgB,8BAChBC,gBAAgB,qCAChBC,UAAU,MACVC,SCNM1B,EDMiBO,EAAoBP,WCL/DA,GAAa2B,EAAAA,EAAAA,qBAAoB3B,EAAWiB,eAAmD,MDM3EW,yBAAuB,EACvBC,qBAAmB,GAEnB,kBAAC,EAAAxE,KAAI,CACDE,KACIgD,EAAoBP,WAAU,sBACTO,EAAoBP,YACnC,YAEVvC,KAAM,MAGbwC,GAA2BC,EAAQ4B,cAGxC,yBAAK1E,UAAU,+BACX,kBAAC,EAAAkE,QAAO,CACJC,gBAAgB,8BAChBC,gBAAgB,qCAChBC,UAAU,MACVC,QAASd,EACTgB,yBAAuB,EACvBC,qBAAmB,GAEnB,kBAAC,EAAAE,eAAc,CACXC,KACIvB,EAAW,UACDF,EAAoBM,SAAoBoB,cAAa,YACxD1B,EAAoBM,SAAoBoB,cAEnDzE,MAAM,WAGbyC,GAA2BW,GAE/BR,GAA0BG,EAAoB2B,YAC3C,yBAAK9E,UAAU,kCAAgC,IAAGmD,EAAoB2B,YAEzE/B,GAA2BI,EAAoB4B,aAC5C,yBAAK/E,UAAU,kCAAqE,KAAlCmD,EAAoB4B,YAAiB,MAI5F,CAAC,UAAW,OAAQ,UAAW,aAAc,YAAYC,SAASlC,EAAQmC,aAE7E,yBAAKjF,UAAU,sBACc,YAAxB8C,EAAQmC,aAA6B,kBAAC,EAAAhF,KAAI,CAACE,KAAMA,GAAQ,mBAAoBE,KAAM,KAC3D,eAAxByC,EAAQmC,aAAgC,kBAAC,EAAAhF,KAAI,CAACE,KAAK,sBAAsBE,KAAM,KACvD,aAAxByC,EAAQmC,aAA8B,kBAAC,EAAAhF,KAAI,CAACE,KAAK,2BAA2BE,KAAM,MACzD,SAAxByC,EAAQmC,aAAkD,YAAxBnC,EAAQmC,cACxC,kBAAC,EAAAhF,KAAI,CAACE,KAAK,gBAAgBE,KAAM,MAItC,CAAC,cAAc2E,SAASlC,EAAQmC,aAEnC,yBAAKjF,UAAU,sBACX,kBAAC,EAAAC,KAAI,CAACE,KAAK,eAAeE,KAAM,MAMxC,yBAAKhB,MAAM,KAAKD,OAAO,KAAKY,UAAU,gBAClC,0BAAMX,MAAM,KAAKD,OAAO,OAGpC,EEnGA,QANuB,SAAH,GAA6C,IAAvCqC,EAAK,EAALA,MAAOyD,EAAQ,EAARA,SACvB1C,EAAShB,EAAgBC,GAE/B,OAAO,0BAAMzB,UAAS,kBAAawC,IAAW0C,EAClD,ECGA,QARwB,SAAH,OAAMrD,EAAQ,EAARA,SAAQ,OAC/B,yBAAK7B,UAAU,qBACX,kBAAC,EAAAM,KAAI,CAACF,MAAM,qBAAqB+E,OAAO,OAAO9E,KAAK,QAC/CwB,GAEH,ECWV,IAAMuD,EAAM,CACRC,IAAK,UACLC,QAAS,UACTC,KAAM,OACNC,QAAS,UACTC,KAAM,SACNC,WAAY,OACZC,QAAS,UACTC,WAAY,aACZC,SAAU,Y,uDCjBd,QAZgB,SAAH,OAAM7F,EAAS,EAATA,UAAW8F,EAAY,EAAZA,aAAcC,EAAK,EAALA,MAAOC,EAAE,EAAFA,GAAI9F,EAAW,EAAXA,YAAW,OAC9D,yBACI8F,GAAIA,EACJ,cAAa9F,EACbF,UAAWiE,IAAW,aAAc,eAAF,OAAiB8B,GAAS,QAAU,CAAEE,UAAWH,GAAgB9F,IAElGkG,MAAMC,KAAK,IAAID,MAAM,IAAId,KAAI,SAAC5F,EAAG4G,GAAG,OACjC,yBAAKC,IAAKD,EAAKpG,UAAS,6CAAwCoG,EAAM,EAAC,gBAAQA,EAAM,IAAO,IAE9F,ECRV,IAAME,EAAuB,SAAAC,GACzB,IAAMC,EAAwBD,EAAME,wBACpC,OACI,kBAAC,aAAc,KACVF,EAAMG,UACH,kBAACF,EAAqB,CAClB3G,eAAgB0G,EAAM1G,eACtBD,kBAAmB2G,EAAM3G,kBACzBE,kBAAmByG,EAAMzG,kBACzBC,yBAA0BwG,EAAMxG,2BAGvCwG,EAAM7F,YAAc,kBAAC,EAAO,CAACR,YAAY,yBAGtD,EAEAoG,EAAqBK,UAAY,CAC7B9G,eAAgB+G,IAAAA,OAChBH,wBAAyBG,IAAAA,KACzBhH,kBAAmBgH,IAAAA,KACnBF,SAAUE,IAAAA,KACVlG,WAAYkG,IAAAA,KACZ9G,kBAAmB8G,IAAAA,OACnB7G,yBAA0B6G,IAAAA,QAG9B,U,k7DCqCA,IAAMC,EAA0B,SAAH,OAAMH,EAAQ,EAARA,SAAU7G,EAAc,EAAdA,eAAgBqF,EAAQ,EAARA,SAAQ,OACjE,kBAAC,aAAc,KACVwB,EACG,kBAAC,EAAoB,CACjBA,SAAUA,EACVD,wBAAyBK,EACzBjH,eAAgBA,EAChBC,mBAAmBiH,EAAAA,EAAAA,UAAS,qCAGhC7B,EAES,EA0Ff8B,EAAoB,SAAH,GASQ,UAR3BC,IAAAA,OAAG,IAAG,GAAC,EAAC,EACRnF,EAAS,EAATA,UAAS,IACToF,YAAAA,OAAW,IAAG,GAAC,EAAC,MAChBtG,YAAAA,OAAW,IAAG,GAAAuG,EAAAA,EAAAA,YAAU,EACxBC,EAAa,EAAbA,cACAzF,EAAW,EAAXA,YACA0F,EAAO,EAAPA,QACGd,EAAK,OAQR,GANAvE,IAAAA,WAAgB,WACPF,GACDuF,SAAAA,GAER,GAAG,CAAkB,QAAlB,EAACJ,EAAIpG,qBAAa,aAAjB,EAAmB+B,WAAYyE,EAASvF,IAExCA,EACA,OACI,oCACI,yBAAK9B,UAAU,6CACX,6BACI,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYO,WAC7C,kBAAC,EAAAH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYQ,UAEjD,6BACI,kBAAC,EAAAJ,SAASC,KAAI,CACVvH,UAAU,8BACViH,IAAKA,EACLO,OAAQN,EAAYS,aAExB,kBAAC,EAAAL,SAASC,KAAI,CAACvH,UAAU,8BAA8BiH,IAAKA,EAAKO,OAAQN,EAAYU,YAOzG,MACIX,EADIpG,EAAa,EAAbA,cAAegH,EAAe,EAAfA,gBAAiBjD,EAAI,EAAJA,KAAM7C,EAAiB,EAAjBA,kBAEtCF,EAAyEhB,EAAzEgB,SAAUW,EAA+D3B,EAA/D2B,OAAQrB,EAAuDN,EAAvDM,YAAaG,EAA0CT,EAA1CS,WAAYP,EAA8BF,EAA9BE,WAAY+G,EAAkBjH,EAAlBiH,cACzDhH,EAAeC,GAAaC,EAAAA,EAAAA,gBAAeH,GAAiB,KAC5DkH,EAAuBhH,EAAa,SAAUiH,EAAAA,EAAAA,sBAAoBC,EAAAA,EAAAA,mBAAkBpH,IAAgB,GACpGqH,ENlK6B,SAACC,EAAkBjF,GACtD,GAAIA,GAAa,qBAAqBkF,KAAKlF,GAAY,MAAO,GAE9D,IACMmF,EADmB,IAAIC,OAAO,gDACDC,KAAKJ,GACxC,GAAkB,OAAdE,EAAoB,CACpB,IAAMH,EAAgBG,EAAU,GAC1BG,EAAgBN,EAAc,GAAGrE,cAAgBqE,EAAcO,MAAM,GAC3E,OAAOD,EAAcE,SAAS,KAAOF,EAAgB,GAAH,OAAMA,EAAa,IACzE,CACA,OAAOzB,EAAAA,EAAAA,UAAS,OACpB,CMuJ0B4B,EAClBC,EAAAA,EAAAA,kBAAiB/H,EAAcgI,eAAiBd,EAAuBlH,EAAcsH,UAAY,IAE/FW,GAAkBC,EAAAA,EAAAA,mBAAkBnI,EAAaU,QAAAA,EAAc,EAAGH,QAAAA,EAAe,GACnF,IAEJ,OAAI6H,EAAAA,EAAAA,sBAAqBpE,QAAAA,EAAQ,MAAOqE,EAAAA,EAAAA,uBAAsBrE,GAEtD,kBAAC,EAAAsE,oBAAmB,GAChBrI,cAAeA,EACfgH,gBAAiBA,EACjBhG,SAAUA,QAAAA,EAAY,GACtBsH,kBAAgB,EAChB/B,cAAeA,EACfzF,YAAaA,EACbf,YAAaA,EACb4B,OAAQA,QAAAA,EAAU,IACd+D,IAMZ,oCACI,yBAAKvG,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYtC,QAC5CwE,EAAAA,EAAAA,mBAAkBxE,KAAUgE,EAAAA,EAAAA,kBAAiBhE,KAAU7D,EACpD,kBAAC,EAAAsI,qBAAoB,CACjBvI,aAAcA,EACdd,UAAU,wBACVkB,YAAaC,EACbC,cAAeA,EAAAA,cACfV,YAAY,EACZE,YAAaA,EACbS,WAAYyG,EACZvG,YAAaR,IAGjB,kBAAC,EAAAuI,YAAW,CAACC,MAAOrB,EAAezG,MAAOqH,KAGlD,yBAAK9I,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYsC,YAC7C,kBAAC,EAAAlC,SAASC,KAAI,CAACvH,UAAU,8BAA8BiH,IAAKA,EAAKO,OAAQN,EAAYrF,YAEzF,yBAAK7B,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYO,WAC7C,kBAAC,EAAAH,SAASC,KAAI,CAACvH,UAAU,8BAA8BiH,IAAKA,EAAKO,OAAQN,EAAYS,cAEzF,yBAAK3H,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYQ,SAC7C,kBAAC,EAAAJ,SAASC,KAAI,CAACvH,UAAU,8BAA8BiH,IAAKA,EAAKO,OAAQN,EAAYU,UAEzF,yBAAK5H,UAAU,2BACf,yBAAKA,UAAU,kBACX,kBAAC,EAAA0C,aAAaC,KAAI,CACd9B,cAAeA,EACfkB,kBAAmBA,EACnBX,cAAeA,EAAAA,cACfO,YAAaA,KAKjC,EAEa8H,EAAqB,SAAH,OAC3BzJ,EAAS,EAATA,UACA0J,EAAO,EAAPA,QACA7J,EAAc,EAAdA,eACAgC,EAAQ,EAARA,SACA8H,EAAgB,EAAhBA,iBACAjJ,EAAU,EAAVA,WACAkJ,EAAY,EAAZA,aACAC,EAAiB,EAAjBA,kBACAC,EAAc,EAAdA,eACAC,EAAQ,EAARA,SACAC,EAAM,EAANA,OACAtD,EAAQ,EAARA,SAAQ,OAER,kBAAC,aAAc,KACVhG,EACG,kBAAC,EAAoB,CACjBA,WAAYA,EACZ+F,wBAAyBK,EACzBjH,eAAgBA,EAChBC,mBAAmBiH,EAAAA,EAAAA,UAAS,qCAGhClF,GACI,yBAAK7B,UAAU,oBACX,kBAAC,EAAAyC,eAAc,KACX,kBAACoE,EAAuB,CAAChH,eAAgBA,EAAgB6G,SAAUA,GAC/D,kBAAC,EAAAuD,UAAS,CACNjK,UAAWA,EACX0J,QAASA,EACTI,eAAgBA,EAChBI,OAAQF,EACRG,YAAaR,EACbC,aAAcA,EACdQ,WAAY,kBAAML,CAAQ,EAC1BM,eAAgBnL,GAEhB,kBAAC,EAAoB,CAACwB,WAAYA,OAI9C,kBAAC,EAAA4J,cAAa,KACV,kBAACzD,EAAuB,CAAChH,eAAgBA,EAAgB6G,SAAUA,GAC/D,kBAAC,EAAAY,SAAQ,CACLtH,UAAWA,EACXmK,YAAaR,EACbO,OAAQF,EACRO,YAAaV,EACbD,aAAcA,EACdY,QAAS,EACTC,UAAW,SAAAC,GAAI,OAAIA,aAAI,EAAJA,EAAM1E,EAAE,GAE3B,kBAAC,EAAoB,CAACtF,WAAYA,QAO7C,EAGfkJ,EAA0C,SAAAe,GAAO,aACnDA,EAAQC,eACF,CACIC,UACI,kBAAC,EAAAC,SAAQ,CACLC,kBAAkB,oHAClBC,OAAQ,CACJC,gBAGK,QAHU,GACXC,EAAAA,EAAAA,2BACIP,EAAQ/F,aACX,aAFD,EAEGb,UAKvBoH,EAAAA,EAAAA,iBAAgBR,EAAQ3E,IAAM,EAAE,EAOpCoF,EAA4D,SAACV,GAA2B,OAC1FW,MAAMC,OAAOZ,EAAKjD,aAAeiD,EAAKjD,QAAQ,EA4UlD,SAAe8D,EAAAA,EAAAA,aACX/K,EAAAA,EAAAA,KAAQ,gBAAGgL,EAAM,EAANA,OAAQ/K,EAAM,EAANA,OAAQgL,EAAE,EAAFA,GAAI9K,EAAS,EAATA,UAAW+K,EAAc,EAAdA,eAAc,MAAoB,CACxE/B,iBAAkBhJ,EAAUgJ,iBAC5B9H,SAAU2J,EAAO3J,SACjB8J,MAAOH,EAAOG,MACdC,WAAYJ,EAAOI,WACnBC,MAAOlL,EAAUkL,MACjBC,gBAAiBnL,EAAUmL,gBAC3BC,eAAgBpL,EAAUoL,eAC1BrL,WAAYC,EAAUD,WACtBsL,cAAerL,EAAUqL,cACzBC,qBAAsBR,EAAGS,yBACzB9E,cAAezG,EAAUyG,cACzBzF,YAAahB,EAAUgB,YACvBwK,QAASxL,EAAUwL,QACnBvL,YAAaH,EAAOG,YACpBwL,SAAUX,EAAGW,SACbC,cAAeZ,EAAGY,cAClBC,cAAe3L,EAAU4L,mBACzBC,gBAAiBd,EAAec,gBAChCC,YAAahB,EAAGgB,YAChBC,gBAAiBjB,EAAGiB,gBACpBC,iCAAkClB,EAAGkB,iCACrCC,0BAA2BnB,EAAGmB,0BAC9BC,+BAAgCpB,EAAGoB,+BACtC,GAxBDrM,EA7OkB,SAAH,GAiBG,MAhBlBmJ,EAAgB,EAAhBA,iBACA9J,EAAc,EAAdA,eACAgC,EAAQ,EAARA,SACAgK,EAAK,EAALA,MACAC,EAAe,EAAfA,gBACAC,EAAc,EAAdA,eACAJ,EAAK,EAALA,MACAjL,EAAU,EAAVA,WACAsL,EAAa,EAAbA,cACAJ,EAAU,EAAVA,WACAK,EAAoB,EAApBA,qBACA7E,EAAa,EAAbA,cACAzF,EAAW,EAAXA,YACAwK,EAAO,EAAPA,QACAvL,EAAW,EAAXA,YACG2F,EAAK,OAE2E,IAArBvE,IAAAA,UAAe,GAAM,GAA5E8K,EAAwB,KAAEC,EAAyB,KACuB,IAArB/K,IAAAA,UAAe,GAAM,GAA1EgL,EAAuB,KAAEC,EAAwB,KAClDC,GAA4BC,EAAAA,EAAAA,aAAYxD,GACxCyD,EAAiB,CACnB,CAAEC,MAAMtG,EAAAA,EAAAA,UAAS,WAAYuG,YAAatB,IAAkBD,GAC5D,CAAEsB,MAAMtG,EAAAA,EAAAA,UAAS,eAAgBuG,WAAYtB,GAC7C,CAAEqB,MAAMtG,EAAAA,EAAAA,UAAS,gBAAiBuG,WAAYvB,IAIjD,IAFmD/J,IAAAA,UACJ,QAA5C,EAAAoL,EAAeG,MAAK,SAAA3I,GAAI,OAAIA,EAAK0I,UAAU,WAAC,aAA5C,EAA8CD,QAAQtG,EAAAA,EAAAA,UAAS,YAClE,GAFMyG,EAAmB,KAAEC,EAAoB,KAG1CC,EAAoB,EAAC3G,EAAAA,EAAAA,UAAS,oBAAqB,KAAM,KAAM,KAAM,KAAM,MACE,IAApC/E,IAAAA,SAAe0L,EAAkB,IAAG,GAA5EC,EAAgB,KAAEC,EAAkB,KACrCC,EAA0BL,IAAwBJ,EAAe,GAAGC,KACpES,EAAyBN,IAAwBJ,EAAe,GAAGC,KACnEU,GAAyBpC,GAASC,EAClCoC,EAAsBZ,EACvBa,QAAO,SAAApF,GAAa,OAAIA,EAAcwE,QAAStG,EAAAA,EAAAA,UAAS,iBAAmBgH,CAAqB,IAChG3I,KAAI,gBAAGiI,EAAI,EAAJA,KAAI,MAAQ,CAAEA,KAAAA,EAAM5L,MAAO4L,EAAM,IACvCa,GAA0BR,EAAkBtI,KAAI,SAAA3D,GAAK,MAAK,CAAE4L,KAAM5L,EAAOA,MAAAA,EAAO,IAChF0M,GAA4BxE,aAAgB,EAAhBA,EAAkBsE,QAAO,YAAuB,IAApBpN,EAAa,EAAbA,cAC1D,OAAIA,IACIiN,GAA+B9E,EAAAA,EAAAA,sBAAqBnI,EAAcgI,eAAiB,IACnFgF,GAEI5E,EAAAA,EAAAA,uBAAsBpI,EAAcgI,iBACnC,WAAGuF,EAAAA,EAAAA,yBAAwBvN,EAAckE,aAAe,GAAE,OAAQ4I,IAC9DA,EAAiB3I,SAAS,QAGlCgE,EAAAA,EAAAA,sBAAqBnI,EAAcgI,eAAiB,OACpDI,EAAAA,EAAAA,uBAAsBpI,EAAcgI,eAIjD,IACMwF,GApJqB,SAC3BF,EACAL,EACAD,GAEA,IAAI7D,EAEJ,GAAI8D,EAAwB,CACxB,IAAIQ,EAAY,EACZ1G,EAAS,EACT2G,EAAY,EACZC,EAAY,EACZ/G,EAAW,EAEf0G,EAA0BM,SAAQ,SAAAC,GAI9B,GAHAH,GAAajD,OAAOoD,EAAc7N,cAAc0N,WAChDC,GAAalD,OAAOoD,EAAc7N,cAAc2N,WAChD/G,GAAY6D,OAAOoD,EAAcjH,UAC7BiH,EAAc7N,cAAe,SACvB8N,EAAS,CACXH,UAAgD,QAAvC,EAAEE,EAAc7N,cAAc2N,iBAAS,QAAI,EACpDD,UAAgD,QAAvC,EAAEG,EAAc7N,cAAc0N,iBAAS,QAAI,GAExD3G,IAAUgH,EAAAA,EAAAA,gBAAeD,GAErBD,EAAc7N,cAAcgO,eAC5BP,GAAaI,EAAc7N,cAAcgO,aAAaP,WAAa,EAE3E,CACJ,IACAtE,EAAS,CACLnJ,cAAe,CACX+G,OAAAA,EACA2G,UAAAA,EACAC,UAAAA,GAEJ/G,SAAAA,GAGA6G,EAAY,GACRtE,EAAOnJ,gBACPmJ,EAAOnJ,cAAcgO,aAAe,CAChCP,UAAAA,GAGhB,MAAO,GAAIT,EAAyB,CAChC,IAAIU,EAAY,EACZC,EAAY,EACZM,EAAc,EACdlH,EAAS,EAEbuG,SAAAA,EAA2BM,SAAQ,YAAuB,cAApB5N,EAAa,EAAbA,cAClC0N,KAAsC,QAAzB,EAAE1N,EAAc0N,iBAAS,QAAI,GAC1CC,KAAsC,QAAzB,EAAE3N,EAAc2N,iBAAS,QAAI,GAC1CM,GAAmE,QAAxD,EAA6B,QAA7B,EAAIjO,EAAckO,mBAAW,OAAa,QAAb,EAAzB,EAA2BD,mBAAW,WAAb,EAAzB,EAAwCE,oBAAY,QAAI,EACnEnO,IACA+G,IAAUgH,EAAAA,EAAAA,gBAAe/N,GAEjC,IACAmJ,EAAS,CACLnJ,cAAe,CACX0N,UAAAA,EACAC,UAAAA,EACA5G,OAAAA,EACAmH,YAAa,CACTD,YAAa,CACTE,aAAcF,KAI1BrH,SAAU8G,EAElB,KAAO,CACH,IAAI5G,EAAa,EACbF,EAAW,EACXwH,EAAc,EACdvH,EAAS,EAEbyG,SAAAA,EAA2BM,SAAQ,SAAAC,GAC/B/G,IAAe+G,EAAc/G,WAC7BF,GAAY6D,OAAOoD,EAAcjH,UACjCwH,GAAe3D,OAAOoD,EAAcO,aACpCvH,GAAU4D,OAAOoD,EAAchH,OACnC,IACAsC,EAAS,CACLrC,WAAAA,EACAF,SAAAA,EACAwH,YAAAA,EACAvH,OAAAA,EAER,CACA,OAAOsC,CACX,CAwD6CkF,CACrCf,GACAL,EACAD,GAGJ7L,IAAAA,WAAgB,WAMZmK,IACAgD,IAEJ,GAAG,IAEHnN,IAAAA,WAAgB,WACZmN,GAA6BjC,EAEjC,GAAG,CAACA,IAEJ,IAAMiC,GAA+B,WAC7BxF,KAD2F,UAAH,6CAAG,MAE1FmD,GACDC,EACIpD,EAAiByF,MAAK,gBAAGvO,EAAa,EAAbA,cAAa,OAAOoI,EAAAA,EAAAA,uBAAsBpI,aAAa,EAAbA,EAAegI,cAAc,KAGnGmE,GACDC,EACItD,EAAiByF,MAAK,gBAAGvO,EAAa,EAAbA,cAAa,OAAOmI,EAAAA,EAAAA,uBAAqBnI,aAAa,EAAbA,EAAegI,gBAAiB,GAAG,KAGjH,EAEA,GAAIgD,EAAO,OAAO,2BAAIA,GAEtB,IAoBMnC,GAnBEoE,EH5R6C,SAAH,OAClDjM,EAAQ,EAARA,SACAuF,EAAa,EAAbA,cACAzF,EAAW,EAAXA,YACAmK,EAAe,EAAfA,gBACAlL,EAAW,EAAXA,YAAW,MAC8B,CACzC,CACIyO,OAAOC,EAAAA,EAAAA,YAAa,IAAKvI,EAAAA,EAAAA,UAAS,QAClCwI,UAAW,OACXC,kBAAmB,YAA+C,IAA5C7E,EAAO,EAAPA,QAClB,OADoC,EAAT7I,WACLiF,EAAAA,EAAAA,UAAS,SAG3B,kBAAC,EAAmB,CAACV,IAAKsE,EAAQ3E,GAAIlD,QAAS6H,EAAQ9J,cAAemC,wBAAwB,GAEtG,GAEJ,CACIqM,OAAOtI,EAAAA,EAAAA,UAAS,cAChBwI,UAAW,aACXC,kBAAmB,gBAAG7E,EAAO,EAAPA,QAAO,OACzBA,EAAQ9J,eAAiB8J,EAAQ9J,cAAciE,WAAa,IAAH,OAAO6F,EAAQ9J,cAAciE,YAAe,EAAE,GAE/G,CACIuK,OAAOtI,EAAAA,EAAAA,UAAS,YAChBwI,UAAW,WACXC,kBAAmB,kBAAG7E,EAAO,EAAPA,QAAO,OACzB,kBAAC,EAAe,CAAC9I,UAAU4N,EAAAA,EAAAA,wBAA4C,QAAtB,EAAC9E,EAAQ9J,qBAAa,aAArB,EAAuBgB,WAAa,GAG9F,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,SAChBwI,UAAW,YACXC,kBAAmB,YAAoC,IAAjC7E,EAAO,EAAPA,QAClB,GAAIA,EAAQ9J,cAAe,CACvB,IAAsF,GAAxC8J,EAAQ9J,cAAcgO,cAAgB,CAAC,GAA7EP,UAAWoB,OAAkB,IAAG,IAAC,EACzC,OAAO,kBAAC,EAAArN,MAAK,CAACT,OAAQ+I,EAAQ9J,cAAc0N,UAAYmB,EAAoB7N,SAAUA,GAC1F,CACA,MAAO,EACX,GAEJ,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,oBAChBwI,UAAW,eACXC,kBAAmB,YAAoC,IAAjC7E,EAAO,EAAPA,QAClB,OAAKA,EAAQ9J,eAAkB8J,EAAQ9J,cAAc+B,YAEhD+M,EAAAA,EAAAA,wBAAuBhF,EAAQ9J,cAAc+B,YAE9C+H,EAAQ9J,cAAcgO,aACf,kBAAC,EAAAxM,MAAK,CAACT,OAAQ+I,EAAQ9J,cAAcgO,aAAaP,UAAWzM,SAAUA,IAE3E,KAL+DkF,EAAAA,EAAAA,UAAS,OAFP,GAQ5E,GAEJ,CACIsI,OAAOC,EAAAA,EAAAA,YACH,kBAAC,EAAAxE,SAAQ,CAACC,kBAAkB,oBAE5B,kBAAC,EAAAD,SAAQ,CAACC,kBAAkB,cAEhCwE,UAAW,WACXC,kBAAmB,gBAAGI,EAAU,EAAVA,WAAU,OAA0B,kBAAC,EAAAvN,MAAK,CAACT,OAAQgO,EAAY/N,SAAUA,GAAY,GAE/G,CACIwN,MAAO,kBAAC,EAAAvE,SAAQ,CAACC,kBAAkB,4BAA4B8E,WAAY,CAAC,wBAAIxJ,IAAK,OACrFkJ,UAAW,cACXC,kBAAmB,YAA+C,MAA5C7E,EAAO,EAAPA,QAClB,GADoC,EAAT7I,UAEvB,MAAO,GAGX,OAAwD,QAArB,EAAA6I,EAAQ9J,qBAAa,aAArB,EAAuBkO,cAAe,CAAC,EAAlED,EAAW,EAAXA,YAAagB,EAAS,EAATA,UACrB,OACI,kBAAC,aAAc,KACX,6BACKhB,SAAAA,EAAaE,aACV,kBAAC,EAAA3M,MAAK,CAAC0N,UAAQ,EAACnO,OAAQkN,EAAYE,aAAcnN,SAAUA,IAE5D,KAGR,6BACKiO,SAAAA,EAAWd,aACR,kBAAC,EAAA3M,MAAK,CAAC0N,UAAQ,EAACnO,OAAQkO,EAAUd,aAAcnN,SAAUA,IAE1D,KAKpB,GAEJ,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,iBAChBwI,UAAW,YACXC,kBAAmB,YAA+C,IAA5C7E,EAAO,EAAPA,QAClB,GADoC,EAAT7I,UAEvB,MAAO,GAGX,IAAK6I,EAAQ9J,gBAAkB8J,EAAQ9J,cAAc2N,UAAW,MAAO,IAEvE,IAAMwB,GAAepB,EAAAA,EAAAA,gBAAejE,EAAQ9J,eAC5C,OACI,yBACIb,UAAWiE,IAAW,4BAA6B,CAC/C,sCAAuC+L,EAAe,EACtD,sCAAuCA,EAAe,KAG1D,kBAAC,EAAA3N,MAAK,CAACT,OAAQ+I,EAAQ9J,cAAc2N,UAAW3M,SAAUA,IAGtE,GAEJ,CACIwN,OAAOC,EAAAA,EAAAA,YACH,kBAAC,EAAAxE,SAAQ,CAACC,kBAAkB,sBAE5B,kBAAC,EAAAD,SAAQ,CAACC,kBAAkB,wBAAwB8E,WAAY,CAAC,wBAAIxJ,IAAK,OAE9EkJ,UAAW,SACXC,kBAAmB,YAAoC,IAAjC7E,EAAO,EAAPA,QAClB,IAAKA,EAAQ9J,gBAAkB8J,EAAQ9J,cAAc+G,OAAQ,OAAO,KACpE,IAAMoI,GAAepB,EAAAA,EAAAA,gBAAejE,EAAQ9J,eAE5C,OACI,yBACIb,UAAWiE,IAAW,8BAA+B,CACjD,wCAAyC+L,EAAe,EACxD,wCAAyCA,EAAe,KAG5D,kBAAC,EAAA3N,MAAK,CAACT,OAAQU,KAAKC,IAAIyN,GAAenO,SAAUA,IACjD,yBAAK7B,UAAU,yCACVgQ,EAAe,EAAI,kBAAC,EAAA/P,KAAI,CAACE,KAAK,aAAgB,kBAAC,EAAAF,KAAI,CAACE,KAAK,YAI1E,GAEJ,CACIkP,OAAOtI,EAAAA,EAAAA,UAAS,UAChBwI,UAAW,SACXC,kBAAmB,YAA+C,IAA5C7E,EAAO,EAAPA,QAClB,GADoC,EAAT7I,UAEvB,OAAO,yBAAK9B,UAAU,+BAG1B,IAAQa,EAAkB8J,EAAlB9J,cAEAkB,GADS+J,EAAgBjL,EAAcoP,cACL,CAAC,GAAnClO,kBAER,OACI,yBAAK/B,UAAU,8BACX,kBAAC,EAAA0C,aAAawN,uBAAsB,CAChCrP,cAAeA,EACfO,cAAeA,EAAAA,cACfW,kBAAmBA,EACnBqF,cAAeA,EACfzF,YAAaA,EACbf,YAAaA,IAI7B,GAEP,CGoHkBuP,CAA0C,CAC7CtO,SAAAA,EACAuF,cAAAA,EACAzF,YAAAA,EACAmK,gBAAAA,EACAlL,YAAAA,IAGJiN,EH1H8C,SAAH,OACnDhM,EAAQ,EAARA,SACAF,EAAW,EAAXA,YACAmK,EAAe,EAAfA,gBAAe,MAC2B,CAC1C,CACIuD,OAAOC,EAAAA,EAAAA,YAAa,IAAKvI,EAAAA,EAAAA,UAAS,QAClCwI,UAAW,OACXC,kBAAmB,YAA+C,IAA5C7E,EAAO,EAAPA,QAClB,OADoC,EAAT7I,WACLiF,EAAAA,EAAAA,UAAS,SAG3B,kBAAC,EAAmB,CAChBV,IAAKsE,EAAQ3E,GACblD,QAAS6H,EAAQ9J,cACjBmC,wBAAwB,EACxBD,yBAAyB,GAGrC,GAEJ,CACIsM,OAAOtI,EAAAA,EAAAA,UAAS,eAChBwI,UAAW,cACXC,kBAAmB,gBAAG7E,EAAO,EAAPA,QAAO,OACzBA,EAAQ9J,eAAiB8J,EAAQ9J,cAAckE,YAAW,WACjDqJ,EAAAA,EAAAA,yBAAwBzD,EAAQ9J,cAAckE,aAAY,KAC7D,EAAE,GAEhB,CACIsK,OAAOtI,EAAAA,EAAAA,UAAS,YAChBwI,UAAW,WACXC,kBAAmB,kBAAG7E,EAAO,EAAPA,QAAO,OACzB,kBAAC,EAAe,CAAC9I,UAAU4N,EAAAA,EAAAA,wBAA4C,QAAtB,EAAC9E,EAAQ9J,qBAAa,aAArB,EAAuBgB,WAAa,GAG9F,CACIwN,OAAOC,EAAAA,EAAAA,aAAavI,EAAAA,EAAAA,UAAS,gBAAiBA,EAAAA,EAAAA,UAAS,iBACvDwI,WAAWD,EAAAA,EAAAA,YAAa,WAAa,YACrCE,kBAAmB,YAAoC,IAAjC7E,EAAO,EAAPA,QAClB,OAAIA,EAAQ9J,cACD,kBAAC,EAAAwB,MAAK,CAACT,OAAQ+I,EAAQ9J,cAAc0N,UAAW1M,SAAUA,IAE9D,EACX,GAEJ,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,eAChBwI,UAAW,cACXC,kBAAmB,YAAoC,MAC3CV,IAAqC,QAArB,EADC,EAAPnE,QACc9J,qBAAa,aAArB,EAAuBkO,cAAe,CAAC,GAAvDD,YACR,OACI,6BACKA,SAAAA,EAAaE,aACV,kBAAC,EAAA3M,MAAK,CAAC0N,UAAQ,EAACnO,OAAQkN,EAAYE,aAAcnN,SAAUA,IAE5D,IAIhB,GAEJ,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,iBAChBwI,UAAW,YACXC,kBAAmB,YAAoC,IAAjC7E,EAAO,EAAPA,QAClB,IAAKA,EAAQ9J,gBAAkB8J,EAAQ9J,cAAc2N,UAAW,MAAO,IAEvE,IAAMwB,GAAepB,EAAAA,EAAAA,gBAAejE,EAAQ9J,eAC5C,OACI,yBACIb,UAAWiE,IAAW,4BAA6B,CAC/C,sCAAuC+L,EAAe,EACtD,sCAAuCA,EAAe,KAG1D,kBAAC,EAAA3N,MAAK,CAACT,OAAQ+I,EAAQ9J,cAAc2N,UAAW3M,SAAUA,IAGtE,GAEJ,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,qBAChBwI,UAAW,SACXC,kBAAmB,YAAoC,IAAjC7E,EAAO,EAAPA,QAClB,IAAKA,EAAQ9J,gBAAkB8J,EAAQ9J,cAAc+G,OAAQ,OAAO,KACpE,IAAMoI,GAAepB,EAAAA,EAAAA,gBAAejE,EAAQ9J,eAE5C,OACI,yBACIb,UAAWiE,IAAW,8BAA+B,CACjD,wCAAyC+L,EAAe,EACxD,wCAAyCA,EAAe,KAG5D,kBAAC,EAAA3N,MAAK,CAACT,OAAQU,KAAKC,IAAIyN,GAAenO,SAAUA,IACjD,yBAAK7B,UAAU,yCACVgQ,EAAe,EAAI,kBAAC,EAAA/P,KAAI,CAACE,KAAK,aAAgB,kBAAC,EAAAF,KAAI,CAACE,KAAK,YAI1E,GAEJ,CACIkP,OAAOtI,EAAAA,EAAAA,UAAS,UAChBwI,UAAW,SACXC,kBAAmB,YAA+C,IAA5C7E,EAAO,EAAPA,QAClB,GADoC,EAAT7I,UAEvB,OAAO,yBAAK9B,UAAU,+BAG1B,IAAQa,EAAkB8J,EAAlB9J,cAEAkB,GADS+J,EAAgBjL,EAAcoP,cACL,CAAC,GAAnClO,kBAER,OACI,yBAAK/B,UAAU,8BACX,kBAAC,EAAAoQ,iBAAgB,CACbvP,cAAeA,EACfkB,kBAAmBA,EACnBX,cAAeA,EAAAA,cACfO,YAAaA,IAI7B,GAEP,CGJkB0O,CAA2C,CAC9CxO,SAAAA,EACAF,YAAAA,EACAmK,gBAAAA,IH/X+B,SAACjK,GAAgB,MAAK,CACjE,CACIwE,IAAK,OACLgJ,OAAOC,EAAAA,EAAAA,YAAa,IAAKvI,EAAAA,EAAAA,UAAS,QAClCwI,UAAW,OACXC,kBAAmB,YAAsE,IAAnE7E,EAAO,EAAPA,QAAS7I,EAAS,EAATA,UAAWwO,EAAU,EAAVA,WAAYC,EAAS,EAATA,UAClD,OAAIzO,GAAkBiF,EAAAA,EAAAA,UAAS,SAG3B,kBAAC,EAAmB,CAChBV,IAAKsE,EAAQ3E,GACblD,QAAS6H,EAAQ9J,cACjBgC,wBAAyByN,GAAcC,GAGnD,GAEJ,CACIlB,OAAOtI,EAAAA,EAAAA,UAAS,WAChBwI,UAAW,aAEf,CACIF,OAAOtI,EAAAA,EAAAA,UAAS,YAChBwI,UAAW,WACXC,kBAAmB,kBAAG7E,EAAO,EAAPA,QAAO,OACzB,kBAAC,EAAe,CAAC9I,UAAU4N,EAAAA,EAAAA,wBAA4C,QAAtB,EAAC9E,EAAQ9J,qBAAa,aAArB,EAAuBgB,WAAa,GAG9F,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,aAChBwI,UAAW,WACXC,kBAAmB,gBAAGI,EAAU,EAAVA,WAAU,OAA0B,kBAAC,EAAAvN,MAAK,CAACT,OAAQgO,EAAY/N,SAAUA,GAAY,GAE/G,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,gBAChBwI,UAAW,SACXiB,aAAc,gBAAGnB,EAAK,EAALA,MAAOiB,EAAU,EAAVA,WAAU,OAAqB,8BAAOA,GAAavJ,EAAAA,EAAAA,UAAS,UAAYsI,EAAa,EAC7GG,kBAAmB,YAA4D,MAAzDI,EAAU,EAAVA,WAAYjF,EAAO,EAAPA,QAAS2F,EAAU,EAAVA,WACjCG,EAAqBb,EAAa,kBAAC,EAAAvN,MAAK,CAACT,OAAQgO,EAAY/N,SAAUA,IAAe,mCAC5F,OAAOyO,EAA4B,QAAlB,EAAG3F,EAAQ+F,eAAO,aAAf,EAAiBC,QAAQ,GAAKF,CACtD,GAEJ,CACIpB,OAAOtI,EAAAA,EAAAA,UAAS,0BAChBwI,UAAW,SACXC,kBAAmB,YAAoC,IAAjC7E,EAAO,EAAPA,QAClB,GAAKA,EAAQsE,aAAiBtE,EAAQ9J,eAAkB8J,EAAQ9J,cAAc+G,OAA9E,CACA,IAAMA,EAAS+C,EAAQsE,aAAetE,EAAQ9J,cAAc+G,OAE5D,OACI,yBACI5H,UAAWiE,IAAW,8BAA+B,CACjD,wCAAyC2D,EAAS,EAClD,wCAAyCA,EAAS,KAGtD,kBAAC,EAAAvF,MAAK,CAACT,OAAQU,KAAKC,IAAIqF,GAAS/F,SAAUA,IAC3C,yBAAK7B,UAAU,yCACV4H,EAAS,EAAI,kBAAC,EAAA3H,KAAI,CAACE,KAAK,aAAgB,kBAAC,EAAAF,KAAI,CAACE,KAAK,YAZ6B,CAgBjG,GAEJ,CACIkP,OAAOtI,EAAAA,EAAAA,UAAS,oBAChBwI,UAAW,aACXC,kBAAmB,gBAAGI,EAAU,EAAVA,WAAYjF,EAAO,EAAPA,QAAS7I,EAAS,EAATA,UAAS,OAChD,kBAAC,EAAc,CACXF,QAASgO,EACT/N,SAAUA,EACVhB,cAAe8J,EAAQ9J,cACvBkB,kBAAmB4I,EAAQ5I,kBAC3BD,UAAWA,GACb,GAGV,CACIuN,OAAOtI,EAAAA,EAAAA,UAAS,kBAChBwI,UAAW,KACXC,kBAAmB,gBAAG7E,EAAO,EAAPA,QAAO,OACzB,kBAAC,EAAoB,CAAC9J,cAAe8J,EAAQ9J,eAAiB,GAGzE,CG8Sc+P,CAAgC/O,GAKrCqF,GAAc,CAAC,EACrBwC,GAAQ+E,SAAQ,SAAAoC,GACZ3J,GAAY2J,EAAEtB,WAAasB,CAC/B,IAEA,IAuBQC,GACA/G,GAbFgH,GAAe,CACjBpH,iBAAkBwE,GAClBtO,eAAAA,EACAgC,SAAAA,EACAnB,WAAAA,EACAmJ,kBAhBoC,SAAAmH,GAAI,OACxC,kBAAChK,EAAiB,KACVgK,EAAI,CACR9J,YAAaA,GACbtG,YAAaA,EACbwG,cAAeA,EACfzF,YAAaA,GACT4E,GACN,EASFqD,aAAAA,EACAE,eAAgBsB,EAChBpB,OAAQqE,IA0BZ,OACI,kBAAC,aAAc,KACX,kBAACpC,EAAoB,MACQ,IAA5BtC,EAAiBsH,QACd,kBAAC,aAAc,KACX,kBAAC,EAAAxO,eAAc,KACX,yBACIzC,UACI6N,EACM,wCACA,qDAGV,yBAAK7N,UAAU,4DACX,kBAAC,EAAAkR,SAAQ,CACLC,oBAAkB,EAClBpN,KAAK,iBACLqN,KAAMpD,EACNvM,MAAO+L,EACP6D,SAAU,SAAAR,GAAC,OAAIpD,EAAqBoD,EAAES,OAAO7P,MAAM,KAG1DoM,GAA2BE,GACxB,yBAAK/N,UAAU,yDACX,kBAAC,EAAAkR,SAAQ,CACLC,oBAAkB,EAClBpN,KAAK,oBACLqN,KAAMlD,GACNzM,MAAOkM,EACP0D,SAAU,SAAAR,GAAC,OAAIjD,EAAmBiD,EAAES,OAAO7P,MAAM,OAMrE,kBAAC,EAAA6I,cAAa,KACV,yBACItK,UACI6N,EACM,gDACA,6DAGV,kBAAC,EAAA0D,aAAY,CACTvR,UAAU,kEACVwR,WAAYxD,EACZvM,MAAO+L,EACPiE,0BAA0B,EAC1BJ,SAAU,SAACR,GAAuE,OAC9EpD,EAAqBoD,EAAES,OAAO7P,MAAM,IAG3CoM,GAA2BE,GACxB,kBAAC,EAAAwD,aAAY,CACTvR,UAAU,gEACVwR,WAAYtD,GACZzM,MAAOkM,EACP8D,0BAA0B,EAC1BJ,SAAU,SACNR,GAAuE,OACtEjD,EAAmBiD,EAAES,OAAO7P,MAAM,QAlF/DqP,GAAY,iBACZ/G,IAAWuF,EAAAA,EAAAA,YAAa,EAAI,GAE5BzB,GACAiD,GAAY,4CACZ/G,IAAWuF,EAAAA,EAAAA,YAAa,EAAI,IACrBxB,IACPgD,GAAY,2CACZ/G,IAAWuF,EAAAA,EAAAA,YAAa,EAAI,IAI5B,kBAAC7F,EAAkB,GACfzJ,UAAW8Q,GACXpH,QAASA,GACThD,SAA+C,IAArCyH,GAA0B8C,OACpClH,SAAUA,IACNgH,MA2EpB,K,snCCrqBO,IAAMW,EAAc,SAAH,GAAgF,IAA1E1L,EAAE,EAAFA,GAAIhG,EAAS,EAATA,UAAW2R,EAAc,EAAdA,eAAgBlQ,EAAK,EAALA,MAAO8H,EAAK,EAALA,MAAO8H,EAAQ,EAARA,SACvE,OACI,2BACIO,QAAS5L,EACThG,UAAWiE,IAAW,kCAAmCjE,EAAW,CAChE,4CAA6C2R,IAAmBlQ,IAEpEoQ,QAAS,kBAAMR,EAAS,CAAE9H,MAAAA,EAAO9H,MAAAA,GAAQ,GAEzC,2BAAOzB,UAAU,wCAAwCgG,GAAIA,EAAIpB,KAAK,QAAQnD,MAAOA,IACrF,0BACIzB,UAAWiE,IAAW,yCAA0C,CAC5D,mDAAoD0N,IAAmBlQ,MAG/E,kBAAC,EAAAnB,KAAI,CACDwR,GAAG,IACH1R,MAAM,YACNC,KAAK,KACL0R,YAAY,QACZ5M,OAAQwM,IAAmBlQ,EAAQ,OAAS,UAE3C8H,GAIjB,EACMyI,EAAa,SAebC,EAA0BjQ,IAAAA,MAC5B,YAQgC,IAP5BkQ,EAAgB,EAAhBA,iBACA7F,EAAa,EAAbA,cACA8F,EAAa,EAAbA,cACAd,EAAQ,EAARA,SACA3E,EAAe,EAAfA,gBACAvG,EAAI,EAAJA,KACAiM,EAAE,EAAFA,GAEMC,EAAaH,GAAoBC,EAAc5E,MAAK,SAAA+E,GAAK,MAAoB,aAAhBA,EAAM7Q,KAAoB,IAEM,IAAtEO,IAAAA,SAAemE,GAAOgB,EAAAA,EAAAA,UAAShB,GAAMoM,OAAO,mBAAgBC,GAAU,GAA5FC,EAAS,KAAEC,EAAO,KACkE,IAAlE1Q,IAAAA,SAAeoQ,GAAKjL,EAAAA,EAAAA,UAASiL,GAAIG,OAAO,mBAAgBC,GAAU,GAApFG,EAAO,KAAEC,EAAK,KAC6B,IAArB5Q,IAAAA,UAAe,GAAM,GAA3C6Q,EAAO,KAAEC,EAAS,KAEmD,IAA1B9Q,IAAAA,SAAeqQ,GAAW,GAArEU,EAAkB,KAAEC,EAAmB,KACgC,IAA1BhR,IAAAA,SAAeqQ,GAAW,GAAvEY,EAAmB,KAAEC,EAAoB,KAC1CC,GAAQhM,EAAAA,EAAAA,YAAWoL,OAAO,cAE1Ba,EAAkB,SAACC,EAAuCC,GAC5D,IAAMC,EAAWF,EAAqBG,SACtCnC,EACI,CACIlL,KACImN,GAAYC,GACNpM,EAAAA,EAAAA,YAAWsM,QAAQ,OAAOC,SAASH,EAAU,OAAOI,IAAI,EAAG,UAC3DnB,EACVJ,IAAIjL,EAAAA,EAAAA,YAAWyM,MAAM,OACrBC,UAAU,GAEd,CACIxB,WAAYgB,GAGxB,EAsBMS,EAAiB,WApBO,IACpBP,EACAQ,EAEAC,EAiBFf,EAAoBpB,QACpBuB,EAAgBH,GACTA,EAAoBxR,QAAUuQ,IAtBnCuB,EAAWd,GAAaE,GAAWQ,EACnCY,EAASpB,GAAWQ,EAEpBa,EAAiBC,OAAOC,OAAOjB,EAAqB,CACtD1J,MAAO,GAAF,QAAKpC,EAAAA,EAAAA,UAASoM,GAAUhB,OAAO,eAAc,eAAMpL,EAAAA,EAAAA,UAAS4M,GAAQxB,OAAO,kBAGpFlB,EACI,CACIlL,MAAMgB,EAAAA,EAAAA,UAASoM,GAAUE,QAAQ,OAAOE,IAAI,EAAG,KAC/CvB,IAAIjL,EAAAA,EAAAA,UAAS4M,GAAQH,MAAM,OAC3BC,UAAU,GAEd,CACIxB,WAAY2B,KAWpBhB,EAAoBC,GACpBH,GAAU,EACd,EAaMqB,EAAa,SAACtD,EAAwCxK,GAAgB,QACxE6M,EAAqB,CAAEzR,MAAOuQ,IAElB,SAAR3L,GAAgBqM,EAAgB,QAAT,EAAC7B,EAAES,cAAM,aAAR,EAAU7P,OAC1B,OAAR4E,GAAcuM,EAAc,QAAT,EAAC/B,EAAES,cAAM,aAAR,EAAU7P,MACtC,EAyBM2S,EAAoB,SAACC,GACvBnB,EACIf,EAAc5E,MAAK,SAAA+E,GAAK,OAAI+B,GAAe/B,EAAM7Q,QAAU4S,EAAY5S,KAAK,KAAK4S,EAEzF,EAOA,OACI,kBAAC,aAAc,KACX,yBAAKrU,UAAU,2EACX,kBAAC,EAAAsU,WAAU,CACPtO,GAAG,oBACHqG,cAAeA,EACfkI,cAAc,EACdpU,KAAM,kBAAM,kBAAC,EAAAF,KAAI,CAACE,KAAK,qBAAqBH,UAAU,eAAgB,EACtE6R,QAbG,WACfqB,EAAqBH,GACrBD,GAAU,EACd,EAWgBpG,gBAAiBA,EACjBjL,MAAOsR,EAAmBxJ,SAGlC,kBAAC,EAAAiL,aAAY,CACTC,kBAAkB,aAClBpF,OAAOtI,EAAAA,EAAAA,UAAS,0BAChB2N,QAAS7B,EACT8B,oBAAkB,EAClBC,QAAS,kBAAM9B,GAAU,EAAM,EAC/B+B,sBAAsB,OACtB3K,OApDJ,yBAAKlK,UAAU,qCACX,kBAAC,EAAA8U,OAAM,CACH9U,UAAU,4CACVqN,MAAMtG,EAAAA,EAAAA,UAAS,UACf8K,QAAS,kBAAMiB,GAAU,EAAM,EAC/BiC,YAAU,EACVC,WAAS,EACTC,OAAK,IAET,kBAAC,EAAAH,OAAM,CACH9U,UAAU,wCACVqN,MAAMtG,EAAAA,EAAAA,UAAS,MACf8K,QAASiC,EACTiB,YAAU,EACVG,SAAO,EACPD,OAAK,MAuCT,yBAAKjV,UAAU,4BACX,yBAAKA,UAAU,yCACVmS,EAAc/M,KAAI,SAAAoO,GAAQ,OACvB,kBAAC9B,EAAW,CACR1L,GAAE,2CAAsCwN,EAAS/R,OACjD4E,IAAKmN,EAAS/R,MACdA,MAAO+R,EAAS/R,MAChB8H,MAAOiK,EAASjK,MAChBoI,eAAgBsB,EAAoBxR,MACpC4P,SAAU+C,GACZ,KAGV,yBAAKpU,UAAU,oCACX,kBAAC0R,EAAW,CACR1L,GAAI,yCACJhG,UAAU,yCACVyB,MAAOuQ,EACPzI,OAAOxC,EAAAA,EAAAA,UAAS,UAChB4K,eAAgBsB,EAAoBxR,MACpC4P,SAAU+C,IAGd,yBAAKpU,UAAU,+CACX,kBAAC,EAAAmV,WAAU,CACPnV,UAAU,yDACVoV,iBAAiB,EACjBC,aAAatO,EAAAA,EAAAA,UAAS,cACtBtF,MAAOgR,EACP6C,SAAU3C,GAAWQ,EACrB9B,SAAU,SAACR,GAAsC,OAAKsD,EAAWtD,EAAG,OAAO,IAE/E,kBAAC,EAAAsE,WAAU,CACPnV,UAAU,uDACVoV,iBAAiB,EACjBC,aAAatO,EAAAA,EAAAA,UAAS,YACtBtF,MAAOkR,EACP2C,SAAUnC,EACVoC,SAAU9C,EACVpB,SAAU,SAACR,GAAsC,OAAKsD,EAAWtD,EAAG,KAAK,MAIrF,kBAAC,EAAAiE,OAAM,CACH9U,UAAU,0CACVqN,MAAMtG,EAAAA,EAAAA,UAAS,iBACf8K,QAxHA,WAChB,IAAMmC,EAAiB,CACnBR,SAAU,EACVjK,OAAOxC,EAAAA,EAAAA,UAAS,UAEpBqM,EAAgBY,GAAgB,GAChChB,EAAoBgB,GACpBd,EAAqBc,GACrBlB,GAAU,EACd,EAgHoBiC,YAAU,EACVS,UAAQ,EACRP,OAAK,MAM7B,IAGJhD,EAAwBwD,YAAc,0BACtC,UC9OA,QAXiB,SAAH,OAAM5D,EAAO,EAAPA,QAAS6D,EAAS,EAATA,UAAWnM,EAAK,EAALA,MAAK,OACzC,wBACIvJ,UAAWiE,IAAW,CAClB,mDAAoDyR,IAExD7D,QAASA,GAERtI,EACA,ECiBT,QAViB,SAAH,OAAMoM,EAAK,EAALA,MAAOxP,EAAI,EAAJA,KAAMiM,EAAE,EAAFA,GAAE,OAC/B,wBAAIpS,UAAU,yCACT2V,EAAMvQ,KAAI,SAAAsF,GACP,IAAQ8I,EAA6B9I,EAA7B8I,SAAUjK,EAAmBmB,EAAnBnB,MAAOsI,EAAYnH,EAAZmH,QACnB6D,EAXD,SAACvP,EAAciM,EAAYwD,GACxC,OAAa,IAATA,GACOzO,EAAAA,EAAAA,YAAWyM,MAAM,OAAOiC,SAAWzD,GAAe,OAATjM,EAE7C7D,KAAKwT,KAAK1D,EAAK,OAAS9P,KAAKwT,KAAK3P,EAAO,SAAWyP,CAC/D,CAM8BG,CAAS5P,EAAMiM,EAAIoB,GACrC,OAAO,kBAAC,EAAQ,CAACnN,IAAKmN,EAAUkC,UAAWA,EAAWnM,MAAOA,EAAOsI,QAASA,GACjF,IACC,ECpBT,QAJqB,SAAH,OAAMA,EAAO,EAAPA,QAAO,OAC3B,kBAAC,EAAA5R,KAAI,CAAC4R,QAASA,EAAS1R,KAAK,qBAAqBH,UAAU,eAAgB,E,uwCCmBhF,IAAMgW,GAAyBC,IAAyD,CACpFC,OAAQ,kBAAM,kKAAuE,EACrFC,QAAS,kBAAM,IAAI,EACnBC,OAAM,SAACC,EAAQ9P,GACX,IAAM+P,EAAYD,EAAM,QACxB,OAAO,kBAACC,EAAc/P,EAC1B,IAGEgQ,GAAkD,SAAAhQ,GACpD,IAAQ8F,EAAuD9F,EAAvD8F,cAAegF,EAAwC9K,EAAxC8K,SAAU3E,EAA8BnG,EAA9BmG,gBAAiB0F,EAAa7L,EAAb6L,GAAIjM,EAASI,EAATJ,KAEJ,KAArBnE,IAAAA,UAAe,GAAM,GAA3CwU,EAAO,KAAEC,EAAS,KAC6B,KAArBzU,IAAAA,UAAe,GAAM,GAA/C0U,EAAS,KAAEC,EAAW,KACtBvF,EA+BL,GA/BapP,IAAAA,SAAe,CAC1B,CACIP,MAAO,WACP8H,OAAOxC,EAAAA,EAAAA,UAAS,YAChB8K,QAAS,kBAAMuB,GAAiB,EAChCI,SAAU,GAEd,CACI/R,MAAO,cACP8H,OAAOxC,EAAAA,EAAAA,UAAS,eAChB8K,QAAS,kBAAMuB,EAAgB,EAAE,EACjCI,SAAU,GAEd,CACI/R,MAAO,eACP8H,OAAOxC,EAAAA,EAAAA,UAAS,gBAChB8K,QAAS,kBAAMuB,EAAgB,GAAG,EAClCI,SAAU,IAEd,CACI/R,MAAO,eACP8H,OAAOxC,EAAAA,EAAAA,UAAS,gBAChB8K,QAAS,kBAAMuB,EAAgB,GAAG,EAClCI,SAAU,IAEd,CACI/R,MAAO,eACP8H,OAAOxC,EAAAA,EAAAA,UAAS,gBAChB8K,QAAS,kBAAMuB,EAAgB,GAAG,EAClCI,SAAU,MAEhB,GA/BS,GAiCLoD,EAAc5U,IAAAA,OAA+B,MAI7CoR,EAAkB,SAACG,GACrBsD,IACAxF,EAAS,CACLlL,KAAMoN,GAAWpM,EAAAA,EAAAA,YAAWsM,QAAQ,OAAOC,SAASH,EAAU,OAAOI,IAAI,EAAG,UAAOnB,EACnFJ,IAAIjL,EAAAA,EAAAA,YAAWyM,MAAM,OACrBC,UAAU,GAElB,EAYMgD,EAAe,WACjBF,GAAY,GACZF,GAAU,EACd,EAEMK,EAAe,SAACjG,GACR,SAANA,GACA8F,GAAY,GAEN,OAAN9F,GACA4F,GAAU,EAElB,GAEAM,EAAAA,EAAAA,mBACIH,GACA,SAAAI,GACIA,SAAAA,EAAOC,kBACPD,SAAAA,EAAOE,iBACPL,GACJ,IAzCyB,SAACG,GAAiB,cAAyB,QAApB,EAACJ,EAAYO,eAAO,OAAnB,EAAqBC,SAASJ,EAAM1F,QAAe,IA6CxG,IA5BU+F,EA2CV,OACI,kBAAC,aAAc,KACX,kBAAC,EAAA5U,eAAc,KACX,yBAAKuD,GAAG,+BAA+BhG,UAAU,oCAC7C,kBAAC,EAAAsU,WAAU,CACPtO,GAAG,yBACHqG,cAAeA,EACfkI,cAAY,EACZc,aAAatO,EAAAA,EAAAA,UAAS,aACtB5G,KAAMmX,EACNzF,QAAS,kBAAMiF,EAAa,OAAO,EACnCpK,gBAAiBA,EACjBjL,OAvDV4V,GAAOlQ,EAAAA,EAAAA,UAAShB,GACfA,EAAOkR,EAAK9E,OAAO,gBAAkB,MAwDhC,kBAAC,EAAA+B,WAAU,CACPtO,GAAG,uBACHqG,cAAeA,EACfkI,cAAY,EACZc,aAAatO,EAAAA,EAAAA,UAAS,WACtB5G,KAAMmX,EACNzF,QAAS,kBAAMiF,EAAa,KAAK,EACjCpK,gBAAiBA,EACjBjL,MAvEG,WACnB,IAAM4V,GAAOlQ,EAAAA,EAAAA,UAASiL,GACtB,OAAiC,KAA1BmF,EAAAA,EAAAA,iBAAgBF,IAActQ,EAAAA,EAAAA,UAAS,SAAWsQ,EAAK9E,OAAO,eACzE,CAoE2BiF,MAGdhB,GACG,yBAAKxW,UAAU,qBAAqByX,IAAKb,GACrC,kBAAC,EAAQ,CAACzQ,KAAMA,EAAMiM,GAAIA,EAAIuD,MAAOvE,IACrC,kBAAC4E,GAAsB,CAACvU,MAAO2Q,EAAIf,SA3CrC,SAACgG,GACfhG,EAAS,CAAEe,IAAIjL,EAAAA,EAAAA,UAASkQ,GAAMzD,MAAM,QACxC,EAyC4E8D,iBAlCjD,SAACL,GACxB,OAAOA,EAAKxB,OAAS1P,GAAQkR,EAAKxB,QAAS1O,EAAAA,EAAAA,YAAWyM,MAAM,OAAOiC,MACvE,KAmCaa,GACG,yBAAK1W,UAAU,qBAAqByX,IAAKb,GACrC,kBAAC,EAAQ,CAACzQ,KAAMA,EAAMiM,GAAIA,EAAIuD,MAAOvE,IACrC,kBAAC4E,GAAsB,CACnBvU,MAAO0E,EACPkL,SA/CJ,SAACgG,GACjBhG,EAAS,CAAElL,MAAMgB,EAAAA,EAAAA,UAASkQ,KAC1BR,GACJ,EA6CwBa,iBAvCK,SAACL,GAAmB,OAAKA,EAAKxB,OAASzD,CAAE,MA4C9D,kBAAC,EAAA9H,cAAa,KACV,kBAAC,EAAuB,GAAC6H,cAAef,GAAU7K,KAIlE,EAEAgQ,GAAkBd,YAAc,oBAEhC,MCzLA,GDyLezT,IAAAA,MACXxB,EAAAA,EAAAA,KAAQ,gBAAGiL,EAAE,EAAFA,GAAE,MAAqB,CAC9BY,cAAeZ,EAAGY,cAClBK,gBAAiBjB,EAAGiB,gBACvB,GAHDlM,CAGI+V,KErLR,IAAMoB,GAAc,SAAH,GAAwF,IAAlFC,EAAgB,EAAhBA,iBAAkB5X,EAAS,EAATA,UAAW6X,EAAkB,EAAlBA,mBAAoBC,EAAY,EAAZA,aACpE,OACI,yBAAK9X,UAAWiE,IAAW,gBAAiBjE,IACvC6X,EACAD,GACG,yBACI5X,UAAWiE,IAAW,uBAAwB,CAC1C,kCAAmC6T,KAGtCF,GAKrB,ECwBMhO,GAAe,SAACe,GAAuC,UACnD9B,EAA4D,QAA/C,GAAGzF,EAAAA,EAAAA,0BAAyBuH,aAAO,EAAPA,EAASzH,kBAAU,OAAU,QAAV,EAA5C,EAA8CO,gBAAQ,WAAV,EAA5C,EAAwDsU,WAAWlU,cACzF,OAAOmU,EAAAA,EAAAA,yBAAwBnP,MAC1BoP,EAAAA,EAAAA,mBAAkBtN,EAAQzH,WAAYyH,EAAQuN,qBAC7C/M,EAAAA,EAAAA,kBAAiBR,EAAQsF,aACzB,CACIpF,UACI,kBAAC,EAAAC,SAAQ,CACLC,kBAAkB,oHAClBC,OAAQ,CACJC,gBAAqF,QAAtE,GAAEC,EAAAA,EAAAA,2BAA0BrC,UAA0C,aAApE,EAAsE9E,QAKjH,EAoJA,UAAevD,EAAAA,EAAAA,KAAQ,gBAAG2X,EAAO,EAAPA,QAAS3M,EAAM,EAANA,OAAM,MAAoB,CACzD3J,SAAU2J,EAAO3J,SACjBuW,KAAMD,EAAQE,aAAaD,KAC3BE,UAAWH,EAAQE,aAAaC,UAChCC,QAASJ,EAAQE,aAAaE,QAC9B1M,MAAOsM,EAAQE,aAAaxM,MAC5B2M,oBAAqBL,EAAQE,aAAaG,oBAC1C9R,SAAUyR,EAAQE,aAAa3R,SAC/BhG,WAAYyX,EAAQE,aAAa3X,WACjC+X,aAAcjN,EAAOiN,aACrBC,iBAAkBP,EAAQE,aAAaK,iBACvCC,aAAcR,EAAQE,aAAaM,aACnC/Y,kBAAmBuY,EAAQE,aAAazY,kBACxCuM,QAASgM,EAAQE,aAAalM,QAC9ByM,UAAWT,EAAQE,aAAaO,UAChC5O,OAAQmO,EAAQE,aAAarO,OAChC,GAhBD,EAgBIuB,EAAAA,EAAAA,aAlKgB,SAAH,GAiBG,IAhBhB1L,EAAc,EAAdA,eACAgC,EAAQ,EAARA,SACAuW,EAAI,EAAJA,KACAE,EAAS,EAATA,UACAC,EAAO,EAAPA,QACA1M,EAAK,EAALA,MACA2M,EAAmB,EAAnBA,oBACA9R,EAAQ,EAARA,SACAhG,EAAU,EAAVA,WACA+X,EAAY,EAAZA,aACAC,EAAgB,EAAhBA,iBACAC,EAAY,EAAZA,aACA/Y,EAAiB,EAAjBA,kBACAuM,EAAO,EAAPA,QACAyM,EAAS,EAATA,UACA5O,EAAM,EAANA,OAUA,GARAhI,IAAAA,WAAgB,WAEZ,OADAmK,IACO,WACHyM,GACJ,CAEJ,GAAG,IAEC/M,EAAO,OAAO,2BAAIA,GAEtB,IAAM+L,EACF,kBAAC,GAAiB,CACd1F,iBAAkBsG,EAClBnH,SAAUqH,EACVvS,KAAMmS,EACNlG,GAAImG,IAIN7O,EXYmC,SAAC7H,EAAkBgX,GAAmB,MAAK,CACpF,CACIxS,IAAK,OACLgJ,OAAOC,EAAAA,EAAAA,YAAa,IAAKvI,EAAAA,EAAAA,UAAS,QAClCwI,UAAW,cACXC,kBAAmB,YAA+C,IAA5C7E,EAAO,EAAPA,QAClB,OADoC,EAAT7I,WAEhBiF,EAAAA,EAAAA,UAAS,mDAAoD,CAAE+R,WAAYD,IAE/E,kBAAC,EAAmB,CAACxS,IAAKsE,EAAQoO,eAAgBjW,QAAS6H,GACtE,GAEJ,CACI0E,OAAOtI,EAAAA,EAAAA,UAAS,WAChBwI,UAAW,kBAEf,CACIF,OAAOtI,EAAAA,EAAAA,UAAS,YAChBwI,UAAW,WACXC,kBAAmB,YAAY,SAAT1N,UACN,GAAK,kBAAC,EAAe,CAACD,UAAU4N,EAAAA,EAAAA,wBAAuB5N,IAAa,GAExF,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,YAChBwI,UAAW,gBACXC,kBAAmB,YAAkD,IAA/CI,EAAU,EAAVA,WAClB,OADuC,EAAT9N,UACR,GACf,8BAAO8N,EAAU,OAC5B,GAEJ,CACIP,OAAOtI,EAAAA,EAAAA,UAAS,aAChBwI,UAAW,YACXC,kBAAmB,YAAkD,IAA/CI,EAAU,EAAVA,WAClB,OADuC,EAAT9N,UACR,GAEf,kBAAC,EAAAO,MAAK,CAACT,OAAQgO,EAAY/N,SAAUA,GAChD,GAEJ,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,aAChBwI,UAAW,YACXiB,aAAc,gBAAGnB,EAAK,EAALA,MAAK,OAAqB,8BAAOA,EAAa,EAC/DG,kBAAmB,YAAkD,IAA/CI,EAAU,EAAVA,WAClB,OADuC,EAAT9N,UACR,GACf,8BAAO8N,EAAU,OAC5B,GAEJ,CACIP,OAAOtI,EAAAA,EAAAA,UAAS,cAChBwI,UAAW,aACXC,kBAAmB,YAAkD,IAA/CI,EAAU,EAAVA,WAClB,OADuC,EAAT9N,UACR,GAEf,kBAAC,EAAAO,MAAK,CAACT,OAAQgO,EAAY/N,SAAUA,GAChD,GAEJ,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,iBAChBwI,UAAW,cACXC,kBAAmB,gBAAGI,EAAU,EAAVA,WAAU,OAC5B,kBAAC,EAAc,CAACnO,MAAOmO,GACnB,kBAAC,EAAAvN,MAAK,CAAC0N,UAAQ,EAACnO,OAAQgO,EAAWlO,QAAQ,QAAS,IAAKG,SAAUA,IACtD,GAG5B,CW9EmBmX,CAA8BnX,EAAUuW,EAAKnH,QAEvD/J,EAAc+M,OAAOgF,YAAYvP,EAAQtE,KAAI,SAAAoC,GAAM,MAAI,CAACA,EAAO+H,UAAW/H,EAAO,KAkDvF,OACI,kBAAC,aAAc,KACX,kBAACmQ,GAAW,CAACC,iBAAkBA,EAAkB5X,UAAU,yBAC1DyY,EACG,kBAAC,EAAoB,CAAC/X,YAAU,IAEhC,kBAAC,aAAc,KACM,IAAhB0X,EAAKnH,QAAgBvK,EAClB,kBAAC,EAAoB,CACjBhG,WAAYA,EACZd,kBAAmBA,EACnB8G,SAAUA,EACVD,wBAAyBK,EACzBjH,eAAgBA,EAChBC,mBAAmBiH,EAAAA,EAAAA,UAAS,qCAC5BhH,0BAA0BgH,EAAAA,EAAAA,UACtB,kEAIR,yBAAK/G,UAAU,oBACX,kBAAC,EAAAyC,eAAc,KACX,kBAAC,EAAAwH,UAAS,CACNjK,UAAU,eACVmK,YAAaiO,EACb1O,QAASA,EACTwP,SAAUP,EACVzO,OAAQF,EACRtD,SAAUA,EACVkD,aAAcA,GACdQ,WAAY,kBAAM,EAAE,EACpBC,eAAgBnL,GAEhB,kBAAC,EAAoB,CAACwB,WAAYA,MAG1C,kBAAC,EAAA4J,cAAa,KACV,kBAAC,EAAAhD,SAAQ,CACLtH,UAAU,eACVmK,YAAaiO,EACb7N,YAtFN,SAAH,GAA8D,IAAxDtD,EAAG,EAAHA,IAAKnF,EAAS,EAATA,UACxBoG,EAAgB,qBAAqBE,KAAKnB,EAAI/D,WAAa,GAAK+D,EAAIiB,cACpEiR,EAAqBjR,EAAgB,kBAAH,OAAqBA,EAAcrD,eAAkB,GAE7F,OAAI/C,EAEI,yBAAK9B,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYjC,YAAanD,UAAWA,IACrE,kBAAC,EAAAwF,SAASC,KAAI,CACVvH,UAAU,8BACViH,IAAKA,EACLO,OAAQN,EAAY+H,YACpBnN,UAAWA,KAOvB,oCACI,yBAAK9B,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYjC,cAC7C,yBAAKjF,UAAWiE,IAAW,gBAAiBkV,IACxC,yBAAKnZ,UAAWiE,IAAW,4BAA6B,GAAF,OAAKkV,EAAkB,mBAC7E,0BAAMnZ,UAAS,UAAKmZ,EAAkB,aAAYpS,EAAAA,EAAAA,UAASmB,MAGnE,yBAAKlI,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAY6R,iBAC7C,kBAAC,EAAAzR,SAASC,KAAI,CAACvH,UAAU,8BAA8BiH,IAAKA,EAAKO,OAAQN,EAAYrF,YAEzF,yBAAK7B,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYY,gBAC7C,kBAAC,EAAAR,SAASC,KAAI,CAACvH,UAAU,8BAA8BiH,IAAKA,EAAKO,OAAQN,EAAYqH,aAEzF,yBAAKvO,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYkS,YAC7C,kBAAC,EAAA9R,SAASC,KAAI,CAACvH,UAAU,8BAA8BiH,IAAKA,EAAKO,OAAQN,EAAYmS,cAEzF,yBAAKrZ,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAY+H,eAI7D,EA2CgCrF,aAAcA,GACdsP,SAAUP,EACVzO,OAAQF,EACRQ,QAAS,GAET,kBAAC,EAAoB,CAAC9J,WAAYA,QAStE,KC7IA,UAAeF,EAAAA,EAAAA,KAAQ,gBAAG2X,EAAO,EAAPA,QAAS3M,EAAM,EAANA,OAAM,MAAa,CAClD8N,mBAAoBnB,EAAQoB,UAAUD,mBACtCzX,SAAU2J,EAAO3J,SACpB,GAHD,EAxD0B,SAAH,GAA6D,IAAvDyX,EAAkB,EAAlBA,mBAAoBzX,EAAQ,EAARA,SAC7C,OACI,yBAAK7B,UAAU,iCACX,yBAAKA,UAAU,sCACX,yBAAKA,UAAU,+CACX,kBAAC,EAAAM,KAAI,CAACF,MAAM,iBAAiBJ,UAAU,wCAClC+G,EAAAA,EAAAA,UAAS,kBAAiB,IAAE,kBAAC,EAAAuD,cAAa,UAAIzI,EAAQ,OAE3D,kBAAC,EAAAvB,KAAI,CACDF,MAAM,YACN+E,OAAO,OACP5E,MAAM,SACNP,UAAU,wCAEV,kBAAC,EAAAqC,MAAK,CAACT,OAAQ0X,EAAmBE,eAAgB3X,SAAUA,OAIxE,yBAAK7B,UAAU,qFACX,yBAAKA,UAAU,+CACX,kBAAC,EAAAM,KAAI,CAACF,MAAM,iBAAiBJ,UAAU,wCAClC+G,EAAAA,EAAAA,UAAS,qBAAoB,IAAE,kBAAC,EAAAuD,cAAa,UAAIzI,EAAQ,OAE9D,kBAAC,EAAAvB,KAAI,CACDF,MAAM,YACN+E,OAAO,OACP5E,MAAM,SACNP,UAAU,wCAEV,kBAAC,EAAAqC,MAAK,CAACT,OAAQ0X,EAAmBG,kBAAmB5X,SAAUA,OAI3E,yBAAK7B,UAAU,sCACX,yBAAKA,UAAU,+CACX,kBAAC,EAAAM,KAAI,CAACF,MAAM,iBAAiBJ,UAAU,wCAClC+G,EAAAA,EAAAA,UAAS,gBAAe,IAAE,kBAAC,EAAAuD,cAAa,UAAIzI,EAAQ,OAEzD,kBAAC,EAAAvB,KAAI,CACDF,MAAM,YACN+E,OAAO,OACP5E,MAAM,SACNP,UAAU,wCAEV,kBAAC,EAAAqC,MAAK,CACFT,OAAQ0X,EAAmBE,eAAiBF,EAAmBG,kBAC/D5X,SAAUA,OAOtC,ICSA,UAAerB,EAAAA,EAAAA,KAAQ,gBAAG2X,EAAO,EAAPA,QAAO,MAAoB,CACjDlT,YAAakT,EAAQoB,UAAUtU,YAC/BmT,KAAMD,EAAQoB,UAAUnB,KACxBE,UAAWH,EAAQoB,UAAUjB,UAC7BC,QAASJ,EAAQoB,UAAUhB,QAC3BC,oBAAqBL,EAAQoB,UAAUf,oBACvCE,iBAAkBP,EAAQoB,UAAUb,iBACpCgB,mBAAoBvB,EAAQoB,UAAUG,mBACzC,GARD,EArDwB,SAAH,GAOG,IANpBzU,EAAW,EAAXA,YACAqT,EAAS,EAATA,UACAC,EAAO,EAAPA,QACAmB,EAAkB,EAAlBA,mBACAhB,EAAgB,EAAhBA,iBACAF,EAAmB,EAAnBA,oBAEMmB,EAAc,CAChB,CACItM,MAAMtG,EAAAA,EAAAA,UAAS,oBACftF,MAAO,OAEX,CACI4L,MAAMtG,EAAAA,EAAAA,UAAS,OACftF,MAAO,OAEX,CACI4L,MAAMtG,EAAAA,EAAAA,UAAS,QACftF,MAAO,QAEX,CACI4L,MAAMtG,EAAAA,EAAAA,UAAS,WACftF,MAAO,WAEX,CACI4L,MAAMtG,EAAAA,EAAAA,UAAS,cACftF,MAAO,cAEX,CACI4L,MAAMtG,EAAAA,EAAAA,UAAS,YACftF,MAAO,aAIf,OACI,kBAAC,aAAc,KACX,kBAAC,GAAiB,CACdyQ,iBAAkBsG,EAClBnH,SAAUqH,EACVvS,KAAMmS,EACNlG,GAAImG,IAER,kBAAC,EAAAqB,eAAc,CACXC,2BAA2B,wCAC3BF,YAAaA,EACbD,mBAAoBA,EACpBI,wBAAyB7U,IAIzC,I,yOCKA,IAAM8U,GAAmB,SAAH,GAA8D,QAAxDzV,QAAAA,OAAO,IAAG,KAAE,MAAEW,YAAAA,OAAW,IAAG,KAAE,EAChD+U,EAAqB,8BAA8BzR,KAAKjE,EAAQ2V,MAAM,OAAO,IAC7EC,EAAeF,aAAkB,EAAlBA,EAAqB,GACpCG,EAAwB,8BAA8B5R,KAAKjE,EAAQ2V,MAAM,OAAO,IAChFG,EAAkBD,aAAqB,EAArBA,EAAwB,GAE5CE,EAAW,CAAC/V,GAEhB,GAAI4V,GAAgBE,EAAiB,CACjC,IAAME,EAAQhW,EAAQ2V,MAAM,OAC5BI,EAAWC,EAAMlV,KAAI,SAACiI,EAAMkN,GACxB,OAAIA,IAAUD,EAAMrJ,OAAS,EAClB,GAAP,OAAU5D,EAAI,MAEXA,CACX,GACJ,CAEA,OACI,kBAAC,EAAA/M,KAAI,CAACwR,GAAG,MAAMzR,KAAK,KAAKL,UAAU,8BAA8BO,MAAM,UAClE8Z,EAASjV,KAAI,SAACiI,EAAMkN,GACjB,OACI,yBAAKlU,IAAKgH,GACLA,EACA+M,GAAmBG,IAAUF,EAASpJ,OAAS,GAC5C,kBAAC,EAAAuJ,UAAS,CAACC,UAAWL,EAAiBM,iBAAiB,QAE3DR,GAAgC,eAAhBjV,GAAgCsV,IAAUF,EAASpJ,OAAS,GACzE,kBAAC,EAAAuJ,UAAS,CAACC,UAAWP,EAAcQ,iBAAiB,QAIrE,IAGZ,EAEM9Q,GAAe,SAACe,GAAyC,MACvDgQ,EAAkB,CAAC,EACvB,GAAIhQ,EAAQ3E,IAAM,CAAC,MAAO,QAAQhB,SAAS2F,EAAQ1F,aAAc,OACvD4D,GAAgBzF,EAAAA,EAAAA,0BAAyBuH,EAAQzH,WAAWO,SAASI,cAC3E8W,GACI3C,EAAAA,EAAAA,yBAAwBnP,MACvBoP,EAAAA,EAAAA,mBAAkBtN,EAAQzH,UAAWyH,EAAQ7C,eAAiB6C,EAAQiQ,mBACjEzP,EAAAA,EAAAA,iBAAgBR,EAAQ3E,IACxB,CACI1B,QAAS,GACTuG,UACI,kBAAC,EAAAC,SAAQ,CACLC,kBAAkB,oHAClBC,OAAQ,CACJC,gBAAyD,QAA1C,GAAEC,EAAAA,EAAAA,2BAA0BrC,UAAc,aAAxC,EAA0C9E,QAKzF,KAAmC,eAAxB4G,EAAQ1F,YAEX0V,EADAhQ,EAAQkQ,oBAAsBlQ,EAAQxC,SAC7B,CACL7D,QAAS,GAAF,OAAKqG,EAAQkQ,mBAAkB,YAAIlQ,EAAQxC,WAG7C,CACL7D,QAASqG,EAAQmQ,MAGlBnQ,EAAQmQ,MAAQ,CAAC,UAAW,WAAY,aAAc,OAAQ,WAAW9V,SAAS2F,EAAQ1F,eACjG0V,EAAS,CACLrW,QAASqG,EAAQmQ,OASzB,MAJsB,WAAlB,GAAOH,IAA6B,QAAV,EAAIA,SAAM,OAAN,EAAQrW,UACtCqW,EAAO9P,UAAY,kBAACkP,GAAgB,CAACzV,QAASqW,EAAOrW,QAASW,YAAa0F,EAAQ1F,eAGhF0V,CACX,EA2IA,UAAepP,EAAAA,EAAAA,aACX/K,EAAAA,EAAAA,KAAQ,gBAAG2X,EAAO,EAAPA,QAAS3M,EAAM,EAANA,OAAM,MAAoB,CAC1CvG,YAAakT,EAAQoB,UAAUtU,YAC/BqU,mBAAoBnB,EAAQoB,UAAUD,mBACtCzX,SAAU2J,EAAO3J,SACjBuW,KAAMD,EAAQoB,UAAUnB,KACxBE,UAAWH,EAAQoB,UAAUjB,UAC7BC,QAASJ,EAAQoB,UAAUhB,QAC3B1M,MAAOsM,EAAQoB,UAAU1N,MACzB2M,oBAAqBL,EAAQoB,UAAUf,oBACvCE,iBAAkBP,EAAQoB,UAAUb,iBACpCgB,mBAAoBvB,EAAQoB,UAAUG,mBACtCf,aAAcR,EAAQoB,UAAUZ,aAChC/Y,kBAAmBuY,EAAQoB,UAAU3Z,kBACrC8G,SAAUyR,EAAQoB,UAAU7S,SAC5BhG,WAAYyX,EAAQoB,UAAU7Y,WAC9Bqa,UAAWvP,EAAOwP,WAAWC,KAAOzP,EAAOwP,WAAWE,MACtDzC,aAAcjN,EAAOiN,aACrB7M,WAAYJ,EAAOI,WACnBO,QAASgM,EAAQoB,UAAUpN,QAC3ByM,UAAWT,EAAQoB,UAAUX,UAChC,GApBDpY,EA1Ic,SAAH,GAqBG,IApBd8Y,EAAkB,EAAlBA,mBACArU,EAAW,EAAXA,YACApF,EAAc,EAAdA,eACAgC,EAAQ,EAARA,SACAuW,EAAI,EAAJA,KACAE,EAAS,EAATA,UACAC,EAAO,EAAPA,QACA1M,EAAK,EAALA,MACA2M,EAAmB,EAAnBA,oBACAE,EAAgB,EAAhBA,iBACAgB,EAAkB,EAAlBA,mBACAf,EAAY,EAAZA,aACA/Y,EAAiB,EAAjBA,kBACA8G,EAAQ,EAARA,SACAhG,EAAU,EAAVA,WACAqa,EAAS,EAATA,UACAtC,EAAY,EAAZA,aACA7M,EAAU,EAAVA,WACAO,EAAO,EAAPA,QACAyM,EAAS,EAATA,UAUA,GARA5W,IAAAA,WAAgB,WAEZ,OADAmK,IACO,WACHyM,GACJ,CAEJ,GAAG,IAEC/M,EAAO,OAAO,2BAAIA,GAEtB,IAAMnC,Ed1IsC,SAAC7H,GAAgB,MAAK,CAClE,CACIwE,IAAK,OACLgJ,OAAOC,EAAAA,EAAAA,YAAa,IAAKvI,EAAAA,EAAAA,UAAS,QAClCwI,UAAW,OACXC,kBAAmB,YAAiD,IAA9C2L,EAAW,EAAXA,YAAaxQ,EAAO,EAAPA,QACzBxK,EAAOgb,EAAYC,QAAQzQ,GAAW,iBAAmB,KAC/D,OAAO,kBAAC,EAAmB,CAACxK,KAAMA,EAAMkG,IAAKsE,EAAQoO,eAAgBjW,QAAS6H,GAClF,GAEJ,CACI0E,OAAOtI,EAAAA,EAAAA,UAAS,WAChBwI,UAAW,QACXC,kBAAmB,YAAgD,IAA7CI,EAAU,EAAVA,WAAYjF,EAAO,EAAPA,QAC9B,OACI,kBAAC,EAAAzG,QAAO,CACJG,UAAW,MACXC,SAASyC,EAAAA,EAAAA,UAAS,gDAAiD,CAAEsU,OAAQ1Q,EAAQ0Q,UAEpFzL,EAGb,GAEJ,CACIP,OAAOtI,EAAAA,EAAAA,UAAS,YAChBwI,UAAW,WACXC,kBAAmB,kBAAM,kBAAC,EAAe,CAAC3N,UAAU4N,EAAAA,EAAAA,wBAAuB5N,IAAa,GAE5F,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,oBAChBwI,UAAW,OACXC,kBAAmB,YAAuC,IAApCI,EAAU,EAAVA,WAClB,OAAO,8BAAOA,EAAU,OAC5B,GAEJ,CACIvJ,IAAK,OACLgJ,OAAOtI,EAAAA,EAAAA,UAAS,eAChBwI,UAAW,cACXC,kBAAmB,gBAvDDnJ,EAuDIuJ,EAAU,EAAVA,WAAYuL,EAAW,EAAXA,YAAaxQ,EAAO,EAAPA,QAAO,OAClD,kBAAC,EAAA2Q,MAAK,CAACC,MAxDOlV,EAwDgBuJ,EAxDDxK,EAAIiB,IAAQjB,EAAG,UAyDtC+V,EAAYC,QAAQzQ,KAAY5D,EAAAA,EAAAA,UAAS,WAAc4D,EAAQgQ,OAC7D,GAGhB,CACItL,OAAOtI,EAAAA,EAAAA,UAAS,gBAChBwI,UAAW,SACXC,kBAAmB,gBAAGI,EAAU,EAAVA,WAAU,OAC5B,yBAAK5P,UAAS,kBAAawB,EAAgBoO,KACvC,kBAAC,EAAAvN,MAAK,CAAC0N,UAAQ,EAACnO,OAAQgO,EAAWlO,QAAQ,QAAS,IAAKG,SAAUA,IACjE,GAGd,CACIwN,OAAOtI,EAAAA,EAAAA,UAAS,WAChBwI,UAAW,UACXC,kBAAmB,gBAAGI,EAAU,EAAVA,WAAU,OAC5B,kBAAC,EAAAvN,MAAK,CAACT,OAAQgO,EAAWlO,QAAQ,QAAS,IAAKG,SAAUA,GAAY,GAGjF,Cc4EsD2Z,CAAiC3Z,GAC9EqF,EAAcwC,EAAQ+R,QAAO,SAACrW,EAAKsF,GAErC,OADAtF,EAAIsF,EAAK6E,WAA0B7E,EAC5BtF,CACX,GAAG,CAAC,GAuBJ,OACI,kBAAC,aAAc,KACX,kBAACuS,GAAW,CACR3X,UAAW+a,OAAYvI,EAAY,2BACnCoF,iBACI,kBAAC,GAAe,CACZ3S,YAAaA,EACbqT,UAAWA,EACXC,QAASA,EACTG,iBAAkBA,EAClBgB,mBAAoBA,EACpBlB,oBAAqBA,IAG7BV,cAAY,EACZD,oBACKY,GACDsC,GAAa,kBAAC,GAAiB,CAACzB,mBAAoBA,EAAoBzX,SAAUA,MAGzF4W,EACG,kBAAC,EAAoB,CAAC/X,YAAU,IAEhC,kBAAC,aAAc,KACM,IAAhB0X,EAAKnH,QAAgBvK,EAClB,kBAAC,EAAoB,CACjBhG,WAAYA,EACZd,kBAAmBA,EACnB8G,SAAUA,EACVD,wBAAyBK,EACzBjH,eAAgBA,EAChBC,mBAAmBiH,EAAAA,EAAAA,UAAS,iCAC5BhH,0BAA0BgH,EAAAA,EAAAA,UACtB,kEAIR,yBAAK/G,UAAU,oBACX,kBAAC,EAAAyC,eAAc,KACX,kBAAC,EAAAwH,UAAS,CACNjK,UAAU,YACV0J,QAASA,EACTW,eAAgBnL,EAChBiL,YAAaiO,EACbxO,aAAc,SAAA3C,GAAG,OAAI2C,GAAa3C,EAAI,EACtCiS,SAAUP,EACVwC,YAAa,CACTC,QAAS,SAAC1Q,GAAiC,OACvCkB,GAA8B,YAAhBlB,EAAKiQ,MAAoB,IAG/C,kBAAC,EAAoB,CAACja,WAAYA,MAG1C,kBAAC,EAAA4J,cAAa,KACV,kBAAC,EAAAhD,SAAQ,CACLtH,UAAU,YACVmK,YAAaiO,EACbxO,aAAcA,GACdsP,SAAUP,EACVpO,YAhFN,SAAH,OAAMtD,EAAG,EAAHA,IAAKkU,EAAW,EAAXA,YAAW,OACzC,kBAAC,aAAc,KACX,yBAAKnb,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAY/G,KAAMgb,YAAaA,IAChE,kBAAC,EAAA7T,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYjC,YAAakW,YAAaA,KAE3E,yBAAKnb,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYwU,QAC7C,kBAAC,EAAApU,SAASC,KAAI,CAACvH,UAAU,8BAA8BiH,IAAKA,EAAKO,OAAQN,EAAYrF,YAEzF,yBAAK7B,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYmQ,OAC7C,kBAAC,EAAA/P,SAASC,KAAI,CAACvH,UAAU,8BAA8BiH,IAAKA,EAAKO,OAAQN,EAAYtF,UAEzF,yBAAK5B,UAAU,kBACX,kBAAC,EAAAsH,SAASC,KAAI,CAACN,IAAKA,EAAKO,OAAQN,EAAYyU,WAEpC,EAgEWnR,QAAS,EACT2Q,YAAa,CACTC,QAAS,SAAC1Q,GAAiC,OACvCkB,GAA8B,YAAhBlB,EAAKiQ,MAAoB,IAG/C,kBAAC,EAAoB,CAACja,WAAYA,QAStE,K,mCCpLA,MC5GA,IACIkb,cAAAA,EACAC,YAAAA,GACAC,UAAAA,GACAC,SDuBYC,EAAAA,GAAAA,KAAS,YAA6C,MAA1CC,EAAO,EAAPA,QAASC,EAAQ,EAARA,SAAUC,EAAM,EAANA,OAC3C,GAA+BC,EAAAA,GAAAA,MAAvB5Q,EAAM,EAANA,OAAQ/K,EAAM,EAANA,OAAQgL,EAAE,EAAFA,GAEhB4Q,EAA2D7Q,EAA3D6Q,aAAcC,EAA6C9Q,EAA7C8Q,cAAeC,EAA8B/Q,EAA9B+Q,0BAC7BC,EAAoC/b,EAApC+b,gBAAiBC,EAAmBhc,EAAnBgc,eACjBC,EAAmFjR,EAAnFiR,mBAAoBC,EAA+DlR,EAA/DkR,mBAAoBC,EAA2CnR,EAA3CmR,wBAAyBC,EAAkBpR,EAAlBoR,cAEzE7a,IAAAA,WAAgB,WAEZ,OADA6a,GAAc,GACP,WACHN,EAA0B,GAC1BM,GAAc,EAClB,CAEJ,GAAG,IAEH,IAIMC,EAAe,WACjB,IAAMC,EAAmB,GAYzB,OAVAZ,EAAO1N,SAAQ,SAAAuO,GACXD,EAAQE,KAAK,CACTtX,QAASqX,EAAK,QACd7c,KAAM6c,EAAME,eACZ3T,MAAOyT,EAAMG,WACb1b,MAAOub,EAAMnS,UACbuS,KAAMJ,EAAMI,MAEpB,IAEOL,CACX,EAEMM,GAAiBC,EAAAA,EAAAA,kBAAiB,CAAEnB,OAAAA,EAAQoB,SAAUrB,EAASqB,WAErE,OAAKlB,GAAgBC,EACV,kBAAC,EAAAkB,QAAO,CAACC,eAAa,IAG7B,kBAAC,EAAAC,YAAW,CAACC,WAAYjB,EAAoB1c,UAAU,uBAAuB4d,QAAQ,wBAClF,yBAAK5d,UAAU,WACX,kBAAC,EAAA6d,YAAW,CAACC,QAAQ/W,EAAAA,EAAAA,UAAS,WAAYgX,aA5BjC,WAAH,OAAStB,EAAeR,EAAQ,EA4BgC+B,YAAaxB,GAC/E,kBAAC,EAAA/Z,eAAc,KACX,kBAAC,EAAAwb,YAAW,CACRC,aAAW,EACXC,aAAcjC,EAASqB,SACvBa,WAAS,EACTC,eAAa,EACbC,oBAAqB3B,EACrB4B,mBAAoBlB,EAAc,QAAW,EAAIT,EACjDxL,KAAM0L,OAGd,kBAAC,EAAAxS,cAAa,KACV,kBAAC,EAAAkU,kBAAiB,CAACxe,UAAU,0BAA0Bye,cAAc,QACjE,kBAAC,EAAAlN,aAAY,CACTvR,UAAU,2BACVwR,WAAYsL,IAAe1X,KAAI,SAAAsZ,GAAM,YAAK,CACtCrR,KAAMqR,EAAOnV,MACb9H,MAAkB,QAAb,EAAEid,EAAOtB,YAAI,QAAI,GACzB,IACD3b,MAA0B,QAArB,EAAE4b,EAAeD,YAAI,QAAI,GAC9B3L,0BAA0B,EAC1BJ,SAhDF,SAACR,GAAuC,OAAKoL,EAAQgB,KAAKpM,EAAES,OAAO7P,MAAM,EAiDvE8H,MAAO,GACPoV,sBAAsB,KAEzBtB,aAAc,EAAdA,EAAgBxS,YACb,kBAACwS,EAAexS,UAAS,CAACqS,eAAgBG,EAAeH,qBAQzF,I","sources":["webpack://@deriv/reports/./src/Components/Elements/ContentLoader/reports-table-row.tsx","webpack://@deriv/reports/./src/Components/empty-trade-history-message.tsx","webpack://@deriv/reports/./src/Containers/progress-slider-stream.tsx","webpack://@deriv/reports/./src/Helpers/profit-loss.ts","webpack://@deriv/reports/./src/Components/indicative-cell.tsx","webpack://@deriv/reports/./src/Components/market-symbol-icon-row.tsx","webpack://@deriv/reports/./src/Helpers/market-underlying.ts","webpack://@deriv/reports/./src/Components/profit_loss_cell.tsx","webpack://@deriv/reports/./src/Components/currency-wrapper.tsx","webpack://@deriv/reports/./src/Constants/data-table-constants.tsx","webpack://@deriv/reports/./src/_common/components/loading.jsx","webpack://@deriv/reports/./src/Components/placeholder-component.jsx","webpack://@deriv/reports/./src/Containers/open-positions.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/composite-calendar-mobile.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/list-item.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/side-list.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/calendar-icon.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/composite-calendar.tsx","webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/index.ts","webpack://@deriv/reports/./src/Components/reports-meta.tsx","webpack://@deriv/reports/./src/Containers/profit-table.tsx","webpack://@deriv/reports/./src/Components/account-statistics.tsx","webpack://@deriv/reports/./src/Components/filter-component.tsx","webpack://@deriv/reports/./src/Containers/statement.tsx","webpack://@deriv/reports/./src/Containers/reports.tsx","webpack://@deriv/reports/./src/Containers/index.ts"],"sourcesContent":["import ContentLoader from 'react-content-loader';\nimport React from 'react';\n\ntype TReportsTableRowLoader = {\n    speed?: number;\n};\n\nconst ReportsTableRowLoader = ({ speed }: TReportsTableRowLoader) => (\n    <ContentLoader\n        height={64}\n        width={992}\n        speed={speed}\n        backgroundColor={'var(--general-hover)'}\n        foregroundColor={'var(--general-active)'}\n    >\n        <rect x='16' y='16' rx='4' ry='4' width='32' height='32' />\n        <rect x='52' y='16' rx='4' ry='4' width='32' height='32' />\n        <rect x='132' y='28' rx='4' ry='4' width='101' height='8' />\n        <rect x='273' y='28' rx='4' ry='4' width='120' height='8' />\n        <rect x='460' y='28' rx='4' ry='4' width='46' height='8' />\n        <rect x='593' y='28' rx='4' ry='4' width='46' height='8' />\n        <rect x='726' y='28' rx='4' ry='4' width='64' height='8' />\n        <rect x='906' y='28' rx='4' ry='4' width='64' height='8' />\n    </ContentLoader>\n);\n\nexport { ReportsTableRowLoader };\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\n\ntype TEmptyTradeHistoryMessage = {\n    component_icon: string;\n    has_selected_date: boolean;\n    localized_message: string;\n    localized_period_message: string;\n};\n\nconst EmptyTradeHistoryMessage = ({\n    has_selected_date,\n    component_icon,\n    localized_message,\n    localized_period_message,\n}: TEmptyTradeHistoryMessage) => (\n    <React.Fragment>\n        <div className='empty-trade-history'>\n            <Icon\n                data_testid='dt_empty_trade_history_icon'\n                icon={component_icon}\n                className='empty-trade-history__icon'\n                color='disabled'\n                size={96}\n            />\n            <Text size='xs' align='center' color='disabled' className='empty-trade-history__text'>\n                {!has_selected_date ? localized_message : localized_period_message}\n            </Text>\n        </div>\n    </React.Fragment>\n);\n\nexport default EmptyTradeHistoryMessage;\n","import React from 'react';\nimport { ProgressSlider } from '@deriv/components';\nimport { getCurrentTick, TContractInfo, getCardLabels } from '@deriv/shared';\nimport { connect } from 'Stores/connect';\nimport moment from 'moment';\nimport { TRootStore } from 'Stores/index';\n\ntype TProgressSliderStream = {\n    contract_info: Required<TContractInfo>;\n    is_loading: boolean;\n    server_time: moment.Moment;\n};\n\nconst ProgressSliderStream = ({ contract_info, is_loading, server_time }: TProgressSliderStream) => {\n    if (!contract_info) {\n        return <div />;\n    }\n    const current_tick = contract_info.tick_count && getCurrentTick(contract_info);\n\n    return (\n        <ProgressSlider\n            current_tick={current_tick}\n            expiry_time={contract_info.date_expiry}\n            getCardLabels={getCardLabels}\n            is_loading={is_loading}\n            server_time={server_time}\n            start_time={contract_info.date_start}\n            ticks_count={contract_info.tick_count}\n        />\n    );\n};\n\nexport default connect(({ common, portfolio }: TRootStore) => ({\n    is_loading: portfolio.is_loading,\n    server_time: common.server_time,\n}))(ProgressSliderStream);\n","export const getProfitOrLoss = (value: string) => (+value.replace(/,/g, '') >= 0 ? 'profit' : 'loss');\n","import React from 'react';\nimport { Icon, Money, DesktopWrapper, ContractCard } from '@deriv/components';\nimport { getCardLabels, TContractInfo } from '@deriv/shared';\nimport { connect } from 'Stores/connect';\nimport { TRootStore } from 'Stores/index';\n\ntype TIndicativeCell = {\n    amount: number;\n    contract_info: TContractInfo;\n    currency: string;\n    status: string;\n    is_footer: boolean;\n    is_sell_requested: boolean;\n    onClickSell: () => void;\n};\n\nconst IndicativeCell = ({\n    amount,\n    currency,\n    contract_info,\n    is_footer,\n    onClickSell,\n    is_sell_requested,\n}: TIndicativeCell) => {\n    const [movement, setMovement] = React.useState<string | null>(null);\n    const [amount_state, setAmountState] = React.useState(0);\n\n    React.useEffect(() => {\n        setMovement(() => {\n            return amount >= amount_state ? 'profit' : 'loss';\n        });\n        setAmountState(amount);\n    }, [amount, amount_state]);\n\n    return (\n        <div className='open-positions__indicative'>\n            <div className='open-positions__indicative--amount'>\n                <Money amount={Math.abs(amount)} currency={currency} />\n                {status !== 'no-resale' && amount !== 0 && (\n                    <React.Fragment>\n                        {movement === 'profit' && <Icon icon='IcProfit' />}\n                        {movement === 'loss' && <Icon icon='IcLoss' />}\n                    </React.Fragment>\n                )}\n            </div>\n            <DesktopWrapper>\n                {!is_footer && (\n                    <ContractCard.Sell\n                        contract_info={contract_info}\n                        is_sell_requested={is_sell_requested}\n                        getCardLabels={getCardLabels}\n                        onClickSell={onClickSell}\n                    />\n                )}\n            </DesktopWrapper>\n        </div>\n    );\n};\n\nexport default connect(({ portfolio }: TRootStore) => ({\n    onClickSell: portfolio.onClickSell,\n}))(IndicativeCell);\n","import React from 'react';\nimport { extractInfoFromShortcode, isHighLow } from '@deriv/shared';\nimport { Icon, Popover, IconTradeTypes } from '@deriv/components';\nimport { getMarketName, getTradeTypeName } from '../Helpers/market-underlying';\nimport classNames from 'classnames';\n\ntype TMarketSymbolIconRow = {\n    has_full_contract_title?: boolean;\n    icon?: string | null;\n    payload: {\n        shortcode: string;\n        display_name: string;\n        action_type: string;\n    };\n    should_show_multiplier?: boolean;\n    should_show_accumulator?: boolean;\n};\n\nconst MarketSymbolIconRow = ({\n    has_full_contract_title,\n    icon,\n    payload,\n    should_show_accumulator = true,\n    should_show_multiplier = true,\n}: TMarketSymbolIconRow) => {\n    const should_show_category_icon = typeof payload.shortcode === 'string';\n    const info_from_shortcode = extractInfoFromShortcode(payload.shortcode);\n    const is_high_low = isHighLow({ shortcode_info: info_from_shortcode });\n    const category_label = getTradeTypeName(\n        info_from_shortcode.category as string,\n        is_high_low,\n        has_full_contract_title\n    );\n    if (should_show_category_icon && info_from_shortcode) {\n        return (\n            <div\n                className={classNames('market-symbol-icon', {\n                    'market-symbol-icon__full-title': has_full_contract_title,\n                })}\n            >\n                <div className='market-symbol-icon-name'>\n                    <Popover\n                        classNameTarget='market-symbol-icon__popover'\n                        classNameBubble='market-symbol-icon__popover-bubble'\n                        alignment='top'\n                        message={getMarketName(info_from_shortcode.underlying as string)}\n                        is_bubble_hover_enabled\n                        disable_target_icon\n                    >\n                        <Icon\n                            icon={\n                                info_from_shortcode.underlying\n                                    ? `IcUnderlying${info_from_shortcode.underlying}`\n                                    : 'IcUnknown'\n                            }\n                            size={32}\n                        />\n                    </Popover>\n                    {has_full_contract_title && payload.display_name}\n                </div>\n\n                <div className='market-symbol-icon-category'>\n                    <Popover\n                        classNameTarget='category-type-icon__popover'\n                        classNameBubble='category-type-icon__popover-bubble'\n                        alignment='top'\n                        message={category_label}\n                        is_bubble_hover_enabled\n                        disable_target_icon\n                    >\n                        <IconTradeTypes\n                            type={\n                                is_high_low\n                                    ? `${(info_from_shortcode.category as string).toLowerCase()}_barrier`\n                                    : (info_from_shortcode.category as string).toLowerCase()\n                            }\n                            color='brand'\n                        />\n                    </Popover>\n                    {has_full_contract_title && category_label}\n                </div>\n                {should_show_multiplier && info_from_shortcode.multiplier && (\n                    <div className='market-symbol-icon__multiplier'>x{info_from_shortcode.multiplier}</div>\n                )}\n                {should_show_accumulator && info_from_shortcode.growth_rate && (\n                    <div className='market-symbol-icon__multiplier'>{+info_from_shortcode.growth_rate * 100}%</div>\n                )}\n            </div>\n        );\n    } else if (['deposit', 'hold', 'release', 'withdrawal', 'transfer'].includes(payload.action_type)) {\n        return (\n            <div className='market-symbol-icon'>\n                {payload.action_type === 'deposit' && <Icon icon={icon || 'IcCashierDeposit'} size={32} />}\n                {payload.action_type === 'withdrawal' && <Icon icon='IcCashierWithdrawal' size={32} />}\n                {payload.action_type === 'transfer' && <Icon icon='IcAccountTransferColored' size={32} />}\n                {(payload.action_type === 'hold' || payload.action_type === 'release') && (\n                    <Icon icon='IcCashierDp2p' size={32} />\n                )}\n            </div>\n        );\n    } else if (['adjustment'].includes(payload.action_type)) {\n        return (\n            <div className='market-symbol-icon'>\n                <Icon icon='IcAdjustment' size={32} />\n            </div>\n        );\n    }\n\n    return (\n        <svg width='32' height='32' className='unknown-icon'>\n            <rect width='32' height='32' />\n        </svg>\n    );\n};\n\nexport default MarketSymbolIconRow;\n","import { getContractConfig, getMarketNamesMap } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\ntype TMarketInfo = {\n    category: string;\n    underlying: string;\n};\n\ntype TTradeConfig = {\n    button_name?: JSX.Element;\n    name: JSX.Element;\n    position: string;\n};\n\n/**\n * Fetch market information from shortcode\n * @param shortcode: string\n * @returns {{underlying: string, category: string}}\n */\n\n// TODO: Combine with  extractInfoFromShortcode function in shared, both are currently used\nexport const getMarketInformation = (shortcode: string): TMarketInfo => {\n    const market_info: TMarketInfo = {\n        category: '',\n        underlying: '',\n    };\n\n    const pattern = new RegExp(\n        '^([A-Z]+)_((1HZ[0-9-V]+)|((CRASH|BOOM)[0-9\\\\d]+[A-Z]?)|(OTC_[A-Z0-9]+)|R_[\\\\d]{2,3}|[A-Z]+)'\n    );\n    const extracted = pattern.exec(shortcode);\n    if (extracted !== null) {\n        market_info.category = extracted[1].toLowerCase();\n        market_info.underlying = extracted[2];\n    }\n\n    return market_info;\n};\n\nexport const getMarketName = (underlying: string) =>\n    underlying ? getMarketNamesMap()[underlying.toUpperCase() as keyof typeof getMarketNamesMap] : null;\n\nexport const getTradeTypeName = (category: string, is_high_low = false, show_button_name = false) => {\n    const trade_type =\n        category &&\n        (getContractConfig(is_high_low)[category.toUpperCase() as keyof typeof getContractConfig] as TTradeConfig);\n    if (!trade_type) return null;\n    return (show_button_name && trade_type.button_name) || trade_type.name || null;\n};\n\nexport const getContractDurationType = (longcode: string, shortcode?: string): string => {\n    if (shortcode && /^(MULTUP|MULTDOWN)/.test(shortcode)) return '';\n\n    const duration_pattern = new RegExp('ticks|tick|seconds|minutes|minute|hour|hours');\n    const extracted = duration_pattern.exec(longcode);\n    if (extracted !== null) {\n        const duration_type = extracted[0];\n        const duration_text = duration_type[0].toUpperCase() + duration_type.slice(1);\n        return duration_text.endsWith('s') ? duration_text : `${duration_text}s`;\n    }\n    return localize('Days');\n};\n","import React from 'react';\nimport { getProfitOrLoss } from '../Helpers/profit-loss';\n\ntype TProfitLossCell = {\n    value: string;\n    children: React.ReactNode;\n};\n\nconst ProfitLossCell = ({ value, children }: TProfitLossCell) => {\n    const status = getProfitOrLoss(value);\n\n    return <span className={`amount--${status}`}>{children}</span>;\n};\n\nexport default ProfitLossCell;\n","import React from 'react';\nimport { Text } from '@deriv/components';\n\ntype TCurrencyWrapper = {\n    currency: string;\n};\n\nconst CurrencyWrapper = ({ currency }: TCurrencyWrapper) => (\n    <div className='currency__wrapper'>\n        <Text color='colored-background' weight='bold' size='xxxs'>\n            {currency}\n        </Text>\n    </div>\n);\n\nexport default CurrencyWrapper;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Label, Money, ContractCard, ContractCardSell, Popover } from '@deriv/components';\nimport {\n    isMobile,\n    getCurrencyDisplayCode,\n    getTotalProfit,\n    shouldShowCancellation,\n    getGrowthRatePercentage,\n    getCardLabels,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport ProgressSliderStream from '../Containers/progress-slider-stream';\nimport { TCellContentProps, THeaderProps } from 'Types';\nimport { getProfitOrLoss } from '../Helpers/profit-loss';\nimport IndicativeCell from '../Components/indicative-cell';\nimport MarketSymbolIconRow from '../Components/market-symbol-icon-row';\nimport ProfitLossCell from '../Components/profit_loss_cell';\nimport CurrencyWrapper from '../Components/currency-wrapper';\nimport { useStore } from '@deriv/stores';\n\ntype TPortfolioStore = ReturnType<typeof useStore>['portfolio'];\n\nconst map = {\n    buy: 'success',\n    deposit: 'success',\n    hold: 'warn',\n    release: 'success',\n    sell: 'danger',\n    withdrawal: 'info',\n    default: 'default',\n    adjustment: 'adjustment',\n    transfer: 'transfer',\n} as const;\n\nexport type TKeys = keyof typeof map;\n\nconst getModeFromValue = (key: TKeys) => map[key] || map.default;\n\ntype TAccumulatorOpenPositionstemplateProps = Omit<\n    TMultiplierOpenPositionstemplateProps,\n    'onClickCancel' | 'server_time'\n>;\ntype TMultiplierOpenPositionstemplateProps = Pick<\n    TPortfolioStore,\n    'getPositionById' | 'onClickCancel' | 'onClickSell'\n> & {\n    currency: string;\n    server_time: moment.Moment;\n};\n\n/* eslint-disable react/display-name, react/prop-types */\nexport const getStatementTableColumnsTemplate = (currency: string) => [\n    {\n        key: 'icon',\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'icon',\n        renderCellContent: ({ passthrough, row_obj }: TCellContentProps) => {\n            const icon = passthrough.isTopUp(row_obj) ? 'icCashierTopUp' : null;\n            return <MarketSymbolIconRow icon={icon} key={row_obj.transaction_id} payload={row_obj} />;\n        },\n    },\n    {\n        title: localize('Ref. ID'),\n        col_index: 'refid',\n        renderCellContent: ({ cell_value, row_obj }: TCellContentProps) => {\n            return (\n                <Popover\n                    alignment={'top'}\n                    message={localize('Transaction performed by (App ID: {{app_id}})', { app_id: row_obj.app_id })}\n                >\n                    {cell_value}\n                </Popover>\n            );\n        },\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: () => <CurrencyWrapper currency={getCurrencyDisplayCode(currency)} />,\n    },\n    {\n        title: localize('Transaction time'),\n        col_index: 'date',\n        renderCellContent: ({ cell_value }: TCellContentProps) => {\n            return <span>{cell_value} GMT</span>;\n        },\n    },\n    {\n        key: 'mode',\n        title: localize('Transaction'),\n        col_index: 'action_type',\n        renderCellContent: ({ cell_value, passthrough, row_obj }: TCellContentProps) => (\n            <Label mode={getModeFromValue(cell_value)}>\n                {(passthrough.isTopUp(row_obj) && localize('Top up')) || row_obj.action}\n            </Label>\n        ),\n    },\n    {\n        title: localize('Credit/Debit'),\n        col_index: 'amount',\n        renderCellContent: ({ cell_value }: TCellContentProps) => (\n            <div className={`amount--${getProfitOrLoss(cell_value)}`}>\n                <Money has_sign amount={cell_value.replace(/[,]+/g, '')} currency={currency} />\n            </div>\n        ),\n    },\n    {\n        title: localize('Balance'),\n        col_index: 'balance',\n        renderCellContent: ({ cell_value }: TCellContentProps) => (\n            <Money amount={cell_value.replace(/[,]+/g, '')} currency={currency} />\n        ),\n    },\n];\nexport const getProfitTableColumnsTemplate = (currency: string, items_count: number) => [\n    {\n        key: 'icon',\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'action_type',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return localize('Profit/loss on the last {{item_count}} contracts', { item_count: items_count });\n            }\n            return <MarketSymbolIconRow key={row_obj.transaction_id} payload={row_obj} />;\n        },\n    },\n    {\n        title: localize('Ref. ID'),\n        col_index: 'transaction_id',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ is_footer }: TCellContentProps) =>\n            is_footer ? '' : <CurrencyWrapper currency={getCurrencyDisplayCode(currency)} />,\n    },\n    {\n        title: localize('Buy time'),\n        col_index: 'purchase_time',\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n            return <span>{cell_value} GMT</span>;\n        },\n    },\n    {\n        title: localize('Buy price'),\n        col_index: 'buy_price',\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n\n            return <Money amount={cell_value} currency={currency} />;\n        },\n    },\n    {\n        title: localize('Sell time'),\n        col_index: 'sell_time',\n        renderHeader: ({ title }: THeaderProps) => <span>{title}</span>,\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n            return <span>{cell_value} GMT</span>;\n        },\n    },\n    {\n        title: localize('Sell price'),\n        col_index: 'sell_price',\n        renderCellContent: ({ cell_value, is_footer }: TCellContentProps) => {\n            if (is_footer) return '';\n\n            return <Money amount={cell_value} currency={currency} />;\n        },\n    },\n    {\n        title: localize('Profit / Loss'),\n        col_index: 'profit_loss',\n        renderCellContent: ({ cell_value }: TCellContentProps) => (\n            <ProfitLossCell value={cell_value}>\n                <Money has_sign amount={cell_value.replace(/[,]+/g, '')} currency={currency} />\n            </ProfitLossCell>\n        ),\n    },\n];\nexport const getOpenPositionsColumnsTemplate = (currency: string) => [\n    {\n        key: 'icon',\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'type',\n        renderCellContent: ({ row_obj, is_footer, is_vanilla, is_turbos }: TCellContentProps) => {\n            if (is_footer) return localize('Total');\n\n            return (\n                <MarketSymbolIconRow\n                    key={row_obj.id}\n                    payload={row_obj.contract_info}\n                    has_full_contract_title={is_vanilla || is_turbos}\n                />\n            );\n        },\n    },\n    {\n        title: localize('Ref. ID'),\n        col_index: 'reference',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <CurrencyWrapper currency={getCurrencyDisplayCode(row_obj.contract_info?.currency)} />\n        ),\n    },\n    {\n        title: localize('Buy price'),\n        col_index: 'purchase',\n        renderCellContent: ({ cell_value }: TCellContentProps) => <Money amount={cell_value} currency={currency} />,\n    },\n    {\n        title: localize('Payout limit'),\n        col_index: 'payout',\n        renderHeader: ({ title, is_vanilla }: THeaderProps) => <span>{is_vanilla ? localize('Strike') : title}</span>,\n        renderCellContent: ({ cell_value, row_obj, is_vanilla }: TCellContentProps) => {\n            const non_vanilla_payout = cell_value ? <Money amount={cell_value} currency={currency} /> : <span>-</span>;\n            return is_vanilla ? row_obj.barrier?.toFixed(2) : non_vanilla_payout;\n        },\n    },\n    {\n        title: localize('Indicative profit/loss'),\n        col_index: 'profit',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.profit_loss && (!row_obj.contract_info || !row_obj.contract_info.profit)) return;\n            const profit = row_obj.profit_loss || row_obj.contract_info.profit;\n            // eslint-disable-next-line consistent-return\n            return (\n                <div\n                    className={classNames('open-positions__profit-loss', {\n                        'open-positions__profit-loss--negative': profit < 0,\n                        'open-positions__profit-loss--positive': profit > 0,\n                    })}\n                >\n                    <Money amount={Math.abs(profit)} currency={currency} />\n                    <div className='open-positions__profit-loss--movement'>\n                        {profit > 0 ? <Icon icon='IcProfit' /> : <Icon icon='IcLoss' />}\n                    </div>\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Indicative price'),\n        col_index: 'indicative',\n        renderCellContent: ({ cell_value, row_obj, is_footer }: TCellContentProps) => (\n            <IndicativeCell\n                amount={+cell_value}\n                currency={currency}\n                contract_info={row_obj.contract_info}\n                is_sell_requested={row_obj.is_sell_requested}\n                is_footer={is_footer}\n            />\n        ),\n    },\n    {\n        title: localize('Remaining time'),\n        col_index: 'id',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <ProgressSliderStream contract_info={row_obj.contract_info} />\n        ),\n    },\n];\n\nexport const getMultiplierOpenPositionsColumnsTemplate = ({\n    currency,\n    onClickCancel,\n    onClickSell,\n    getPositionById,\n    server_time,\n}: TMultiplierOpenPositionstemplateProps) => [\n    {\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'type',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) return localize('Total');\n\n            return (\n                <MarketSymbolIconRow key={row_obj.id} payload={row_obj.contract_info} should_show_multiplier={false} />\n            );\n        },\n    },\n    {\n        title: localize('Multiplier'),\n        col_index: 'multiplier',\n        renderCellContent: ({ row_obj }: TCellContentProps) =>\n            row_obj.contract_info && row_obj.contract_info.multiplier ? `x${row_obj.contract_info.multiplier}` : '',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <CurrencyWrapper currency={getCurrencyDisplayCode(row_obj.contract_info?.currency)} />\n        ),\n    },\n    {\n        title: localize('Stake'),\n        col_index: 'buy_price',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (row_obj.contract_info) {\n                const { ask_price: cancellation_price = 0 } = row_obj.contract_info.cancellation || {};\n                return <Money amount={row_obj.contract_info.buy_price - cancellation_price} currency={currency} />;\n            }\n            return '';\n        },\n    },\n    {\n        title: localize('Deal cancel. fee'),\n        col_index: 'cancellation',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.underlying) return '-';\n\n            if (!shouldShowCancellation(row_obj.contract_info.underlying)) return localize('N/A');\n\n            if (row_obj.contract_info.cancellation) {\n                return <Money amount={row_obj.contract_info.cancellation.ask_price} currency={currency} />;\n            }\n            return '-';\n        },\n    },\n    {\n        title: isMobile() ? (\n            <Localize i18n_default_text='Total buy price' />\n        ) : (\n            <Localize i18n_default_text='Buy price' />\n        ),\n        col_index: 'purchase',\n        renderCellContent: ({ cell_value }: TCellContentProps) => <Money amount={cell_value} currency={currency} />,\n    },\n    {\n        title: <Localize i18n_default_text='Take profit<0 />Stop loss' components={[<br key={0} />]} />,\n        col_index: 'limit_order',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return '';\n            }\n\n            const { take_profit, stop_loss } = row_obj.contract_info?.limit_order || {};\n            return (\n                <React.Fragment>\n                    <div>\n                        {take_profit?.order_amount ? (\n                            <Money has_sign amount={take_profit.order_amount} currency={currency} />\n                        ) : (\n                            '-'\n                        )}\n                    </div>\n                    <div>\n                        {stop_loss?.order_amount ? (\n                            <Money has_sign amount={stop_loss.order_amount} currency={currency} />\n                        ) : (\n                            '-'\n                        )}\n                    </div>\n                </React.Fragment>\n            );\n        },\n    },\n    {\n        title: localize('Current stake'),\n        col_index: 'bid_price',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return '';\n            }\n\n            if (!row_obj.contract_info || !row_obj.contract_info.bid_price) return '-';\n\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            return (\n                <div\n                    className={classNames('open-positions__bid_price', {\n                        'open-positions__bid_price--negative': total_profit < 0,\n                        'open-positions__bid_price--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={row_obj.contract_info.bid_price} currency={currency} />\n                </div>\n            );\n        },\n    },\n    {\n        title: isMobile() ? (\n            <Localize i18n_default_text='Total profit/loss' />\n        ) : (\n            <Localize i18n_default_text='Total<0 />profit/loss' components={[<br key={0} />]} />\n        ),\n        col_index: 'profit',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.profit) return null;\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            // eslint-disable-next-line consistent-return\n            return (\n                <div\n                    className={classNames('open-positions__profit-loss', {\n                        'open-positions__profit-loss--negative': total_profit < 0,\n                        'open-positions__profit-loss--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={Math.abs(total_profit)} currency={currency} />\n                    <div className='open-positions__profit-loss--movement'>\n                        {total_profit > 0 ? <Icon icon='IcProfit' /> : <Icon icon='IcLoss' />}\n                    </div>\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Action'),\n        col_index: 'action',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return <div className='open-positions__row-action' />;\n            }\n\n            const { contract_info } = row_obj;\n            const position = getPositionById(contract_info.contract_id);\n            const { is_sell_requested } = position || {};\n\n            return (\n                <div className='open-positions__row-action'>\n                    <ContractCard.MultiplierCloseActions\n                        contract_info={contract_info}\n                        getCardLabels={getCardLabels}\n                        is_sell_requested={is_sell_requested}\n                        onClickCancel={onClickCancel}\n                        onClickSell={onClickSell}\n                        server_time={server_time}\n                    />\n                </div>\n            );\n        },\n    },\n];\n\nexport const getAccumulatorOpenPositionsColumnsTemplate = ({\n    currency,\n    onClickSell,\n    getPositionById,\n}: TAccumulatorOpenPositionstemplateProps) => [\n    {\n        title: isMobile() ? '' : localize('Type'),\n        col_index: 'type',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) return localize('Total');\n\n            return (\n                <MarketSymbolIconRow\n                    key={row_obj.id}\n                    payload={row_obj.contract_info}\n                    should_show_multiplier={false}\n                    should_show_accumulator={false}\n                />\n            );\n        },\n    },\n    {\n        title: localize('Growth rate'),\n        col_index: 'growth_rate',\n        renderCellContent: ({ row_obj }: TCellContentProps) =>\n            row_obj.contract_info && row_obj.contract_info.growth_rate\n                ? `${getGrowthRatePercentage(row_obj.contract_info.growth_rate)}%`\n                : '',\n    },\n    {\n        title: localize('Currency'),\n        col_index: 'currency',\n        renderCellContent: ({ row_obj }: TCellContentProps) => (\n            <CurrencyWrapper currency={getCurrencyDisplayCode(row_obj.contract_info?.currency)} />\n        ),\n    },\n    {\n        title: isMobile() ? localize('Total stake') : localize('Initial stake'),\n        col_index: isMobile() ? 'purchase' : 'buy_price',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (row_obj.contract_info) {\n                return <Money amount={row_obj.contract_info.buy_price} currency={currency} />;\n            }\n            return '';\n        },\n    },\n    {\n        title: localize('Take profit'),\n        col_index: 'limit_order',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            const { take_profit } = row_obj.contract_info?.limit_order || {};\n            return (\n                <div>\n                    {take_profit?.order_amount ? (\n                        <Money has_sign amount={take_profit.order_amount} currency={currency} />\n                    ) : (\n                        '-'\n                    )}\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Current stake'),\n        col_index: 'bid_price',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.bid_price) return '-';\n\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            return (\n                <div\n                    className={classNames('open-positions__bid_price', {\n                        'open-positions__bid_price--negative': total_profit < 0,\n                        'open-positions__bid_price--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={row_obj.contract_info.bid_price} currency={currency} />\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Total profit/loss'),\n        col_index: 'profit',\n        renderCellContent: ({ row_obj }: TCellContentProps) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.profit) return null;\n            const total_profit = getTotalProfit(row_obj.contract_info);\n            // eslint-disable-next-line consistent-return\n            return (\n                <div\n                    className={classNames('open-positions__profit-loss', {\n                        'open-positions__profit-loss--negative': total_profit < 0,\n                        'open-positions__profit-loss--positive': total_profit > 0,\n                    })}\n                >\n                    <Money amount={Math.abs(total_profit)} currency={currency} />\n                    <div className='open-positions__profit-loss--movement'>\n                        {total_profit > 0 ? <Icon icon='IcProfit' /> : <Icon icon='IcLoss' />}\n                    </div>\n                </div>\n            );\n        },\n    },\n    {\n        title: localize('Action'),\n        col_index: 'action',\n        renderCellContent: ({ row_obj, is_footer }: TCellContentProps) => {\n            if (is_footer) {\n                return <div className='open-positions__row-action' />;\n            }\n\n            const { contract_info } = row_obj;\n            const position = getPositionById(contract_info.contract_id);\n            const { is_sell_requested } = position || {};\n\n            return (\n                <div className='open-positions__row-action'>\n                    <ContractCardSell\n                        contract_info={contract_info}\n                        is_sell_requested={is_sell_requested}\n                        getCardLabels={getCardLabels}\n                        onClickSell={onClickSell}\n                    />\n                </div>\n            );\n        },\n    },\n];\n/* eslint-enable react/display-name, react/prop-types */\n","import classNames from 'classnames';\nimport React from 'react';\n\nconst Loading = ({ className, is_invisible, theme, id, data_testid }) => (\n    <div\n        id={id}\n        data-testid={data_testid}\n        className={classNames('barspinner', `barspinner--${theme || 'dark'}`, { invisible: is_invisible }, className)}\n    >\n        {Array.from(new Array(5)).map((x, inx) => (\n            <div key={inx} className={`barspinner__rect barspinner__rect--${inx + 1} rect${inx + 1}`} />\n        ))}\n    </div>\n);\n\nexport default Loading;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Loading from '_common/components/loading.jsx';\n\nconst PlaceholderComponent = props => {\n    const EmptyMessageComponent = props.empty_message_component;\n    return (\n        <React.Fragment>\n            {props.is_empty && (\n                <EmptyMessageComponent\n                    component_icon={props.component_icon}\n                    has_selected_date={props.has_selected_date}\n                    localized_message={props.localized_message}\n                    localized_period_message={props.localized_period_message}\n                />\n            )}\n            {props.is_loading && <Loading data_testid='dt_loading_component' />}\n        </React.Fragment>\n    );\n};\n\nPlaceholderComponent.propTypes = {\n    component_icon: PropTypes.string,\n    empty_message_component: PropTypes.func,\n    has_selected_date: PropTypes.bool,\n    is_empty: PropTypes.bool,\n    is_loading: PropTypes.bool,\n    localized_message: PropTypes.string,\n    localized_period_message: PropTypes.string,\n};\n\nexport default PlaceholderComponent;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n    DesktopWrapper,\n    MobileWrapper,\n    ProgressBar,\n    ProgressSliderMobile,\n    DataList,\n    DataTable,\n    ContractCard,\n    usePrevious,\n    PositionsDrawerCard,\n    SelectNative,\n    Dropdown,\n} from '@deriv/components';\nimport {\n    isAccumulatorContract,\n    isMobile,\n    isMultiplierContract,\n    isVanillaContract,\n    isTurbosContract,\n    getTimePercentage,\n    getUnsupportedContracts,\n    getTotalProfit,\n    getContractPath,\n    getCurrentTick,\n    getDurationPeriod,\n    getDurationUnitText,\n    getGrowthRatePercentage,\n    getCardLabels,\n    toMoment,\n    TContractStore,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { ReportsTableRowLoader } from '../Components/Elements/ContentLoader';\nimport { getContractDurationType } from '../Helpers/market-underlying';\n\nimport EmptyTradeHistoryMessage from '../Components/empty-trade-history-message';\nimport {\n    getOpenPositionsColumnsTemplate,\n    getAccumulatorOpenPositionsColumnsTemplate,\n    getMultiplierOpenPositionsColumnsTemplate,\n} from 'Constants/data-table-constants';\nimport PlaceholderComponent from '../Components/placeholder-component';\nimport { connect } from 'Stores/connect';\nimport type { TRootStore } from 'Stores/index';\nimport { TColIndex } from 'Types';\nimport moment from 'moment';\n\ntype TPortfolioStore = TRootStore['portfolio'];\ntype TDataList = React.ComponentProps<typeof DataList>;\ntype TDataListCell = React.ComponentProps<typeof DataList.Cell>;\ntype TRowRenderer = TDataList['rowRenderer'];\ntype TMobileRowRenderer = {\n    row?: TDataList['data_source'][number];\n    is_footer?: boolean;\n    columns_map?: Record<TColIndex, TDataListCell['column']>;\n    server_time?: moment.Moment;\n    onClickCancel: (contract_id?: number) => void;\n    onClickSell: (contract_id?: number) => void;\n    measure?: () => void;\n};\ntype TRangeFloatZeroToOne = React.ComponentProps<typeof ProgressBar>['value'];\ntype TEmptyPlaceholderWrapper = React.PropsWithChildren<{\n    is_empty: boolean;\n    component_icon: string;\n}>;\n\nconst EmptyPlaceholderWrapper = ({ is_empty, component_icon, children }: TEmptyPlaceholderWrapper) => (\n    <React.Fragment>\n        {is_empty ? (\n            <PlaceholderComponent\n                is_empty={is_empty}\n                empty_message_component={EmptyTradeHistoryMessage}\n                component_icon={component_icon}\n                localized_message={localize('You have no open positions yet.')}\n            />\n        ) : (\n            children\n        )}\n    </React.Fragment>\n);\n\ntype TOpenPositionsTable = Pick<TDataList, 'getRowAction'> & {\n    className: string;\n    columns: Record<string, unknown>[];\n    component_icon: string;\n    currency: string;\n    active_positions: TPortfolioStore['active_positions'];\n    is_loading: boolean;\n    mobileRowRenderer: TRowRenderer;\n    preloaderCheck: (item: TTotals) => boolean;\n    row_size: number;\n    totals: TTotals;\n    is_empty: boolean;\n};\n\ntype TTotals = {\n    contract_info?: {\n        profit?: number;\n        buy_price?: number;\n        bid_price?: number;\n        cancellation?: {\n            ask_price?: number;\n        };\n        limit_order?: {\n            take_profit?: {\n                order_amount?: number | null;\n            };\n        };\n    };\n    indicative?: number;\n    purchase?: number;\n    profit_loss?: number;\n    payout?: number;\n};\n\ntype TAddToastProps = {\n    key?: string;\n    content: string;\n    timeout?: number;\n    is_bottom?: boolean;\n    type?: string;\n};\n\ntype TOpenPositions = Pick<\n    TPortfolioStore,\n    | 'active_positions'\n    | 'error'\n    | 'getPositionById'\n    | 'is_loading'\n    | 'is_multiplier'\n    | 'onClickCancel'\n    | 'onClickSell'\n    | 'onMount'\n> & {\n    component_icon: string;\n    currency: string;\n    is_accumulator: boolean;\n    is_eu: boolean;\n    is_virtual: boolean;\n    NotificationMessages: () => JSX.Element;\n    server_time: moment.Moment;\n    addToast: (obj: TAddToastProps) => void;\n    current_focus: string;\n    onClickRemove: () => void;\n    getContractById: (contract_id?: number) => TContractStore;\n    removeToast: () => void;\n    setCurrentFocus: () => void;\n    should_show_cancellation_warning: boolean;\n    toggleCancellationWarning: () => void;\n    toggleUnsupportedContractModal: () => void;\n};\n\ntype TMobileRowRendererProps = Pick<\n    TOpenPositions,\n    | 'addToast'\n    | 'current_focus'\n    | 'getContractById'\n    | 'onClickRemove'\n    | 'removeToast'\n    | 'setCurrentFocus'\n    | 'should_show_cancellation_warning'\n    | 'toggleCancellationWarning'\n    | 'toggleUnsupportedContractModal'\n> &\n    Omit<TMobileRowRenderer, 'columns_map'> & {\n        columns_map: { [key: TColIndex]: undefined | TDataListCell['column'] };\n    };\n\nconst MobileRowRenderer = ({\n    row = {},\n    is_footer,\n    columns_map = {},\n    server_time = toMoment(),\n    onClickCancel,\n    onClickSell,\n    measure,\n    ...props\n}: TMobileRowRendererProps) => {\n    React.useEffect(() => {\n        if (!is_footer) {\n            measure?.();\n        }\n    }, [row.contract_info?.underlying, measure, is_footer]);\n\n    if (is_footer) {\n        return (\n            <>\n                <div className='open-positions__data-list-footer--content'>\n                    <div>\n                        <DataList.Cell row={row} column={columns_map.purchase} />\n                        <DataList.Cell row={row} column={columns_map.payout} />\n                    </div>\n                    <div>\n                        <DataList.Cell\n                            className='data-list__row-cell--amount'\n                            row={row}\n                            column={columns_map.indicative}\n                        />\n                        <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.profit} />\n                    </div>\n                </div>\n            </>\n        );\n    }\n\n    const { contract_info, contract_update, type, is_sell_requested } =\n        row as TPortfolioStore['active_positions'][number];\n    const { currency, status, date_expiry, date_start, tick_count, purchase_time } = contract_info;\n    const current_tick = tick_count ? getCurrentTick(contract_info) : null;\n    const turbos_duration_unit = tick_count ? 'ticks' : getDurationUnitText(getDurationPeriod(contract_info), true);\n    const duration_type = getContractDurationType(\n        isTurbosContract(contract_info.contract_type) ? turbos_duration_unit : contract_info.longcode || ''\n    );\n    const progress_value = (getTimePercentage(server_time, date_start ?? 0, date_expiry ?? 0) /\n        100) as TRangeFloatZeroToOne;\n\n    if (isMultiplierContract(type ?? '') || isAccumulatorContract(type)) {\n        return (\n            <PositionsDrawerCard\n                contract_info={contract_info}\n                contract_update={contract_update}\n                currency={currency ?? ''}\n                is_link_disabled\n                onClickCancel={onClickCancel}\n                onClickSell={onClickSell}\n                server_time={server_time}\n                status={status ?? ''}\n                {...props}\n            />\n        );\n    }\n\n    return (\n        <>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.type} />\n                {isVanillaContract(type) || (isTurbosContract(type) && !tick_count) ? (\n                    <ProgressSliderMobile\n                        current_tick={current_tick}\n                        className='data-list__row--timer'\n                        expiry_time={date_expiry}\n                        getCardLabels={getCardLabels}\n                        is_loading={false}\n                        server_time={server_time}\n                        start_time={purchase_time}\n                        ticks_count={tick_count}\n                    />\n                ) : (\n                    <ProgressBar label={duration_type} value={progress_value} />\n                )}\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.reference} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.currency} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.purchase} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.indicative} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.payout} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.profit} />\n            </div>\n            <div className='data-list__row-divider' />\n            <div className='data-list__row'>\n                <ContractCard.Sell\n                    contract_info={contract_info}\n                    is_sell_requested={is_sell_requested}\n                    getCardLabels={getCardLabels}\n                    onClickSell={onClickSell}\n                />\n            </div>\n        </>\n    );\n};\n\nexport const OpenPositionsTable = ({\n    className,\n    columns,\n    component_icon,\n    currency,\n    active_positions,\n    is_loading,\n    getRowAction,\n    mobileRowRenderer,\n    preloaderCheck,\n    row_size,\n    totals,\n    is_empty,\n}: TOpenPositionsTable) => (\n    <React.Fragment>\n        {is_loading ? (\n            <PlaceholderComponent\n                is_loading={is_loading}\n                empty_message_component={EmptyTradeHistoryMessage}\n                component_icon={component_icon}\n                localized_message={localize('You have no open positions yet.')}\n            />\n        ) : (\n            currency && (\n                <div className='reports__content'>\n                    <DesktopWrapper>\n                        <EmptyPlaceholderWrapper component_icon={component_icon} is_empty={is_empty}>\n                            <DataTable\n                                className={className}\n                                columns={columns}\n                                preloaderCheck={preloaderCheck}\n                                footer={totals}\n                                data_source={active_positions}\n                                getRowAction={getRowAction}\n                                getRowSize={() => row_size}\n                                content_loader={ReportsTableRowLoader}\n                            >\n                                <PlaceholderComponent is_loading={is_loading} />\n                            </DataTable>\n                        </EmptyPlaceholderWrapper>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <EmptyPlaceholderWrapper component_icon={component_icon} is_empty={is_empty}>\n                            <DataList\n                                className={className}\n                                data_source={active_positions}\n                                footer={totals}\n                                rowRenderer={mobileRowRenderer}\n                                getRowAction={getRowAction}\n                                row_gap={8}\n                                keyMapper={item => item?.id}\n                            >\n                                <PlaceholderComponent is_loading={is_loading} />\n                            </DataList>\n                        </EmptyPlaceholderWrapper>\n                    </MobileWrapper>\n                </div>\n            )\n        )}\n    </React.Fragment>\n);\n\nconst getRowAction: TDataList['getRowAction'] = row_obj =>\n    row_obj.is_unsupported\n        ? {\n              component: (\n                  <Localize\n                      i18n_default_text=\"The {{trade_type_name}} contract details aren't currently available. We're working on making them available soon.\"\n                      values={{\n                          trade_type_name:\n                              getUnsupportedContracts()[\n                                  row_obj.type as keyof ReturnType<typeof getUnsupportedContracts>\n                              ]?.name,\n                      }}\n                  />\n              ),\n          }\n        : getContractPath(row_obj.id || 0);\n\n/*\n * After refactoring transactionHandler for creating positions,\n * purchase property in contract positions object is somehow NaN or undefined in the first few responses.\n * So we set it to true in these cases to show a preloader for the data-table-row until the correct value is set.\n */\nconst isPurchaseReceived: TOpenPositionsTable['preloaderCheck'] = (item: { purchase?: number }) =>\n    isNaN(Number(item.purchase)) || !item.purchase;\n\nconst getOpenPositionsTotals = (\n    active_positions_filtered: TPortfolioStore['active_positions'],\n    is_multiplier_selected: boolean,\n    is_accumulator_selected: boolean\n) => {\n    let totals: TTotals;\n\n    if (is_multiplier_selected) {\n        let ask_price = 0;\n        let profit = 0;\n        let buy_price = 0;\n        let bid_price = 0;\n        let purchase = 0;\n\n        active_positions_filtered.forEach(portfolio_pos => {\n            buy_price += Number(portfolio_pos.contract_info.buy_price);\n            bid_price += Number(portfolio_pos.contract_info.bid_price);\n            purchase += Number(portfolio_pos.purchase);\n            if (portfolio_pos.contract_info) {\n                const prices = {\n                    bid_price: portfolio_pos.contract_info.bid_price ?? 0,\n                    buy_price: portfolio_pos.contract_info.buy_price ?? 0,\n                };\n                profit += getTotalProfit(prices);\n\n                if (portfolio_pos.contract_info.cancellation) {\n                    ask_price += portfolio_pos.contract_info.cancellation.ask_price || 0;\n                }\n            }\n        });\n        totals = {\n            contract_info: {\n                profit,\n                buy_price,\n                bid_price,\n            },\n            purchase,\n        };\n\n        if (ask_price > 0) {\n            if (totals.contract_info)\n                totals.contract_info.cancellation = {\n                    ask_price,\n                };\n        }\n    } else if (is_accumulator_selected) {\n        let buy_price = 0;\n        let bid_price = 0;\n        let take_profit = 0;\n        let profit = 0;\n\n        active_positions_filtered?.forEach(({ contract_info }) => {\n            buy_price += +(contract_info.buy_price ?? 0);\n            bid_price += +(contract_info.bid_price ?? 0);\n            take_profit += contract_info.limit_order?.take_profit?.order_amount ?? 0;\n            if (contract_info) {\n                profit += getTotalProfit(contract_info);\n            }\n        });\n        totals = {\n            contract_info: {\n                buy_price,\n                bid_price,\n                profit,\n                limit_order: {\n                    take_profit: {\n                        order_amount: take_profit,\n                    },\n                },\n            },\n            purchase: buy_price,\n        };\n    } else {\n        let indicative = 0;\n        let purchase = 0;\n        let profit_loss = 0;\n        let payout = 0;\n\n        active_positions_filtered?.forEach(portfolio_pos => {\n            indicative += +portfolio_pos.indicative;\n            purchase += Number(portfolio_pos.purchase);\n            profit_loss += Number(portfolio_pos.profit_loss);\n            payout += Number(portfolio_pos.payout);\n        });\n        totals = {\n            indicative,\n            purchase,\n            profit_loss,\n            payout,\n        };\n    }\n    return totals;\n};\n\nconst OpenPositions = ({\n    active_positions,\n    component_icon,\n    currency,\n    error,\n    getPositionById,\n    is_accumulator,\n    is_eu,\n    is_loading,\n    is_multiplier,\n    is_virtual,\n    NotificationMessages,\n    onClickCancel,\n    onClickSell,\n    onMount,\n    server_time,\n    ...props\n}: TOpenPositions) => {\n    const [has_accumulator_contract, setHasAccumulatorContract] = React.useState(false);\n    const [has_multiplier_contract, setHasMultiplierContract] = React.useState(false);\n    const previous_active_positions = usePrevious(active_positions);\n    const contract_types = [\n        { text: localize('Options'), is_default: !is_multiplier && !is_accumulator },\n        { text: localize('Multipliers'), is_default: is_multiplier },\n        { text: localize('Accumulators'), is_default: is_accumulator },\n    ];\n    const [contract_type_value, setContractTypeValue] = React.useState(\n        contract_types.find(type => type.is_default)?.text || localize('Options')\n    );\n    const accumulator_rates = [localize('All growth rates'), '1%', '2%', '3%', '4%', '5%'];\n    const [accumulator_rate, setAccumulatorRate] = React.useState(accumulator_rates[0]);\n    const is_accumulator_selected = contract_type_value === contract_types[2].text;\n    const is_multiplier_selected = contract_type_value === contract_types[1].text;\n    const show_accu_in_dropdown = !is_eu && is_virtual;\n    const contract_types_list = contract_types\n        .filter(contract_type => contract_type.text !== localize('Accumulators') || show_accu_in_dropdown)\n        .map(({ text }) => ({ text, value: text }));\n    const accumulators_rates_list = accumulator_rates.map(value => ({ text: value, value }));\n    const active_positions_filtered = active_positions?.filter(({ contract_info }) => {\n        if (contract_info) {\n            if (is_multiplier_selected) return isMultiplierContract(contract_info.contract_type || '');\n            if (is_accumulator_selected)\n                return (\n                    isAccumulatorContract(contract_info.contract_type) &&\n                    (`${getGrowthRatePercentage(contract_info.growth_rate || 0)}%` === accumulator_rate ||\n                        !accumulator_rate.includes('%'))\n                );\n            return (\n                !isMultiplierContract(contract_info.contract_type || '') &&\n                !isAccumulatorContract(contract_info.contract_type)\n            );\n        }\n        return true;\n    });\n    const active_positions_filtered_totals = getOpenPositionsTotals(\n        active_positions_filtered,\n        is_multiplier_selected,\n        is_accumulator_selected\n    );\n\n    React.useEffect(() => {\n        /*\n         * For mobile, we show portfolio stepper in header even for reports pages.\n         * `onMount` in portfolio store will be invoked from portfolio stepper component in `trade-header-extensions.jsx`\n         */\n\n        onMount();\n        checkForAccuAndMultContracts();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    React.useEffect(() => {\n        checkForAccuAndMultContracts(previous_active_positions);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [previous_active_positions]);\n\n    const checkForAccuAndMultContracts = (prev_active_positions: TPortfolioStore['active_positions'] = []) => {\n        if (active_positions === prev_active_positions) return;\n        if (!has_accumulator_contract) {\n            setHasAccumulatorContract(\n                active_positions.some(({ contract_info }) => isAccumulatorContract(contract_info?.contract_type))\n            );\n        }\n        if (!has_multiplier_contract) {\n            setHasMultiplierContract(\n                active_positions.some(({ contract_info }) => isMultiplierContract(contract_info?.contract_type || ''))\n            );\n        }\n    };\n\n    if (error) return <p>{error}</p>;\n\n    const getColumns = () => {\n        if (is_multiplier_selected) {\n            return getMultiplierOpenPositionsColumnsTemplate({\n                currency,\n                onClickCancel,\n                onClickSell,\n                getPositionById,\n                server_time,\n            });\n        }\n        if (is_accumulator_selected) {\n            return getAccumulatorOpenPositionsColumnsTemplate({\n                currency,\n                onClickSell,\n                getPositionById,\n            });\n        }\n        return getOpenPositionsColumnsTemplate(currency);\n    };\n\n    const columns = getColumns();\n\n    const columns_map = {} as Record<TColIndex, TDataListCell['column']>;\n    columns.forEach(e => {\n        columns_map[e.col_index] = e as TDataListCell['column'];\n    });\n\n    const mobileRowRenderer: TRowRenderer = args => (\n        <MobileRowRenderer\n            {...args}\n            columns_map={columns_map}\n            server_time={server_time}\n            onClickCancel={onClickCancel}\n            onClickSell={onClickSell}\n            {...props}\n        />\n    );\n\n    const shared_props = {\n        active_positions: active_positions_filtered,\n        component_icon,\n        currency,\n        is_loading,\n        mobileRowRenderer,\n        getRowAction,\n        preloaderCheck: isPurchaseReceived,\n        totals: active_positions_filtered_totals,\n    };\n\n    const getOpenPositionsTable = () => {\n        let classname = 'open-positions';\n        let row_size = isMobile() ? 5 : 63;\n\n        if (is_accumulator_selected) {\n            classname = 'open-positions-accumulator open-positions';\n            row_size = isMobile() ? 3 : 68;\n        } else if (is_multiplier_selected) {\n            classname = 'open-positions-multiplier open-positions';\n            row_size = isMobile() ? 3 : 68;\n        }\n\n        return (\n            <OpenPositionsTable\n                className={classname}\n                columns={columns}\n                is_empty={active_positions_filtered.length === 0}\n                row_size={row_size}\n                {...shared_props}\n            />\n        );\n    };\n\n    return (\n        <React.Fragment>\n            <NotificationMessages />\n            {active_positions.length !== 0 && (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <div\n                            className={\n                                is_accumulator_selected\n                                    ? 'open-positions__accumulator-container'\n                                    : 'open-positions__contract-types-selector-container'\n                            }\n                        >\n                            <div className='open-positions__accumulator-container__contract-dropdown'>\n                                <Dropdown\n                                    is_align_text_left\n                                    name='contract_types'\n                                    list={contract_types_list}\n                                    value={contract_type_value}\n                                    onChange={e => setContractTypeValue(e.target.value)}\n                                />\n                            </div>\n                            {is_accumulator_selected && show_accu_in_dropdown && (\n                                <div className='open-positions__accumulator-container__rates-dropdown'>\n                                    <Dropdown\n                                        is_align_text_left\n                                        name='accumulator_rates'\n                                        list={accumulators_rates_list}\n                                        value={accumulator_rate}\n                                        onChange={e => setAccumulatorRate(e.target.value)}\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <div\n                            className={\n                                is_accumulator_selected\n                                    ? 'open-positions__accumulator-container--mobile'\n                                    : 'open-positions__contract-types-selector-container--mobile'\n                            }\n                        >\n                            <SelectNative\n                                className='open-positions__accumulator-container-mobile__contract-dropdown'\n                                list_items={contract_types_list}\n                                value={contract_type_value}\n                                should_show_empty_option={false}\n                                onChange={(e: React.ChangeEvent<HTMLSelectElement> & { target: { value: string } }) =>\n                                    setContractTypeValue(e.target.value)\n                                }\n                            />\n                            {is_accumulator_selected && show_accu_in_dropdown && (\n                                <SelectNative\n                                    className='open-positions__accumulator-container--mobile__rates-dropdown'\n                                    list_items={accumulators_rates_list}\n                                    value={accumulator_rate}\n                                    should_show_empty_option={false}\n                                    onChange={(\n                                        e: React.ChangeEvent<HTMLSelectElement> & { target: { value: string } }\n                                    ) => setAccumulatorRate(e.target.value)}\n                                />\n                            )}\n                        </div>\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n            {getOpenPositionsTable()}\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(\n    connect(({ client, common, ui, portfolio, contract_trade }: TRootStore) => ({\n        active_positions: portfolio.active_positions,\n        currency: client.currency,\n        is_eu: client.is_eu,\n        is_virtual: client.is_virtual,\n        error: portfolio.error,\n        getPositionById: portfolio.getPositionById,\n        is_accumulator: portfolio.is_accumulator,\n        is_loading: portfolio.is_loading,\n        is_multiplier: portfolio.is_multiplier,\n        NotificationMessages: ui.notification_messages_ui,\n        onClickCancel: portfolio.onClickCancel,\n        onClickSell: portfolio.onClickSell,\n        onMount: portfolio.onMount,\n        server_time: common.server_time,\n        addToast: ui.addToast,\n        current_focus: ui.current_focus,\n        onClickRemove: portfolio.removePositionById,\n        getContractById: contract_trade.getContractById,\n        removeToast: ui.removeToast,\n        setCurrentFocus: ui.setCurrentFocus,\n        should_show_cancellation_warning: ui.should_show_cancellation_warning,\n        toggleCancellationWarning: ui.toggleCancellationWarning,\n        toggleUnsupportedContractModal: ui.toggleUnsupportedContractModal,\n    }))(OpenPositions)\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Button, DatePicker, Icon, InputField, MobileDialog, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { toMoment } from '@deriv/shared';\nimport { TInputDateRange } from 'Types';\n\ntype TRadioButton = {\n    id: string;\n    className?: string;\n    selected_value?: string;\n    value?: string;\n    label?: string;\n    onChange: (value: { label?: string; value?: string }) => void;\n};\n\nexport const RadioButton = ({ id, className, selected_value, value, label, onChange }: TRadioButton) => {\n    return (\n        <label\n            htmlFor={id}\n            className={classNames('composite-calendar-modal__radio', className, {\n                'composite-calendar-modal__radio--selected': selected_value === value,\n            })}\n            onClick={() => onChange({ label, value })}\n        >\n            <input className='composite-calendar-modal__radio-input' id={id} type='radio' value={value} />\n            <span\n                className={classNames('composite-calendar-modal__radio-circle', {\n                    'composite-calendar-modal__radio-circle--selected': selected_value === value,\n                })}\n            />\n            <Text\n                as='p'\n                color='prominent'\n                size='xs'\n                line_height='unset'\n                weight={selected_value === value ? 'bold' : 'normal'}\n            >\n                {label}\n            </Text>\n        </label>\n    );\n};\nconst CUSTOM_KEY = 'custom';\n\ntype TCompositeCalendarMobile = {\n    input_date_range: TInputDateRange;\n    current_focus: string;\n    duration_list: Array<TInputDateRange>;\n    onChange: (\n        value: { from?: moment.Moment; to?: moment.Moment; is_batch?: boolean },\n        extra_data?: { date_range: TInputDateRange }\n    ) => void;\n    setCurrentFocus: (focus: string) => void;\n    from: number;\n    to: number;\n};\n\nconst CompositeCalendarMobile = React.memo(\n    ({\n        input_date_range,\n        current_focus,\n        duration_list,\n        onChange,\n        setCurrentFocus,\n        from,\n        to,\n    }: TCompositeCalendarMobile) => {\n        const date_range = input_date_range || duration_list.find(range => range.value === 'all_time');\n\n        const [from_date, setFrom] = React.useState(from ? toMoment(from).format('YYYY-MM-DD') : undefined);\n        const [to_date, setTo] = React.useState(to ? toMoment(to).format('YYYY-MM-DD') : undefined);\n        const [is_open, setIsOpen] = React.useState(false);\n\n        const [applied_date_range, setAppliedDateRange] = React.useState(date_range);\n        const [selected_date_range, setSelectedDateRange] = React.useState(date_range);\n        const today = toMoment().format('YYYY-MM-DD');\n\n        const selectDateRange = (_selected_date_range: TInputDateRange, is_today?: boolean) => {\n            const new_from = _selected_date_range.duration;\n            onChange(\n                {\n                    from:\n                        is_today || new_from\n                            ? toMoment().startOf('day').subtract(new_from, 'day').add(1, 's')\n                            : undefined,\n                    to: toMoment().endOf('day'),\n                    is_batch: true,\n                },\n                {\n                    date_range: _selected_date_range,\n                }\n            );\n        };\n\n        const selectCustomDateRange = () => {\n            const new_from = from_date || to_date || today;\n            const new_to = to_date || today;\n\n            const new_date_range = Object.assign(selected_date_range, {\n                label: `${toMoment(new_from).format('DD MMM YYYY')} - ${toMoment(new_to).format('DD MMM YYYY')}`,\n            });\n\n            onChange(\n                {\n                    from: toMoment(new_from).startOf('day').add(1, 's'),\n                    to: toMoment(new_to).endOf('day'),\n                    is_batch: true,\n                },\n                {\n                    date_range: new_date_range,\n                }\n            );\n        };\n\n        const applyDateRange = () => {\n            if (selected_date_range.onClick) {\n                selectDateRange(selected_date_range);\n            } else if (selected_date_range.value === CUSTOM_KEY) {\n                selectCustomDateRange();\n            }\n            setAppliedDateRange(selected_date_range);\n            setIsOpen(false);\n        };\n\n        const selectToday = () => {\n            const new_date_range = {\n                duration: 0,\n                label: localize('Today'),\n            };\n            selectDateRange(new_date_range, true);\n            setAppliedDateRange(new_date_range);\n            setSelectedDateRange(new_date_range);\n            setIsOpen(false);\n        };\n\n        const selectDate = (e: React.ChangeEvent<HTMLInputElement>, key: string) => {\n            setSelectedDateRange({ value: CUSTOM_KEY });\n\n            if (key === 'from') setFrom(e.target?.value);\n            if (key === 'to') setTo(e.target?.value);\n        };\n\n        const getMobileFooter = () => {\n            return (\n                <div className='composite-calendar-modal__actions'>\n                    <Button\n                        className='composite-calendar-modal__actions__cancel'\n                        text={localize('Cancel')}\n                        onClick={() => setIsOpen(false)}\n                        has_effect\n                        secondary\n                        large\n                    />\n                    <Button\n                        className='composite-calendar-modal__actions__ok'\n                        text={localize('OK')}\n                        onClick={applyDateRange}\n                        has_effect\n                        primary\n                        large\n                    />\n                </div>\n            );\n        };\n\n        const onDateRangeChange = (_date_range: TInputDateRange) => {\n            setSelectedDateRange(\n                duration_list.find(range => _date_range && range.value === _date_range.value) || _date_range\n            );\n        };\n\n        const openDialog = () => {\n            setSelectedDateRange(applied_date_range);\n            setIsOpen(true);\n        };\n\n        return (\n            <React.Fragment>\n                <div className='composite-calendar__input-fields composite-calendar__input-fields--fill'>\n                    <InputField\n                        id='dt_calendar_input'\n                        current_focus={current_focus}\n                        is_read_only={true}\n                        icon={() => <Icon icon='IcCalendarDatefrom' className='inline-icon' />}\n                        onClick={openDialog}\n                        setCurrentFocus={setCurrentFocus}\n                        value={applied_date_range.label}\n                    />\n                </div>\n                <MobileDialog\n                    portal_element_id='modal_root'\n                    title={localize('Please select duration')}\n                    visible={is_open}\n                    has_content_scroll\n                    onClose={() => setIsOpen(false)}\n                    content_height_offset='94px'\n                    footer={getMobileFooter()}\n                >\n                    <div className='composite-calendar-modal'>\n                        <div className='composite-calendar-modal__radio-group'>\n                            {duration_list.map(duration => (\n                                <RadioButton\n                                    id={`composite-calendar-modal__radio__${duration.value}`}\n                                    key={duration.value}\n                                    value={duration.value}\n                                    label={duration.label}\n                                    selected_value={selected_date_range.value}\n                                    onChange={onDateRangeChange}\n                                />\n                            ))}\n                        </div>\n                        <div className='composite-calendar-modal__custom'>\n                            <RadioButton\n                                id={'composite-calendar-modal__custom-radio'}\n                                className='composite-calendar-modal__custom-radio'\n                                value={CUSTOM_KEY}\n                                label={localize('Custom')}\n                                selected_value={selected_date_range.value}\n                                onChange={onDateRangeChange}\n                            />\n\n                            <div className='composite-calendar-modal__custom-date-range'>\n                                <DatePicker\n                                    className='composite-calendar-modal__custom-date-range-start-date'\n                                    is_nativepicker={true}\n                                    placeholder={localize('Start date')}\n                                    value={from_date}\n                                    max_date={to_date || today}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => selectDate(e, 'from')}\n                                />\n                                <DatePicker\n                                    className='composite-calendar-modal__custom-date-range-end-date'\n                                    is_nativepicker={true}\n                                    placeholder={localize('End date')}\n                                    value={to_date}\n                                    max_date={today}\n                                    min_date={from_date}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => selectDate(e, 'to')}\n                                />\n                            </div>\n                        </div>\n                        <Button\n                            className='composite-calendar-modal__actions-today'\n                            text={localize('Back to today')}\n                            onClick={selectToday}\n                            has_effect\n                            tertiary\n                            large\n                        />\n                    </div>\n                </MobileDialog>\n            </React.Fragment>\n        );\n    }\n);\n\nCompositeCalendarMobile.displayName = 'CompositeCalendarMobile';\nexport default CompositeCalendarMobile;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TListItem = {\n    label: string | React.ReactElement | Array<string>;\n    is_active: boolean;\n    onClick: () => void;\n};\n\nconst ListItem = ({ onClick, is_active, label }: TListItem) => (\n    <li\n        className={classNames({\n            'composite-calendar__prepopulated-list--is-active': is_active,\n        })}\n        onClick={onClick}\n    >\n        {label}\n    </li>\n);\n\nexport default ListItem;\n","import React from 'react';\nimport { toMoment } from '@deriv/shared';\nimport ListItem from './list-item';\n\ntype TItem = {\n    value: string;\n    label: string;\n    onClick: () => void;\n    duration: number;\n};\n\ntype TSideList = {\n    from: number;\n    items: Array<TItem>;\n    to: number;\n};\n\nconst isActive = (from: number, to: number, flag: number) => {\n    if (flag === 0) {\n        return toMoment().endOf('day').unix() === to && from === null;\n    }\n    return Math.ceil(to / 86400) - Math.ceil(from / 86400) === flag;\n};\n\nconst SideList = ({ items, from, to }: TSideList) => (\n    <ul className='composite-calendar__prepopulated-list'>\n        {items.map(item => {\n            const { duration, label, onClick } = item;\n            const is_active = isActive(from, to, duration);\n            return <ListItem key={duration} is_active={is_active} label={label} onClick={onClick} />;\n        })}\n    </ul>\n);\n\nexport default SideList;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\n\ntype TCalendarIcon = {\n    onClick: () => void;\n};\n\nconst CalendarIcon = ({ onClick }: TCalendarIcon) => (\n    <Icon onClick={onClick} icon='IcCalendarDatefrom' className='inline-icon' />\n);\n\nexport default CalendarIcon;\n","import React from 'react';\nimport Loadable from 'react-loadable';\nimport { DesktopWrapper, InputField, MobileWrapper, useOnClickOutside } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { daysFromTodayTo, toMoment } from '@deriv/shared';\nimport { connect } from 'Stores/connect';\nimport type { TCoreStores } from '@deriv/stores/types';\nimport CompositeCalendarMobile from './composite-calendar-mobile';\nimport SideList from './side-list';\nimport CalendarIcon from './calendar-icon';\nimport TwoMonthPicker from './two-month-picker';\nimport moment from 'moment';\n\ntype TCompositeCalendar = {\n    current_focus: string;\n    onChange: (values: { to?: moment.Moment; from?: moment.Moment; is_batch?: boolean }) => void;\n    setCurrentFocus: () => void;\n    to: number;\n    from: number;\n};\n\ntype TTwoMonthPickerLoadable = {\n    onChange: (date: moment.Moment) => void;\n    isPeriodDisabled: (date: moment.Moment) => boolean;\n    value: number;\n};\n\nconst TwoMonthPickerLoadable = Loadable<TTwoMonthPickerLoadable, typeof TwoMonthPicker>({\n    loader: () => import(/* webpackChunkName: \"two-month-picker\" */ './two-month-picker'),\n    loading: () => null,\n    render(loaded, props) {\n        const Component = loaded.default;\n        return <Component {...props} />;\n    },\n});\n\nconst CompositeCalendar: React.FC<TCompositeCalendar> = props => {\n    const { current_focus, onChange, setCurrentFocus, to, from } = props;\n\n    const [show_to, setShowTo] = React.useState(false);\n    const [show_from, setShowFrom] = React.useState(false);\n    const [list] = React.useState([\n        {\n            value: 'all_time',\n            label: localize('All time'),\n            onClick: () => selectDateRange(),\n            duration: 0,\n        },\n        {\n            value: 'last_7_days',\n            label: localize('Last 7 days'),\n            onClick: () => selectDateRange(7),\n            duration: 7,\n        },\n        {\n            value: 'last_30_days',\n            label: localize('Last 30 days'),\n            onClick: () => selectDateRange(30),\n            duration: 30,\n        },\n        {\n            value: 'last_60_days',\n            label: localize('Last 60 days'),\n            onClick: () => selectDateRange(60),\n            duration: 60,\n        },\n        {\n            value: 'last_quarter',\n            label: localize('Last quarter'),\n            onClick: () => selectDateRange(90),\n            duration: 90,\n        },\n    ]);\n\n    const wrapper_ref = React.useRef<HTMLInputElement>(null);\n\n    const validateClickOutside = (event: MouseEvent) => !wrapper_ref.current?.contains(event.target as Node);\n\n    const selectDateRange = (new_from?: number) => {\n        hideCalendar();\n        onChange({\n            from: new_from ? toMoment().startOf('day').subtract(new_from, 'day').add(1, 's') : undefined,\n            to: toMoment().endOf('day'),\n            is_batch: true,\n        });\n    };\n\n    const getToDateLabel = () => {\n        const date = toMoment(to);\n        return daysFromTodayTo(date) === 0 ? localize('Today') : date.format('MMM, DD YYYY');\n    };\n\n    const getFromDateLabel = () => {\n        const date = toMoment(from);\n        return from ? date.format('MMM, DD YYYY') : '';\n    };\n\n    const hideCalendar = () => {\n        setShowFrom(false);\n        setShowTo(false);\n    };\n\n    const showCalendar = (e: string) => {\n        if (e === 'from') {\n            setShowFrom(true);\n        }\n        if (e === 'to') {\n            setShowTo(true);\n        }\n    };\n\n    useOnClickOutside(\n        wrapper_ref,\n        event => {\n            event?.stopPropagation();\n            event?.preventDefault();\n            hideCalendar();\n        },\n        validateClickOutside\n    );\n\n    const setToDate = (date: moment.Moment) => {\n        onChange({ to: toMoment(date).endOf('day') });\n    };\n\n    const setFromDate = (date: moment.Moment) => {\n        onChange({ from: toMoment(date) });\n        hideCalendar();\n    };\n\n    const isPeriodDisabledTo = (date: moment.Moment) => {\n        return date.unix() < from || date.unix() > toMoment().endOf('day').unix();\n    };\n\n    const isPeriodDisabledFrom = (date: moment.Moment) => date.unix() > to;\n\n    return (\n        <React.Fragment>\n            <DesktopWrapper>\n                <div id='dt_composite_calendar_inputs' className='composite-calendar__input-fields'>\n                    <InputField\n                        id='dt_calendar_input_from'\n                        current_focus={current_focus}\n                        is_read_only\n                        placeholder={localize('Date from')}\n                        icon={CalendarIcon}\n                        onClick={() => showCalendar('from')}\n                        setCurrentFocus={setCurrentFocus}\n                        value={getFromDateLabel()}\n                    />\n                    <InputField\n                        id='dt_calendar_input_to'\n                        current_focus={current_focus}\n                        is_read_only\n                        placeholder={localize('Date to')}\n                        icon={CalendarIcon}\n                        onClick={() => showCalendar('to')}\n                        setCurrentFocus={setCurrentFocus}\n                        value={getToDateLabel()}\n                    />\n                </div>\n                {show_to && (\n                    <div className='composite-calendar' ref={wrapper_ref}>\n                        <SideList from={from} to={to} items={list} />\n                        <TwoMonthPickerLoadable value={to} onChange={setToDate} isPeriodDisabled={isPeriodDisabledTo} />\n                    </div>\n                )}\n                {show_from && (\n                    <div className='composite-calendar' ref={wrapper_ref}>\n                        <SideList from={from} to={to} items={list} />\n                        <TwoMonthPickerLoadable\n                            value={from}\n                            onChange={setFromDate}\n                            isPeriodDisabled={isPeriodDisabledFrom}\n                        />\n                    </div>\n                )}\n            </DesktopWrapper>\n            <MobileWrapper>\n                <CompositeCalendarMobile duration_list={list} {...props} />\n            </MobileWrapper>\n        </React.Fragment>\n    );\n};\n\nCompositeCalendar.displayName = 'CompositeCalendar';\n\nexport default React.memo(\n    connect(({ ui }: TCoreStores) => ({\n        current_focus: ui.current_focus,\n        setCurrentFocus: ui.setCurrentFocus,\n    }))(CompositeCalendar)\n);\n","import CompositeCalendar from './composite-calendar';\n\nexport default CompositeCalendar;\n","import classNames from 'classnames';\nimport React from 'react';\n\ntype TReportsMeta = {\n    filter_component: React.ReactNode;\n    optional_component?: React.ReactNode;\n    className?: string;\n    is_statement?: boolean;\n};\n\nconst ReportsMeta = ({ filter_component, className, optional_component, is_statement }: TReportsMeta) => {\n    return (\n        <div className={classNames('reports__meta', className)}>\n            {optional_component}\n            {filter_component && (\n                <div\n                    className={classNames('reports__meta-filter', {\n                        'reports__meta-filter--statement': is_statement,\n                    })}\n                >\n                    {filter_component}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport { ReportsMeta };\n","import classNames from 'classnames';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { DesktopWrapper, MobileWrapper, DataList, DataTable } from '@deriv/components';\nimport {\n    extractInfoFromShortcode,\n    isForwardStarting,\n    getContractPath,\n    getSupportedContracts,\n    getUnsupportedContracts,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { ReportsTableRowLoader } from '../Components/Elements/ContentLoader';\nimport CompositeCalendar from '../Components/Form/CompositeCalendar';\nimport {\n    TInputDateRange,\n    TColIndex,\n    TColumnTemplateType,\n    TSupportedContractType,\n    TUnsupportedContractType,\n} from 'Types';\n\nimport { connect } from 'Stores/connect';\nimport EmptyTradeHistoryMessage from '../Components/empty-trade-history-message';\nimport PlaceholderComponent from '../Components/placeholder-component';\nimport { ReportsMeta } from '../Components/reports-meta';\nimport { getProfitTableColumnsTemplate } from 'Constants/data-table-constants';\nimport { TRootStore } from 'Stores/index';\nimport moment from 'moment/moment';\n\ntype TProfitTable = {\n    component_icon: string;\n    currency: string;\n    data: Array<{ [key: string]: string }>;\n    date_from: number;\n    date_to: number;\n    error: string;\n    filtered_date_range: TInputDateRange;\n    is_empty: boolean;\n    is_loading: boolean;\n    is_switching: boolean;\n    handleDateChange: (values: { [key: string]: moment.Moment }) => void;\n    handleScroll: (ev: React.UIEvent<HTMLElement>) => void;\n    has_selected_date: boolean;\n    onMount: VoidFunction;\n    onUnmount: VoidFunction;\n    totals: React.ReactNode;\n};\n\nconst getRowAction = (row_obj: { [key: string]: string }) => {\n    const contract_type = extractInfoFromShortcode(row_obj?.shortcode)?.category?.toString().toUpperCase();\n    return getSupportedContracts()[contract_type as TSupportedContractType] &&\n        !isForwardStarting(row_obj.shortcode, +row_obj.purchase_time_unix)\n        ? getContractPath(+row_obj.contract_id)\n        : {\n              component: (\n                  <Localize\n                      i18n_default_text=\"The {{trade_type_name}} contract details aren't currently available. We're working on making them available soon.\"\n                      values={{\n                          trade_type_name: getUnsupportedContracts()[contract_type as TUnsupportedContractType]?.name,\n                      }}\n                  />\n              ),\n          };\n};\n\nconst ProfitTable = ({\n    component_icon,\n    currency,\n    data,\n    date_from,\n    date_to,\n    error,\n    filtered_date_range,\n    is_empty,\n    is_loading,\n    is_switching,\n    handleDateChange,\n    handleScroll,\n    has_selected_date,\n    onMount,\n    onUnmount,\n    totals,\n}: TProfitTable) => {\n    React.useEffect(() => {\n        onMount();\n        return () => {\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (error) return <p>{error}</p>;\n\n    const filter_component = (\n        <CompositeCalendar\n            input_date_range={filtered_date_range}\n            onChange={handleDateChange}\n            from={date_from}\n            to={date_to}\n        />\n    );\n\n    const columns = getProfitTableColumnsTemplate(currency, data.length);\n\n    const columns_map = Object.fromEntries(columns.map(column => [column.col_index, column])) as {\n        [key in TColIndex]: TColumnTemplateType;\n    };\n\n    const mobileRowRenderer = ({ row, is_footer }: { row: any; is_footer?: boolean }) => {\n        const duration_type = /^(MULTUP|MULTDOWN)/.test(row.shortcode) ? '' : row.duration_type;\n        const duration_classname = duration_type ? `duration-type__${duration_type.toLowerCase()}` : '';\n\n        if (is_footer) {\n            return (\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.action_type} is_footer={is_footer} />\n                    <DataList.Cell\n                        className='data-list__row-cell--amount'\n                        row={row}\n                        column={columns_map.profit_loss}\n                        is_footer={is_footer}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.action_type} />\n                    <div className={classNames('duration-type', duration_classname)}>\n                        <div className={classNames('duration-type__background', `${duration_classname}__background`)} />\n                        <span className={`${duration_classname}__label`}>{localize(duration_type)}</span>\n                    </div>\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.transaction_id} />\n                    <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.currency} />\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.purchase_time} />\n                    <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.buy_price} />\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.sell_time} />\n                    <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.sell_price} />\n                </div>\n                <div className='data-list__row'>\n                    <DataList.Cell row={row} column={columns_map.profit_loss} />\n                </div>\n            </>\n        );\n    };\n\n    return (\n        <React.Fragment>\n            <ReportsMeta filter_component={filter_component} className='profit-table__filter' />\n            {is_switching ? (\n                <PlaceholderComponent is_loading />\n            ) : (\n                <React.Fragment>\n                    {data.length === 0 || is_empty ? (\n                        <PlaceholderComponent\n                            is_loading={is_loading}\n                            has_selected_date={has_selected_date}\n                            is_empty={is_empty}\n                            empty_message_component={EmptyTradeHistoryMessage}\n                            component_icon={component_icon}\n                            localized_message={localize('You have no trading activity yet.')}\n                            localized_period_message={localize(\n                                \"You've made no transactions of this type during this period.\"\n                            )}\n                        />\n                    ) : (\n                        <div className='reports__content'>\n                            <DesktopWrapper>\n                                <DataTable\n                                    className='profit-table'\n                                    data_source={data}\n                                    columns={columns}\n                                    onScroll={handleScroll}\n                                    footer={totals}\n                                    is_empty={is_empty}\n                                    getRowAction={getRowAction}\n                                    getRowSize={() => 63}\n                                    content_loader={ReportsTableRowLoader}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataTable>\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                <DataList\n                                    className='profit-table'\n                                    data_source={data}\n                                    rowRenderer={mobileRowRenderer}\n                                    getRowAction={getRowAction}\n                                    onScroll={handleScroll}\n                                    footer={totals}\n                                    row_gap={8}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataList>\n                            </MobileWrapper>\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default connect(({ modules, client }: TRootStore) => ({\n    currency: client.currency,\n    data: modules.profit_table.data,\n    date_from: modules.profit_table.date_from,\n    date_to: modules.profit_table.date_to,\n    error: modules.profit_table.error,\n    filtered_date_range: modules.profit_table.filtered_date_range,\n    is_empty: modules.profit_table.is_empty,\n    is_loading: modules.profit_table.is_loading,\n    is_switching: client.is_switching,\n    handleDateChange: modules.profit_table.handleDateChange,\n    handleScroll: modules.profit_table.handleScroll,\n    has_selected_date: modules.profit_table.has_selected_date,\n    onMount: modules.profit_table.onMount,\n    onUnmount: modules.profit_table.onUnmount,\n    totals: modules.profit_table.totals,\n}))(withRouter(ProfitTable));\n","import React from 'react';\nimport { MobileWrapper, Money, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\n\ntype TAccountStatistics = {\n    account_statistics: {\n        total_withdrawals: number;\n        total_deposits: number;\n    };\n    currency: string;\n};\n\nconst AccountStatistics = ({ account_statistics, currency }: TAccountStatistics) => {\n    return (\n        <div className='statement__account-statistics'>\n            <div className='statement__account-statistics-item'>\n                <div className='statement__account-statistics--is-rectangle'>\n                    <Text color='less-prominent' className='statement__account-statistics-title'>\n                        {localize('Total deposits')} <MobileWrapper> ({currency}) </MobileWrapper>\n                    </Text>\n                    <Text\n                        color='prominent'\n                        weight='bold'\n                        align='center'\n                        className='statement__account-statistics-amount'\n                    >\n                        <Money amount={account_statistics.total_deposits} currency={currency} />\n                    </Text>\n                </div>\n            </div>\n            <div className='statement__account-statistics-item statement__account-statistics-total-withdrawal'>\n                <div className='statement__account-statistics--is-rectangle'>\n                    <Text color='less-prominent' className='statement__account-statistics-title'>\n                        {localize('Total withdrawals')} <MobileWrapper> ({currency}) </MobileWrapper>\n                    </Text>\n                    <Text\n                        color='prominent'\n                        weight='bold'\n                        align='center'\n                        className='statement__account-statistics-amount'\n                    >\n                        <Money amount={account_statistics.total_withdrawals} currency={currency} />\n                    </Text>\n                </div>\n            </div>\n            <div className='statement__account-statistics-item'>\n                <div className='statement__account-statistics--is-rectangle'>\n                    <Text color='less-prominent' className='statement__account-statistics-title'>\n                        {localize('Net deposits')} <MobileWrapper> ({currency}) </MobileWrapper>\n                    </Text>\n                    <Text\n                        color='prominent'\n                        weight='bold'\n                        align='center'\n                        className='statement__account-statistics-amount'\n                    >\n                        <Money\n                            amount={account_statistics.total_deposits - account_statistics.total_withdrawals}\n                            currency={currency}\n                        />\n                    </Text>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n// TODO: implement reports store TRootStore in types.ts\nexport default connect(({ modules, client }: any) => ({\n    account_statistics: modules.statement.account_statistics,\n    currency: client.currency,\n}))(AccountStatistics);\n","import React from 'react';\nimport { FilterDropdown } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport CompositeCalendar from './Form/CompositeCalendar';\nimport { TRootStore } from 'Stores/index';\n\ntype TFilterComponent = {\n    action_type: string;\n    date_from: number;\n    date_to: number;\n    filtered_date_range: {\n        duration: number;\n        label: string;\n        onClick?: () => void;\n        value?: string;\n    };\n    handleDateChange: () => void;\n    handleFilterChange: () => void;\n    suffix_icon: string;\n};\n\nconst FilterComponent = ({\n    action_type,\n    date_from,\n    date_to,\n    handleFilterChange,\n    handleDateChange,\n    filtered_date_range,\n}: TFilterComponent) => {\n    const filter_list = [\n        {\n            text: localize('All transactions'),\n            value: 'all',\n        },\n        {\n            text: localize('Buy'),\n            value: 'buy',\n        },\n        {\n            text: localize('Sell'),\n            value: 'sell',\n        },\n        {\n            text: localize('Deposit'),\n            value: 'deposit',\n        },\n        {\n            text: localize('Withdrawal'),\n            value: 'withdrawal',\n        },\n        {\n            text: localize('Transfer'),\n            value: 'transfer',\n        },\n    ];\n\n    return (\n        <React.Fragment>\n            <CompositeCalendar\n                input_date_range={filtered_date_range}\n                onChange={handleDateChange}\n                from={date_from}\n                to={date_to}\n            />\n            <FilterDropdown\n                dropdown_display_className='dc-dropdown__display--has-suffix-icon'\n                filter_list={filter_list}\n                handleFilterChange={handleFilterChange}\n                initial_selected_filter={action_type}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default connect(({ modules }: TRootStore) => ({\n    action_type: modules.statement.action_type,\n    data: modules.statement.data,\n    date_from: modules.statement.date_from,\n    date_to: modules.statement.date_to,\n    filtered_date_range: modules.statement.filtered_date_range,\n    handleDateChange: modules.statement.handleDateChange,\n    handleFilterChange: modules.statement.handleFilterChange,\n}))(FilterComponent);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DesktopWrapper, MobileWrapper, DataList, DataTable, Text, Clipboard } from '@deriv/components';\nimport {\n    extractInfoFromShortcode,\n    isForwardStarting,\n    getUnsupportedContracts,\n    getContractPath,\n    getSupportedContracts,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { ReportsTableRowLoader } from '../Components/Elements/ContentLoader';\nimport { connect } from 'Stores/connect';\nimport { getStatementTableColumnsTemplate } from '../Constants/data-table-constants';\nimport PlaceholderComponent from '../Components/placeholder-component';\nimport AccountStatistics from '../Components/account-statistics';\nimport FilterComponent from '../Components/filter-component';\nimport { ReportsMeta } from '../Components/reports-meta';\nimport EmptyTradeHistoryMessage from '../Components/empty-trade-history-message';\nimport { TRootStore } from 'Stores/index';\n\ntype TGetStatementTableColumnsTemplate = ReturnType<typeof getStatementTableColumnsTemplate>;\ntype TColIndex = 'icon' | 'refid' | 'currency' | 'date' | 'action_type' | 'amount' | 'balance';\n\ntype TFormatStatementTransaction = {\n    action: string;\n    date: string;\n    display_name: string;\n    refid: number;\n    payout: string;\n    amount: string;\n    balance: string;\n    desc: string;\n    id: number;\n    app_id: number;\n    shortcode: string;\n    action_type: string;\n    purchase_time: number;\n    transaction_time: number;\n    withdrawal_details: string;\n    longcode: string;\n};\n\ntype TAction =\n    | {\n          message?: string;\n          component?: React.ReactElement;\n      }\n    | string;\n\ntype TStatement = {\n    action_type: string;\n    account_statistics: React.ComponentProps<typeof AccountStatistics>['account_statistics'];\n    component_icon: string;\n    currency: string;\n    data: TFormatStatementTransaction[];\n    date_from: number | null;\n    date_to: number | null;\n    error: string;\n    filtered_date_range: React.ComponentProps<typeof FilterComponent>['filtered_date_range'];\n    handleDateChange: () => void;\n    handleFilterChange: () => void;\n    handleScroll: () => void;\n    has_selected_date: boolean;\n    is_empty: boolean;\n    is_loading: boolean;\n    is_mx_mlt: boolean;\n    is_switching: boolean;\n    is_virtual: boolean;\n    onMount: () => void;\n    onUnmount: () => void;\n};\n\ntype TDetailsComponent = {\n    message: string;\n    action_type: string;\n};\n\nconst DetailsComponent = ({ message = '', action_type = '' }: TDetailsComponent) => {\n    const address_hash_match = /:\\s([0-9a-zA-Z]+.{25,28})/gm.exec(message.split(/,\\s/)[0]);\n    const address_hash = address_hash_match?.[1];\n    const blockchain_hash_match = /:\\s([0-9a-zA-Z]+.{25,34})/gm.exec(message.split(/,\\s/)[1]);\n    const blockchain_hash = blockchain_hash_match?.[1];\n\n    let messages = [message];\n\n    if (address_hash || blockchain_hash) {\n        const lines = message.split(/,\\s/);\n        messages = lines.map((text, index) => {\n            if (index !== lines.length - 1) {\n                return `${text}, `;\n            }\n            return text;\n        });\n    }\n\n    return (\n        <Text as='div' size='xs' className='statement__row--detail-text' align='center'>\n            {messages.map((text, index) => {\n                return (\n                    <div key={text}>\n                        {text}\n                        {blockchain_hash && index === messages.length - 1 && (\n                            <Clipboard text_copy={blockchain_hash} popoverAlignment='top' />\n                        )}\n                        {address_hash && action_type === 'withdrawal' && index === messages.length - 1 && (\n                            <Clipboard text_copy={address_hash} popoverAlignment='top' />\n                        )}\n                    </div>\n                );\n            })}\n        </Text>\n    );\n};\n\nconst getRowAction = (row_obj: TFormatStatementTransaction) => {\n    let action: TAction = {};\n    if (row_obj.id && ['buy', 'sell'].includes(row_obj.action_type)) {\n        const contract_type = extractInfoFromShortcode(row_obj.shortcode).category.toUpperCase();\n        action =\n            getSupportedContracts()[contract_type] &&\n            !isForwardStarting(row_obj.shortcode, row_obj.purchase_time || row_obj.transaction_time)\n                ? getContractPath(row_obj.id)\n                : {\n                      message: '',\n                      component: (\n                          <Localize\n                              i18n_default_text=\"The {{trade_type_name}} contract details aren't currently available. We're working on making them available soon.\"\n                              values={{\n                                  trade_type_name: getUnsupportedContracts()[contract_type]?.name,\n                              }}\n                          />\n                      ),\n                  };\n    } else if (row_obj.action_type === 'withdrawal') {\n        if (row_obj.withdrawal_details && row_obj.longcode) {\n            action = {\n                message: `${row_obj.withdrawal_details} ${row_obj.longcode}`,\n            };\n        } else {\n            action = {\n                message: row_obj.desc,\n            };\n        }\n    } else if (row_obj.desc && ['deposit', 'transfer', 'adjustment', 'hold', 'release'].includes(row_obj.action_type)) {\n        action = {\n            message: row_obj.desc,\n        };\n    }\n\n    // add typeof check because action can be object or string\n    if (typeof action === 'object' && action?.message) {\n        action.component = <DetailsComponent message={action.message} action_type={row_obj.action_type} />;\n    }\n\n    return action;\n};\n\nconst Statement = ({\n    account_statistics,\n    action_type,\n    component_icon,\n    currency,\n    data,\n    date_from,\n    date_to,\n    error,\n    filtered_date_range,\n    handleDateChange,\n    handleFilterChange,\n    handleScroll,\n    has_selected_date,\n    is_empty,\n    is_loading,\n    is_mx_mlt,\n    is_switching,\n    is_virtual,\n    onMount,\n    onUnmount,\n}: TStatement) => {\n    React.useEffect(() => {\n        onMount();\n        return () => {\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (error) return <p>{error}</p>;\n\n    const columns: TGetStatementTableColumnsTemplate = getStatementTableColumnsTemplate(currency);\n    const columns_map = columns.reduce((map, item) => {\n        map[item.col_index as TColIndex] = item;\n        return map;\n    }, {} as Record<TColIndex, typeof columns[number]>);\n\n    // TODO: Export type instead of any from 'DataList' component when it migrates to tsx\n    const mobileRowRenderer = ({ row, passthrough }: any) => (\n        <React.Fragment>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.icon} passthrough={passthrough} />\n                <DataList.Cell row={row} column={columns_map.action_type} passthrough={passthrough} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.refid} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.currency} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.date} />\n                <DataList.Cell className='data-list__row-cell--amount' row={row} column={columns_map.amount} />\n            </div>\n            <div className='data-list__row'>\n                <DataList.Cell row={row} column={columns_map.balance} />\n            </div>\n        </React.Fragment>\n    );\n\n    return (\n        <React.Fragment>\n            <ReportsMeta\n                className={is_mx_mlt ? undefined : 'reports__meta--statement'}\n                filter_component={\n                    <FilterComponent\n                        action_type={action_type}\n                        date_from={date_from}\n                        date_to={date_to}\n                        handleDateChange={handleDateChange}\n                        handleFilterChange={handleFilterChange}\n                        filtered_date_range={filtered_date_range}\n                    />\n                }\n                is_statement\n                optional_component={\n                    !is_switching &&\n                    is_mx_mlt && <AccountStatistics account_statistics={account_statistics} currency={currency} />\n                }\n            />\n            {is_switching ? (\n                <PlaceholderComponent is_loading />\n            ) : (\n                <React.Fragment>\n                    {data.length === 0 || is_empty ? (\n                        <PlaceholderComponent\n                            is_loading={is_loading}\n                            has_selected_date={has_selected_date}\n                            is_empty={is_empty}\n                            empty_message_component={EmptyTradeHistoryMessage}\n                            component_icon={component_icon}\n                            localized_message={localize('You have no transactions yet.')}\n                            localized_period_message={localize(\n                                \"You've made no transactions of this type during this period.\"\n                            )}\n                        />\n                    ) : (\n                        <div className='reports__content'>\n                            <DesktopWrapper>\n                                <DataTable\n                                    className='statement'\n                                    columns={columns}\n                                    content_loader={ReportsTableRowLoader}\n                                    data_source={data}\n                                    getRowAction={row => getRowAction(row)}\n                                    onScroll={handleScroll}\n                                    passthrough={{\n                                        isTopUp: (item: TFormatStatementTransaction) =>\n                                            is_virtual && item.action === 'Deposit',\n                                    }}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataTable>\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                <DataList\n                                    className='statement'\n                                    data_source={data}\n                                    getRowAction={getRowAction}\n                                    onScroll={handleScroll}\n                                    rowRenderer={mobileRowRenderer}\n                                    row_gap={8}\n                                    passthrough={{\n                                        isTopUp: (item: TFormatStatementTransaction) =>\n                                            is_virtual && item.action === 'Deposit',\n                                    }}\n                                >\n                                    <PlaceholderComponent is_loading={is_loading} />\n                                </DataList>\n                            </MobileWrapper>\n                        </div>\n                    )}\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default withRouter(\n    connect(({ modules, client }: TRootStore) => ({\n        action_type: modules.statement.action_type,\n        account_statistics: modules.statement.account_statistics,\n        currency: client.currency,\n        data: modules.statement.data,\n        date_from: modules.statement.date_from,\n        date_to: modules.statement.date_to,\n        error: modules.statement.error,\n        filtered_date_range: modules.statement.filtered_date_range,\n        handleDateChange: modules.statement.handleDateChange,\n        handleFilterChange: modules.statement.handleFilterChange,\n        handleScroll: modules.statement.handleScroll,\n        has_selected_date: modules.statement.has_selected_date,\n        is_empty: modules.statement.is_empty,\n        is_loading: modules.statement.is_loading,\n        is_mx_mlt: client.standpoint.iom || client.standpoint.malta,\n        is_switching: client.is_switching,\n        is_virtual: client.is_virtual,\n        onMount: modules.statement.onMount,\n        onUnmount: modules.statement.onUnmount,\n    }))(Statement)\n);\n","import React from 'react';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\nimport {\n    DesktopWrapper,\n    Div100vhContainer,\n    FadeWrapper,\n    Loading,\n    MobileWrapper,\n    PageOverlay,\n    SelectNative,\n    VerticalTab,\n} from '@deriv/components';\nimport { getSelectedRoute } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { TRoute } from 'Types';\nimport 'Sass/app/modules/reports.scss';\n\ntype TList = {\n    value: React.ComponentType | typeof Redirect;\n    default?: boolean;\n    label: string;\n    icon?: string;\n    path?: string;\n};\n\ntype TReports = {\n    history: RouteComponentProps['history'];\n    location: RouteComponentProps['location'];\n    routes: TRoute[];\n};\n\nconst Reports = observer(({ history, location, routes }: TReports) => {\n    const { client, common, ui } = useStore();\n\n    const { is_logged_in, is_logging_in, setVisibilityRealityCheck } = client;\n    const { is_from_derivgo, routeBackInApp } = common;\n    const { is_reports_visible, setReportsTabIndex, reports_route_tab_index, toggleReports } = ui;\n\n    React.useEffect(() => {\n        toggleReports(true);\n        return () => {\n            setVisibilityRealityCheck(1);\n            toggleReports(false);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onClickClose = () => routeBackInApp(history);\n\n    const handleRouteChange = (e: React.ChangeEvent<HTMLSelectElement>) => history.push(e.target.value);\n\n    const menu_options = () => {\n        const options: TList[] = [];\n\n        routes.forEach(route => {\n            options.push({\n                default: route.default,\n                icon: route.icon_component,\n                label: route.getTitle(),\n                value: route.component,\n                path: route.path,\n            });\n        });\n\n        return options;\n    };\n\n    const selected_route = getSelectedRoute({ routes, pathname: location.pathname });\n\n    if (!is_logged_in && is_logging_in) {\n        return <Loading is_fullscreen />;\n    }\n    return (\n        <FadeWrapper is_visible={is_reports_visible} className='reports-page-wrapper' keyname='reports-page-wrapper'>\n            <div className='reports'>\n                <PageOverlay header={localize('Reports')} onClickClose={onClickClose} is_from_app={is_from_derivgo}>\n                    <DesktopWrapper>\n                        <VerticalTab\n                            is_floating\n                            current_path={location.pathname}\n                            is_routed\n                            is_full_width\n                            setVerticalTabIndex={setReportsTabIndex}\n                            vertical_tab_index={selected_route.default ? 0 : reports_route_tab_index}\n                            list={menu_options()}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <Div100vhContainer className='reports__mobile-wrapper' height_offset='80px'>\n                            <SelectNative\n                                className='reports__route-selection'\n                                list_items={menu_options().map(option => ({\n                                    text: option.label,\n                                    value: option.path ?? '',\n                                }))}\n                                value={selected_route.path ?? ''}\n                                should_show_empty_option={false}\n                                onChange={handleRouteChange}\n                                label={''}\n                                hide_top_placeholder={false}\n                            />\n                            {selected_route?.component && (\n                                <selected_route.component icon_component={selected_route.icon_component} />\n                            )}\n                        </Div100vhContainer>\n                    </MobileWrapper>\n                </PageOverlay>\n            </div>\n        </FadeWrapper>\n    );\n});\n\nexport default Reports;\n","import OpenPositions from './open-positions';\nimport ProfitTable from './profit-table';\nimport Statement from './statement';\nimport Reports from './reports';\n\nexport default {\n    OpenPositions,\n    ProfitTable,\n    Statement,\n    Reports,\n};\n"],"names":["ReportsTableRowLoader","speed","height","width","backgroundColor","foregroundColor","x","y","rx","ry","has_selected_date","component_icon","localized_message","localized_period_message","className","Icon","data_testid","icon","color","size","Text","align","connect","common","is_loading","portfolio","server_time","contract_info","current_tick","tick_count","getCurrentTick","ProgressSlider","expiry_time","date_expiry","getCardLabels","start_time","date_start","ticks_count","getProfitOrLoss","value","replace","onClickSell","amount","currency","is_footer","is_sell_requested","React","movement","setMovement","amount_state","setAmountState","Money","Math","abs","status","DesktopWrapper","ContractCard","Sell","underlying","has_full_contract_title","payload","should_show_accumulator","should_show_multiplier","should_show_category_icon","shortcode","info_from_shortcode","extractInfoFromShortcode","is_high_low","isHighLow","shortcode_info","category_label","category","show_button_name","trade_type","getContractConfig","toUpperCase","button_name","name","getTradeTypeName","classNames","Popover","classNameTarget","classNameBubble","alignment","message","getMarketNamesMap","is_bubble_hover_enabled","disable_target_icon","display_name","IconTradeTypes","type","toLowerCase","multiplier","growth_rate","includes","action_type","children","weight","map","buy","deposit","hold","release","sell","withdrawal","default","adjustment","transfer","is_invisible","theme","id","invisible","Array","from","inx","key","PlaceholderComponent","props","EmptyMessageComponent","empty_message_component","is_empty","propTypes","PropTypes","EmptyPlaceholderWrapper","EmptyTradeHistoryMessage","localize","MobileRowRenderer","row","columns_map","toMoment","onClickCancel","measure","DataList","Cell","column","purchase","payout","indicative","profit","contract_update","purchase_time","turbos_duration_unit","getDurationUnitText","getDurationPeriod","duration_type","longcode","test","extracted","RegExp","exec","duration_text","slice","endsWith","getContractDurationType","isTurbosContract","contract_type","progress_value","getTimePercentage","isMultiplierContract","isAccumulatorContract","PositionsDrawerCard","is_link_disabled","isVanillaContract","ProgressSliderMobile","ProgressBar","label","reference","OpenPositionsTable","columns","active_positions","getRowAction","mobileRowRenderer","preloaderCheck","row_size","totals","DataTable","footer","data_source","getRowSize","content_loader","MobileWrapper","rowRenderer","row_gap","keyMapper","item","row_obj","is_unsupported","component","Localize","i18n_default_text","values","trade_type_name","getUnsupportedContracts","getContractPath","isPurchaseReceived","isNaN","Number","withRouter","client","ui","contract_trade","is_eu","is_virtual","error","getPositionById","is_accumulator","is_multiplier","NotificationMessages","notification_messages_ui","onMount","addToast","current_focus","onClickRemove","removePositionById","getContractById","removeToast","setCurrentFocus","should_show_cancellation_warning","toggleCancellationWarning","toggleUnsupportedContractModal","has_accumulator_contract","setHasAccumulatorContract","has_multiplier_contract","setHasMultiplierContract","previous_active_positions","usePrevious","contract_types","text","is_default","find","contract_type_value","setContractTypeValue","accumulator_rates","accumulator_rate","setAccumulatorRate","is_accumulator_selected","is_multiplier_selected","show_accu_in_dropdown","contract_types_list","filter","accumulators_rates_list","active_positions_filtered","getGrowthRatePercentage","active_positions_filtered_totals","ask_price","buy_price","bid_price","forEach","portfolio_pos","prices","getTotalProfit","cancellation","take_profit","limit_order","order_amount","profit_loss","getOpenPositionsTotals","checkForAccuAndMultContracts","some","title","isMobile","col_index","renderCellContent","getCurrencyDisplayCode","cancellation_price","shouldShowCancellation","cell_value","components","stop_loss","has_sign","total_profit","contract_id","MultiplierCloseActions","getMultiplierOpenPositionsColumnsTemplate","ContractCardSell","getAccumulatorOpenPositionsColumnsTemplate","is_vanilla","is_turbos","renderHeader","non_vanilla_payout","barrier","toFixed","getOpenPositionsColumnsTemplate","e","classname","shared_props","args","length","Dropdown","is_align_text_left","list","onChange","target","SelectNative","list_items","should_show_empty_option","RadioButton","selected_value","htmlFor","onClick","as","line_height","CUSTOM_KEY","CompositeCalendarMobile","input_date_range","duration_list","to","date_range","range","format","undefined","from_date","setFrom","to_date","setTo","is_open","setIsOpen","applied_date_range","setAppliedDateRange","selected_date_range","setSelectedDateRange","today","selectDateRange","_selected_date_range","is_today","new_from","duration","startOf","subtract","add","endOf","is_batch","applyDateRange","new_to","new_date_range","Object","assign","selectDate","onDateRangeChange","_date_range","InputField","is_read_only","MobileDialog","portal_element_id","visible","has_content_scroll","onClose","content_height_offset","Button","has_effect","secondary","large","primary","DatePicker","is_nativepicker","placeholder","max_date","min_date","tertiary","displayName","is_active","items","flag","unix","ceil","isActive","TwoMonthPickerLoadable","Loadable","loader","loading","render","loaded","Component","CompositeCalendar","show_to","setShowTo","show_from","setShowFrom","wrapper_ref","hideCalendar","showCalendar","useOnClickOutside","event","stopPropagation","preventDefault","current","contains","date","CalendarIcon","daysFromTodayTo","getToDateLabel","ref","isPeriodDisabled","ReportsMeta","filter_component","optional_component","is_statement","toString","getSupportedContracts","isForwardStarting","purchase_time_unix","modules","data","profit_table","date_from","date_to","filtered_date_range","is_switching","handleDateChange","handleScroll","onUnmount","items_count","item_count","transaction_id","getProfitTableColumnsTemplate","fromEntries","onScroll","duration_classname","sell_time","sell_price","account_statistics","statement","total_deposits","total_withdrawals","handleFilterChange","filter_list","FilterDropdown","dropdown_display_className","initial_selected_filter","DetailsComponent","address_hash_match","split","address_hash","blockchain_hash_match","blockchain_hash","messages","lines","index","Clipboard","text_copy","popoverAlignment","action","transaction_time","withdrawal_details","desc","is_mx_mlt","standpoint","iom","malta","passthrough","isTopUp","app_id","Label","mode","getStatementTableColumnsTemplate","reduce","refid","balance","OpenPositions","ProfitTable","Statement","Reports","observer","history","location","routes","useStore","is_logged_in","is_logging_in","setVisibilityRealityCheck","is_from_derivgo","routeBackInApp","is_reports_visible","setReportsTabIndex","reports_route_tab_index","toggleReports","menu_options","options","route","push","icon_component","getTitle","path","selected_route","getSelectedRoute","pathname","Loading","is_fullscreen","FadeWrapper","is_visible","keyname","PageOverlay","header","onClickClose","is_from_app","VerticalTab","is_floating","current_path","is_routed","is_full_width","setVerticalTabIndex","vertical_tab_index","Div100vhContainer","height_offset","option","hide_top_placeholder"],"sourceRoot":""}