{"version":3,"file":"reports/js/reports.reports-app.290d50e04bf33776699e.js","mappings":"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","sources":["webpack://@deriv/reports/./src/Stores/connect.js","webpack://@deriv/reports/./src/_common/base/server_time.js","webpack://@deriv/reports/./src/_common/utility.js","webpack://@deriv/reports/./src/Constants/routes-config.tsx","webpack://@deriv/reports/./src/Components/Routes/route-with-sub-routes.tsx","webpack://@deriv/reports/./src/Components/Routes/binary-routes.tsx","webpack://@deriv/reports/./src/Components/Routes/index.ts","webpack://@deriv/reports/./src/Components/Errors/error-component.tsx","webpack://@deriv/reports/./src/Components/Errors/index.ts","webpack://@deriv/reports/./src/Containers/routes.tsx","webpack://@deriv/reports/./src/Stores/Modules/Profit/Helpers/format-request.js","webpack://@deriv/reports/./src/Stores/Modules/Profit/Helpers/format-response.js","webpack://@deriv/reports/./src/Utils/Validator/errors.js","webpack://@deriv/reports/./src/Utils/Validator/validator.js","webpack://@deriv/reports/./src/Stores/base-store.js","webpack://@deriv/reports/./src/Stores/Modules/Profit/profit-store.js","webpack://@deriv/reports/./src/Stores/Modules/Statement/Helpers/format-response.js","webpack://@deriv/reports/./src/Stores/Modules/Statement/statement-store.js","webpack://@deriv/reports/./src/Stores/Modules/index.js","webpack://@deriv/reports/./src/Stores/index.ts","webpack://@deriv/reports/./src/init-store.js","webpack://@deriv/reports/./src/app.tsx","webpack://@deriv/reports/../stores/src/storeContext.ts","webpack://@deriv/reports/../api/src/APIProvider.tsx","webpack://@deriv/reports/../api/src/useSubscription.ts","webpack://@deriv/reports/../stores/src/useStore.ts","webpack://@deriv/reports/../stores/src/providers/ExchangeRatesProvider.tsx","webpack://@deriv/reports/../stores/src/stores/BaseStore.ts","webpack://@deriv/reports/../stores/src/stores/ExchangeRatesStore.ts","webpack://@deriv/reports/../stores/src/stores/FeatureFlagsStore.ts","webpack://@deriv/reports/../stores/src/storeProvider.tsx"],"sourcesContent":["import { useObserver } from 'mobx-react';\nimport React from 'react';\n\nconst isClassComponent = Component =>\n    !!(typeof Component === 'function' && Component.prototype && Component.prototype.isReactComponent);\n\nexport const MobxContent = React.createContext(null);\n\nfunction injectStorePropsToComponent(propsToSelectFn, BaseComponent) {\n    const Component = own_props => {\n        const store = React.useContext(MobxContent);\n\n        let ObservedComponent = BaseComponent;\n\n        if (isClassComponent(BaseComponent)) {\n            const FunctionalWrapperComponent = props => <BaseComponent {...props} />;\n            ObservedComponent = FunctionalWrapperComponent;\n        }\n\n        return useObserver(() => ObservedComponent({ ...own_props, ...propsToSelectFn(store, own_props) }));\n    };\n\n    Component.displayName = BaseComponent.name;\n    return Component;\n}\n\nexport const MobxContentProvider = ({ store, children }) => {\n    return <MobxContent.Provider value={{ ...store, mobxStores: store }}>{children}</MobxContent.Provider>;\n};\n\nexport const connect = propsToSelectFn => Component => injectStorePropsToComponent(propsToSelectFn, Component);\n","const PromiseClass = require('../utility').PromiseClass;\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = new PromiseClass();\n    let common_store;\n\n    const init = store => {\n        if (!clock_started) {\n            common_store = store;\n            pending.resolve(common_store.server_time);\n            clock_started = true;\n        }\n    };\n\n    const get = () => (clock_started && common_store.server_time ? common_store.server_time.clone() : undefined);\n\n    return {\n        init,\n        get,\n        timePromise: () => (clock_started ? Promise.resolve(common_store.server_time) : pending.promise),\n    };\n})();\n\nmodule.exports = ServerTime;\n","const template = (string, content) => {\n    let to_replace = content;\n    if (content && !Array.isArray(content)) {\n        to_replace = [content];\n    }\n    return string.replace(/\\[_(\\d+)]/g, (s, index) => to_replace[+index - 1]);\n};\n\n/**\n * Creates a DOM element and adds any attributes to it.\n *\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\n * @return the created DOM element\n */\nconst createElement = (tag_name, attributes = {}) => {\n    const el = document.createElement(tag_name);\n    Object.keys(attributes).forEach(attr => {\n        const value = attributes[attr];\n        if (attr === 'text') {\n            el.textContent = value;\n        } else if (attr === 'html') {\n            el.html(value);\n        } else {\n            el.setAttribute(attr, value);\n        }\n    });\n    return el;\n};\n\nlet static_hash;\nconst getStaticHash = () => {\n    static_hash =\n        static_hash || (document.querySelector('script[src*=\"main\"]').getAttribute('src') || '').split('.')[1];\n    return static_hash;\n};\n\nclass PromiseClass {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nmodule.exports = {\n    template,\n    createElement,\n    getStaticHash,\n    PromiseClass,\n};\n","import React from 'react';\nimport { routes, makeLazyLoader, moduleLoader } from '@deriv/shared';\nimport { Loading } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport type { TRoute, TRouteConfig } from 'Types';\n\nconst Page404 = React.lazy(() => import(/* webpackChunkName: \"404\" */ 'Modules/Page404'));\n\nconst lazyLoadReportComponent = makeLazyLoader(\n    () => moduleLoader(() => import(/* webpackChunkName: \"reports-routes\" */ '../Containers')),\n    () => <Loading />\n);\n\n// Order matters\nconst initRoutesConfig = (): TRouteConfig[] => {\n    return [\n        {\n            path: routes.reports,\n            component: lazyLoadReportComponent('Reports'),\n            is_authenticated: true,\n            getTitle: () => localize('Reports'),\n            icon_component: 'IcReports',\n            routes: [\n                {\n                    path: routes.positions,\n                    component: lazyLoadReportComponent('OpenPositions'),\n                    getTitle: () => localize('Open positions'),\n                    icon_component: 'IcOpenPositions',\n                    default: true,\n                },\n                {\n                    path: routes.profit,\n                    component: lazyLoadReportComponent('ProfitTable'),\n                    getTitle: () => localize('Trade table'),\n                    icon_component: 'IcProfitTable',\n                },\n                {\n                    path: routes.statement,\n                    component: lazyLoadReportComponent('Statement'),\n                    getTitle: () => localize('Statement'),\n                    icon_component: 'IcStatement',\n                },\n            ],\n        },\n    ];\n};\n\nlet routesConfig: TRouteConfig[];\n\n// For default page route if page/path is not found, must be kept at the end of routes_config array\nconst route_default: TRoute = { component: Page404, getTitle: () => localize('Error 404') };\n\nconst getRoutesConfig = (): TRouteConfig[] => {\n    if (!routesConfig) {\n        routesConfig = initRoutesConfig();\n        routesConfig.push(route_default);\n    }\n    return routesConfig;\n};\n\nexport default getRoutesConfig;\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { RouteComponentProps } from 'react-router';\nimport { redirectToLogin, isEmptyObject, routes, removeBranchName, default_title } from '@deriv/shared';\nimport { getLanguage } from '@deriv/translations';\nimport type { TBinaryRoutes, TRoute } from 'Types';\n\ntype TRouteWithSubRoutes = TRoute & TBinaryRoutes;\n\nconst RouteWithSubRoutes = (route: TRouteWithSubRoutes) => {\n    const renderFactory = (props: RouteComponentProps) => {\n        let result = null;\n        if (route.component === Redirect) {\n            let to = route.to;\n\n            // This if clause has been added just to remove '/index' from url in localhost env.\n            if (route.path === routes.index) {\n                const { location } = props;\n                to = location.pathname.toLowerCase().replace(route.path, '');\n            }\n            result = <Redirect to={to} />;\n        } else if (route.is_authenticated && !route.is_logging_in && !route.is_logged_in) {\n            redirectToLogin(route.is_logged_in, getLanguage());\n        } else {\n            const default_subroute = route.routes ? route.routes.find(r => r.default) : { path: '' };\n            const has_default_subroute = !isEmptyObject(default_subroute);\n            const pathname = removeBranchName(location.pathname);\n\n            const RouteComponent = route.component as React.ElementType;\n\n            result = (\n                <React.Fragment>\n                    {has_default_subroute && pathname === route.path && <Redirect to={default_subroute?.path} />}\n                    <RouteComponent {...props} routes={route.routes} />\n                </React.Fragment>\n            );\n        }\n\n        const title = route.getTitle?.() || '';\n        document.title = `${title} | ${default_title}`;\n        return result;\n    };\n\n    return <Route exact={route.exact} path={route.path} render={renderFactory} />;\n};\n\nexport default RouteWithSubRoutes;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\nimport { Localize } from '@deriv/translations';\nimport getRoutesConfig from '../../Constants/routes-config';\nimport RouteWithSubRoutes from './route-with-sub-routes';\nimport { TBinaryRoutes } from 'Types';\n\nconst BinaryRoutes = (props: TBinaryRoutes) => {\n    return (\n        <React.Suspense\n            fallback={\n                <div>\n                    <Localize i18n_default_text='Loading...' />\n                </div>\n            }\n        >\n            <Switch>\n                {getRoutesConfig().map((route, idx) => (\n                    <RouteWithSubRoutes key={route.path ?? idx} {...route} {...props} />\n                ))}\n            </Switch>\n        </React.Suspense>\n    );\n};\n\nexport default BinaryRoutes;\n","import BinaryLink from './binary-link';\nimport RouteWithSubRoutes from './route-with-sub-routes';\nimport BinaryRoutes from './binary-routes';\n\nexport * from './helpers';\nexport { BinaryLink, RouteWithSubRoutes };\nexport default BinaryRoutes;\n","import React from 'react';\nimport { Dialog, PageErrorContainer } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TErrorComponent } from 'Types';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    is_dialog,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}: Partial<TErrorComponent>) => {\n    const refresh_message = should_show_refresh ? localize('Please refresh this page to continue.') : '';\n\n    if (is_dialog) {\n        return (\n            <Dialog\n                title={header || localize('There was an error')}\n                is_visible\n                confirm_button_text={redirect_label || localize('Ok')}\n                onConfirm={redirectOnClick || (() => location.reload())}\n                has_close_icon={false}\n            >\n                {message || localize('Sorry, an error occured while processing your request.')}\n            </Dialog>\n        );\n    }\n    return (\n        <PageErrorContainer\n            error_header={header ?? ''}\n            error_messages={message ? [message, refresh_message] : []}\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label || localize('Refresh')]}\n            buttonOnClick={redirectOnClick || (() => location.reload())}\n        />\n    );\n};\n\nexport default ErrorComponent;\n","import ErrorComponent from './error-component';\n\nexport default ErrorComponent;\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport BinaryRoutes from 'Components/Routes';\nimport { connect } from 'Stores/connect';\nimport ErrorComponent from 'Components/Errors';\nimport { TRootStore } from 'Stores/index';\nimport { TRoutes } from 'Types';\n\nconst Routes = ({ error, has_error, is_logged_in, is_logging_in, passthrough }: TRoutes) => {\n    if (has_error) {\n        return <ErrorComponent {...error} />;\n    }\n\n    return <BinaryRoutes is_logged_in={is_logged_in} is_logging_in={is_logging_in} passthrough={passthrough} />;\n};\n\n// need to wrap withRouter around connect\n// to prevent updates on <BinaryRoutes /> from being blocked\nexport default withRouter(\n    connect(({ client, common }: TRootStore) => ({\n        is_logged_in: client.is_logged_in,\n        is_logging_in: client.is_logging_in,\n        error: common.error,\n        has_error: common.has_error,\n    }))(Routes)\n);\n","import { epochToMoment, toMoment } from '@deriv/shared';\n\nconst getDateTo = (partial_fetch_time, date_to) => {\n    const today = toMoment().startOf('day').unix();\n    if (date_to && today > date_to) {\n        return date_to;\n    } else if (partial_fetch_time) {\n        return epochToMoment(today).add(1, 'd').subtract(1, 's').unix();\n    }\n    return epochToMoment(today).add(1, 'd').subtract(1, 's').unix();\n};\n\nconst getDateFrom = (should_load_partially, partial_fetch_time, date_from, date_to) => {\n    const today = toMoment().startOf('day').unix();\n    if (today > date_to) {\n        return date_from;\n    }\n    return should_load_partially && partial_fetch_time ? partial_fetch_time : date_from;\n};\n\nconst shouldSendDateFrom = (date_from, should_load_partially, partial_fetch_time, date_to) => {\n    const today = toMoment().startOf('day').unix();\n    if (today > date_to) {\n        return !!date_from || should_load_partially;\n    }\n    return should_load_partially ? partial_fetch_time || date_from : !!date_from || false;\n};\n\nconst getDateBoundaries = (date_from, date_to, partial_fetch_time, should_load_partially = false) => ({\n    // eslint-disable-next-line max-len\n    ...(shouldSendDateFrom(date_from, should_load_partially, partial_fetch_time, date_to) && {\n        date_from: getDateFrom(should_load_partially, partial_fetch_time, date_from, date_to),\n    }),\n    ...((date_to || should_load_partially) && { date_to: getDateTo(partial_fetch_time, date_to) }),\n});\n\nexport default getDateBoundaries;\n","import { formatMoney, toMoment, getSymbolDisplayName, getMarketInformation } from '@deriv/shared';\n\nexport const formatProfitTableTransactions = (transaction, currency, active_symbols = []) => {\n    const format_string = 'DD MMM YYYY HH:mm:ss';\n    const purchase_time = `${toMoment(+transaction.purchase_time).format(format_string)}`;\n    const purchase_time_unix = transaction.purchase_time;\n    const sell_time = `${toMoment(+transaction.sell_time).format(format_string)}`;\n    const payout = parseFloat(transaction.payout);\n    const sell_price = parseFloat(transaction.sell_price);\n    const buy_price = parseFloat(transaction.buy_price);\n    const profit_loss = formatMoney(currency, Number(sell_price - buy_price), true);\n    const display_name = getSymbolDisplayName(active_symbols, getMarketInformation(transaction.shortcode).underlying);\n\n    return {\n        ...transaction,\n        ...{\n            payout,\n            sell_price,\n            buy_price,\n            profit_loss,\n            sell_time,\n            purchase_time,\n            display_name,\n            purchase_time_unix,\n        },\n    };\n};\n","class Errors {\n    constructor() {\n        this.errors = {};\n    }\n\n    add(attribute, message) {\n        if (!this.has(attribute)) {\n            this.errors[attribute] = [];\n        }\n\n        if (this.errors[attribute].indexOf(message) === -1) {\n            this.errors[attribute].push(message);\n        }\n    }\n\n    all() {\n        return this.errors;\n    }\n\n    first(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute][0];\n        }\n        return null;\n    }\n\n    get(attribute) {\n        if (this.has(attribute)) {\n            return this.errors[attribute];\n        }\n\n        return [];\n    }\n\n    has(attribute) {\n        return Object.prototype.hasOwnProperty.call(this.errors, attribute);\n    }\n}\n\nexport default Errors;\n","import { template } from '_common/utility';\nimport { getPreBuildDVRs } from '@deriv/shared';\nimport Error from './errors';\n\nclass Validator {\n    constructor(input, rules, store = null) {\n        this.input = input;\n        this.rules = rules;\n        this.store = store;\n        this.errors = new Error();\n\n        this.error_count = 0;\n    }\n\n    /**\n     * Add failure and error message for given rule\n     *\n     * @param {string} attribute\n     * @param {object} rule\n     */\n    addFailure(attribute, rule, error_message) {\n        let message = error_message || rule.options.message || getPreBuildDVRs()[rule.name].message();\n        if (rule.name === 'length') {\n            message = template(message, [\n                rule.options.min === rule.options.max ? rule.options.min : `${rule.options.min}-${rule.options.max}`,\n            ]);\n        } else if (rule.name === 'min') {\n            message = template(message, [rule.options.min]);\n        } else if (rule.name === 'not_equal') {\n            message = template(message, [rule.options.name1, rule.options.name2]);\n        }\n        this.errors.add(attribute, message);\n        this.error_count++;\n    }\n\n    /**\n     * Runs validator\n     *\n     * @return {boolean} Whether it passes; true = passes, false = fails\n     */\n    check() {\n        Object.keys(this.input).forEach(attribute => {\n            if (!Object.prototype.hasOwnProperty.call(this.rules, attribute)) {\n                return;\n            }\n\n            this.rules[attribute].forEach(rule => {\n                const ruleObject = Validator.getRuleObject(rule);\n\n                if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\n                    return;\n                }\n\n                if (ruleObject.options.condition && !ruleObject.options.condition(this.store)) {\n                    return;\n                }\n\n                if (this.input[attribute] === '' && ruleObject.name !== 'req') {\n                    return;\n                }\n\n                let is_valid, error_message;\n                if (ruleObject.name === 'number') {\n                    const { is_ok, message } = ruleObject.validator(\n                        this.input[attribute],\n                        ruleObject.options,\n                        this.store,\n                        this.input\n                    );\n                    is_valid = is_ok;\n                    error_message = message;\n                } else {\n                    is_valid = ruleObject.validator(this.input[attribute], ruleObject.options, this.store, this.input);\n                }\n\n                if (!is_valid) {\n                    this.addFailure(attribute, ruleObject, error_message);\n                }\n            });\n        });\n        return !this.error_count;\n    }\n\n    /**\n     * Determine if validation passes\n     *\n     * @return {boolean}\n     */\n    isPassed() {\n        return this.check();\n    }\n\n    /**\n     * Converts the rule array to an object\n     *\n     * @param {array} rule\n     * @return {object}\n     */\n    static getRuleObject(rule) {\n        const is_rule_string = typeof rule === 'string';\n        const rule_object = {\n            name: is_rule_string ? rule : rule[0],\n            options: is_rule_string ? {} : rule[1] || {},\n        };\n\n        rule_object.validator = rule_object.name === 'custom' ? rule[1].func : getPreBuildDVRs()[rule_object.name].func;\n\n        return rule_object;\n    }\n}\n\nexport default Validator;\n","import { action, intercept, observable, reaction, toJS, when, makeObservable } from 'mobx';\nimport { isProduction, isEmptyObject } from '@deriv/shared';\n\nimport Validator from '../Utils/Validator';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    validation_errors = {};\n\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import debounce from 'lodash.debounce';\nimport { action, computed, observable, makeObservable, override } from 'mobx';\nimport { toMoment, WS } from '@deriv/shared';\n\nimport getDateBoundaries from './Helpers/format-request';\nimport { formatProfitTableTransactions } from './Helpers/format-response';\nimport BaseStore from '../../base-store';\n\nconst batch_size = 50;\nconst delay_on_scroll_time = 150;\n\nexport default class ProfitTableStore extends BaseStore {\n    data = [];\n    date_from = null;\n    date_to = toMoment().startOf('day').add(1, 'd').subtract(1, 's').unix();\n    error = '';\n    has_loaded_all = false;\n    is_loading = false;\n    filtered_date_range;\n\n    // `client_loginid` is only used to detect if this is in sync with the client-store, don't rely on\n    // this for calculations. Use the client.currency instead.\n    client_loginid = '';\n\n    constructor({ root_store }) {\n        // TODO: [mobx-undecorate] verify the constructor arguments and the arguments of this automatically generated super call\n        super({ root_store });\n\n        makeObservable(this, {\n            data: observable,\n            date_from: observable,\n            date_to: observable,\n            error: observable,\n            has_loaded_all: observable,\n            is_loading: observable,\n            filtered_date_range: observable,\n            client_loginid: observable,\n            total_profit: computed,\n            is_empty: computed,\n            has_selected_date: computed,\n            fetchNextBatch: action.bound,\n            profitTableResponseHandler: action.bound,\n            handleScroll: action.bound,\n            networkStatusChangeListener: action.bound,\n            onMount: action.bound,\n            onUnmount: override,\n            totals: computed,\n            accountSwitcherListener: action.bound,\n            clearTable: action.bound,\n            clearDateFilter: action.bound,\n            handleDateChange: action.bound,\n        });\n    }\n\n    get total_profit() {\n        return this.data.reduce((previous, current) => {\n            const buy_price = Number(parseFloat(current.buy_price));\n            const sell_price = Number(parseFloat(current.sell_price));\n            const pl = sell_price - buy_price;\n            return previous + pl;\n        }, 0);\n    }\n\n    get is_empty() {\n        return !this.is_loading && this.data.length === 0;\n    }\n\n    get has_selected_date() {\n        return !!(this.date_from || this.date_to);\n    }\n\n    shouldFetchNextBatch() {\n        if (this.has_loaded_all || this.is_loading) return false;\n        return true;\n    }\n\n    async fetchNextBatch() {\n        if (!this.shouldFetchNextBatch()) return;\n        this.is_loading = true;\n\n        const response = await WS.profitTable(\n            batch_size,\n            this.data.length,\n            getDateBoundaries(this.date_from, this.date_to, 0, false)\n        );\n\n        this.profitTableResponseHandler(response);\n    }\n\n    profitTableResponseHandler(response) {\n        if ('error' in response) {\n            this.error = response.error.message;\n            return;\n        }\n\n        const formatted_transactions = response.profit_table.transactions.map(transaction =>\n            formatProfitTableTransactions(\n                transaction,\n                this.root_store.client.currency,\n                this.root_store.active_symbols.active_symbols\n            )\n        );\n\n        this.data = [...this.data, ...formatted_transactions];\n        this.has_loaded_all = formatted_transactions.length < batch_size;\n        this.is_loading = false;\n    }\n\n    fetchOnScroll = debounce(left => {\n        if (left < 1500) {\n            this.fetchNextBatch();\n        }\n    }, delay_on_scroll_time);\n\n    handleScroll(event) {\n        const { scrollTop, scrollHeight, clientHeight } = event.target;\n        const left_to_scroll = scrollHeight - (scrollTop + clientHeight);\n        this.fetchOnScroll(left_to_scroll);\n    }\n\n    networkStatusChangeListener(is_online) {\n        this.is_loading = !is_online;\n    }\n\n    async onMount() {\n        this.assertHasValidCache(this.client_loginid, this.clearDateFilter, WS.forgetAll.bind(null, 'proposal'));\n        this.client_loginid = this.root_store.client.loginid;\n        this.onSwitchAccount(this.accountSwitcherListener);\n        this.onNetworkStatusChange(this.networkStatusChangeListener);\n        await WS.wait('authorize');\n\n        /* Caching won't work for profit_table because date filtering happens based on `buy_time` of a contract.\n        If we already have a cache for a period and if we sell a contract that was purchased in that period\n        then the sold contract won't be there in profit_table when visited again unless we fetch it again.\n        Caching will only work if the date filtering happens based on `sell_time` of a contract in BE. */\n        this.clearTable();\n        this.fetchNextBatch();\n    }\n\n    /* DO NOT call clearDateFilter() upon unmounting the component, date filters should stay\n    as we change tab or click on any contract for later references as discussed with UI/UX and QA */\n    onUnmount() {\n        this.disposeSwitchAccount();\n        WS.forgetAll('proposal');\n    }\n\n    get totals() {\n        let profit_loss = 0;\n\n        this.data.forEach(transaction => {\n            profit_loss += parseFloat(transaction.profit_loss.replace(/,/g, ''));\n        });\n        return {\n            profit_loss: profit_loss.toString(),\n        };\n    }\n\n    accountSwitcherListener() {\n        return new Promise(resolve => {\n            this.clearTable();\n            this.clearDateFilter();\n            return resolve(this.fetchNextBatch());\n        });\n    }\n\n    clearTable() {\n        this.data = [];\n        this.has_loaded_all = false;\n        this.is_loading = false;\n    }\n\n    clearDateFilter() {\n        this.date_from = null;\n        this.date_to = toMoment().startOf('day').add(1, 'd').subtract(1, 's').unix();\n    }\n\n    handleDateChange(date_values, { date_range } = {}) {\n        const { from, to, is_batch } = date_values;\n\n        this.filtered_date_range = date_range;\n\n        if (from) {\n            this.date_from = toMoment(from).unix();\n        } else if (is_batch) {\n            this.date_from = null;\n        }\n\n        if (to) this.date_to = toMoment(to).unix();\n\n        this.clearTable();\n        this.fetchNextBatch();\n    }\n}\n","import { formatMoney, toTitleCase, toMoment, getMarketInformation, getSymbolDisplayName } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nexport const formatStatementTransaction = (transaction, currency, active_symbols = []) => {\n    const format_string = 'DD MMM YYYY HH:mm:ss';\n    const transaction_time = toMoment(transaction.transaction_time).format(format_string);\n    const payout = parseFloat(transaction.payout);\n    const amount = parseFloat(transaction.amount);\n    const balance = parseFloat(transaction.balance_after);\n    const should_exclude_currency = true;\n    const shortcode = ['buy', 'sell'].includes(transaction.action_type) ? transaction.shortcode : null;\n    const display_name = shortcode\n        ? getSymbolDisplayName(active_symbols, getMarketInformation(shortcode).underlying)\n        : '';\n\n    return {\n        action: localize(toTitleCase(transaction.action_type) /* localize-ignore */), // handled in static_strings_app.js: 'Buy', 'Sell', 'Deposit', 'Withdrawal'\n        date: transaction_time,\n        display_name,\n        refid: transaction.transaction_id,\n        payout: isNaN(payout) ? '-' : formatMoney(currency, payout, should_exclude_currency),\n        amount: isNaN(amount) ? '-' : formatMoney(currency, amount, should_exclude_currency),\n        balance: isNaN(balance) ? '-' : formatMoney(currency, balance, should_exclude_currency),\n        desc: transaction.longcode.replace(/\\n/g, '<br />'),\n        id: transaction.contract_id,\n        app_id: transaction.app_id,\n        shortcode,\n        action_type: transaction.action_type,\n        purchase_time: transaction.purchase_time,\n        transaction_time: transaction.transaction_time,\n        ...(transaction.withdrawal_details && {\n            withdrawal_details: transaction.withdrawal_details,\n            longcode: transaction.longcode,\n        }),\n    };\n};\n","import debounce from 'lodash.debounce';\nimport { action, computed, observable, runInAction, makeObservable, override } from 'mobx';\nimport { toMoment, WS } from '@deriv/shared';\n\nimport { formatStatementTransaction } from './Helpers/format-response';\nimport getDateBoundaries from '../Profit/Helpers/format-request';\nimport BaseStore from '../../base-store';\n\nconst batch_size = 100; // request response limit\nconst delay_on_scroll_time = 150; // fetch debounce delay on scroll\n\nexport default class StatementStore extends BaseStore {\n    data = [];\n    is_loading = false;\n    has_loaded_all = false;\n    date_from = null;\n    date_to = toMoment().startOf('day').add(1, 'd').subtract(1, 's').unix();\n    error = '';\n    action_type = 'all';\n    filtered_date_range;\n\n    // `client_loginid` is only used to detect if this is in sync with the client-store, don't rely on\n    // this for calculations. Use the client.currency instead.\n    client_loginid = '';\n\n    account_statistics = {};\n\n    constructor({ root_store }) {\n        // TODO: [mobx-undecorate] verify the constructor arguments and the arguments of this automatically generated super call\n        super({ root_store });\n\n        makeObservable(this, {\n            data: observable,\n            is_loading: observable,\n            has_loaded_all: observable,\n            date_from: observable,\n            date_to: observable,\n            error: observable,\n            action_type: observable,\n            filtered_date_range: observable,\n            client_loginid: observable,\n            account_statistics: observable,\n            is_empty: computed,\n            has_selected_date: computed,\n            clearTable: action.bound,\n            clearDateFilter: action.bound,\n            fetchNextBatch: action.bound,\n            statementHandler: action.bound,\n            handleDateChange: action.bound,\n            handleFilterChange: action.bound,\n            handleScroll: action.bound,\n            loadAccountStatistics: action.bound,\n            accountSwitcherListener: action.bound,\n            networkStatusChangeListener: action.bound,\n            onMount: action.bound,\n            onUnmount: override,\n        });\n    }\n\n    get is_empty() {\n        return !this.is_loading && this.data.length === 0;\n    }\n\n    get has_selected_date() {\n        return !!(this.date_from || this.date_to);\n    }\n\n    clearTable() {\n        this.data = [];\n        this.has_loaded_all = false;\n        this.is_loading = false;\n    }\n\n    clearDateFilter() {\n        this.date_from = null;\n        this.date_to = toMoment().startOf('day').add(1, 'd').subtract(1, 's').unix();\n        this.partial_fetch_time = 0;\n    }\n\n    shouldFetchNextBatch(should_load_partially) {\n        if (!should_load_partially && (this.has_loaded_all || this.is_loading)) return false;\n        const today = toMoment().startOf('day').add(1, 'd').subtract(1, 's').unix();\n        if (this.date_to < today) return !should_load_partially && this.partial_fetch_time;\n        return true;\n    }\n\n    async fetchNextBatch(should_load_partially = false) {\n        if (!this.shouldFetchNextBatch(should_load_partially)) return;\n        this.is_loading = true;\n\n        const optional_arguments = getDateBoundaries(\n            this.date_from,\n            this.date_to,\n            this.partial_fetch_time,\n            should_load_partially\n        );\n\n        if (this.action_type !== 'all') {\n            optional_arguments.action_type = this.action_type;\n        }\n\n        const response = await WS.statement(\n            batch_size,\n            !should_load_partially ? this.data.length : undefined,\n            optional_arguments\n        );\n        this.statementHandler(response, should_load_partially);\n    }\n\n    statementHandler(response, should_load_partially) {\n        if ('error' in response) {\n            this.error = response.error.message;\n            return;\n        }\n\n        const formatted_transactions = response.statement.transactions.map(transaction =>\n            formatStatementTransaction(\n                transaction,\n                this.root_store.client.currency,\n                this.root_store.active_symbols.active_symbols\n            )\n        );\n\n        if (should_load_partially) {\n            this.data = [...formatted_transactions, ...this.data];\n        } else {\n            this.data = [...this.data, ...formatted_transactions];\n        }\n        this.has_loaded_all = !should_load_partially && formatted_transactions.length < batch_size;\n        this.is_loading = false;\n        if (formatted_transactions.length > 0) {\n            this.partial_fetch_time = toMoment().unix();\n        }\n    }\n\n    handleDateChange(date_values, { date_range } = {}) {\n        const { from, to, is_batch } = date_values;\n\n        this.filtered_date_range = date_range;\n\n        if (from) {\n            this.date_from = toMoment(from).unix();\n        } else if (is_batch) {\n            this.date_from = null;\n        }\n\n        if (to) this.date_to = toMoment(to).unix();\n\n        this.clearTable();\n        this.fetchNextBatch();\n    }\n\n    handleFilterChange(filterValue = {}) {\n        this.action_type = filterValue;\n        this.clearTable();\n        this.fetchNextBatch();\n    }\n\n    fetchOnScroll = debounce(left => {\n        if (left < 1500) {\n            this.fetchNextBatch();\n        }\n    }, delay_on_scroll_time);\n\n    handleScroll(event) {\n        const { scrollTop, scrollHeight, clientHeight } = event.target;\n        const left_to_scroll = scrollHeight - (scrollTop + clientHeight);\n\n        this.fetchOnScroll(left_to_scroll);\n    }\n\n    async loadAccountStatistics() {\n        this.account_statistics = {};\n        const { client } = this.root_store;\n        const is_mx_mlt = client.standpoint.iom || client.standpoint.malta;\n        if (is_mx_mlt) {\n            const response_account_statistics = await WS.accountStatistics();\n            runInAction(() => {\n                if (response_account_statistics.error) {\n                    this.account_statistics = {};\n                    return;\n                }\n\n                this.account_statistics = response_account_statistics.account_statistics;\n            });\n        }\n    }\n\n    accountSwitcherListener() {\n        return new Promise(resolve => {\n            this.clearTable();\n            this.clearDateFilter();\n            this.loadAccountStatistics();\n            return resolve(this.fetchNextBatch());\n        });\n    }\n\n    networkStatusChangeListener(is_online) {\n        this.is_loading = !is_online;\n    }\n\n    async onMount() {\n        this.assertHasValidCache(\n            this.client_loginid,\n            this.clearDateFilter,\n            this.clearTable,\n            WS.forgetAll.bind(null, 'proposal')\n        );\n        this.client_loginid = this.root_store.client.loginid;\n        this.onSwitchAccount(this.accountSwitcherListener);\n        this.onNetworkStatusChange(this.networkStatusChangeListener);\n        await WS.wait('authorize');\n        this.fetchNextBatch(true);\n        this.loadAccountStatistics();\n    }\n\n    /* DO NOT call clearDateFilter() upon unmounting the component, date filters should stay\n    as we change tab or click on any contract for later references as discussed with UI/UX and QA */\n    onUnmount() {\n        this.disposeSwitchAccount();\n        WS.forgetAll('proposal');\n    }\n}\n","import ProfitTableStore from './Profit/profit-store';\nimport StatementStore from './Statement/statement-store';\n\nexport default class ModulesStore {\n    constructor(root_store) {\n        this.profit_table = new ProfitTableStore({ root_store });\n        this.statement = new StatementStore({ root_store });\n    }\n}\n","import ModulesStore from './Modules';\nimport ProfitTableStore from './Modules/Profit/profit-store';\nimport StatementStore from './Modules/Statement/statement-store';\nimport type { TCoreStores } from '@deriv/stores/types';\n\nexport type TRootStore = TCoreStores & {\n    modules: {\n        profit_table: ProfitTableStore;\n        statement: StatementStore;\n    };\n};\n\nexport default class RootStore {\n    client: TCoreStores['client'];\n    common: TCoreStores['common'];\n    modules: ModulesStore;\n    ui: TCoreStores['ui'];\n    gtm: unknown;\n    pushwoosh: unknown;\n    notifications: TCoreStores['notifications'];\n    contract_replay: unknown;\n    contract_trade: TCoreStores['contract_trade'];\n    portfolio: TCoreStores['portfolio'];\n    chart_barrier_store: unknown;\n    active_symbols: unknown;\n\n    constructor(core_store: TCoreStores) {\n        this.client = core_store.client;\n        this.common = core_store.common;\n        this.modules = new ModulesStore(this);\n        this.ui = core_store.ui;\n        this.gtm = core_store.gtm;\n        this.pushwoosh = core_store.pushwoosh;\n        this.notifications = core_store.notifications;\n        this.contract_replay = core_store.contract_replay;\n        this.contract_trade = core_store.contract_trade;\n        this.portfolio = core_store.portfolio;\n        this.chart_barrier_store = core_store.chart_barrier_store;\n        this.active_symbols = core_store.active_symbols;\n    }\n}\n","import { configure } from 'mobx';\nimport RootStore from 'Stores';\nimport { setWebsocket } from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\n\nconfigure({ enforceActions: 'observed' });\n\nlet root_store;\n\nconst initStore = (core_store, websocket) => {\n    if (root_store) return root_store;\n\n    ServerTime.init(core_store.common);\n    setWebsocket(websocket);\n    root_store = new RootStore(core_store);\n\n    return root_store;\n};\n\nexport default initStore;\n","import React from 'react';\nimport Routes from 'Containers/routes';\nimport { MobxContentProvider } from 'Stores/connect';\nimport { StoreProvider } from '@deriv/stores';\nimport 'Sass/app.scss';\nimport initStore from './init-store';\nimport type { TCoreStores } from '@deriv/stores/types';\n\ntype TAppProps = {\n    passthrough: {\n        root_store: TCoreStores;\n        WS: unknown;\n    };\n};\n\nconst App = ({ passthrough }: TAppProps) => {\n    const root_store = initStore(passthrough.root_store, passthrough.WS);\n\n    return (\n        <MobxContentProvider store={root_store}>\n            <StoreProvider store={passthrough.root_store}>\n                <Routes />\n            </StoreProvider>\n        </MobxContentProvider>\n    );\n};\n\nexport default App;\n","import { createContext } from 'react';\nimport type { TStores } from '../types';\n\nconst StoreContext = createContext<TStores | null>(null);\n\nexport default StoreContext;\n","import React, { PropsWithChildren } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n\nconst queryClient = new QueryClient();\n\nconst APIProvider = ({ children }: PropsWithChildren<unknown>) => (\n    <QueryClientProvider client={queryClient}>\n        {children}\n        <ReactQueryDevtools />\n    </QueryClientProvider>\n);\n\nexport default APIProvider;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useWS } from '@deriv/shared';\nimport type {\n    TSocketAcceptableProps,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nconst useSubscription = <T extends TSocketSubscribableEndpointNames>(name: T) => {\n    const [is_loading, setIsLoading] = useState(false);\n    const [is_subscribed, setSubscribed] = useState(false);\n    const [error, setError] = useState<unknown>();\n    const [data, setData] = useState<TSocketResponseData<T>>();\n    const subscriber = useRef<{ unsubscribe?: VoidFunction }>();\n    const WS = useWS();\n\n    const subscribe = useCallback(\n        (...props: TSocketAcceptableProps<T>) => {\n            const prop = props?.[0];\n            const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n            setIsLoading(true);\n            setSubscribed(true);\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const onData = (response: any) => {\n                setData(response);\n                setIsLoading(false);\n            };\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const onError = (response: any) => {\n                setError(response.error);\n                setIsLoading(false);\n            };\n\n            try {\n                subscriber.current = WS.subscribe({ [name]: 1, subscribe: 1, ...(payload || {}) }).subscribe(\n                    onData,\n                    onError\n                );\n            } catch (e) {\n                setError(e);\n            }\n        },\n        [WS, name]\n    );\n\n    const unsubscribe = useCallback(() => {\n        subscriber.current?.unsubscribe?.();\n        setSubscribed(false);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            unsubscribe();\n        };\n    }, [unsubscribe]);\n\n    return { subscribe, unsubscribe, is_loading, is_subscribed, error, data };\n};\n\nexport default useSubscription;\n","import { useContext } from 'react';\nimport StoreContext from './storeContext';\n\nconst useStore = () => {\n    const store = useContext(StoreContext);\n\n    if (!store) {\n        throw new Error('useStore must be used within StoreProvider');\n    }\n\n    return store;\n};\n\nexport default useStore;\n","import React, { useEffect } from 'react';\nimport { useSubscription } from '@deriv/api';\nimport merge from 'lodash.merge';\nimport { observer } from 'mobx-react-lite';\nimport useStore from '../useStore';\n\nconst ExchangeRatesProvider = observer(({ children }: React.PropsWithChildren<unknown>) => {\n    const { data, subscribe } = useSubscription('exchange_rates');\n    const {\n        exchange_rates: { update },\n    } = useStore();\n\n    useEffect(() => {\n        subscribe({ payload: { base_currency: 'USD' } });\n    }, [subscribe]);\n\n    useEffect(() => {\n        if (data) {\n            const { exchange_rates } = data;\n\n            if (exchange_rates) update(prev => merge(prev, exchange_rates));\n        }\n    }, [update, data]);\n\n    return <>{children}</>;\n});\n\nexport default ExchangeRatesProvider;\n","import { action, makeObservable, observable } from 'mobx';\nimport { makePersistable, stopPersisting } from 'mobx-persist-store';\n\nexport default class BaseStore<T> {\n    data: T | undefined = undefined;\n\n    constructor(name: string, onHydrationDone?: VoidFunction) {\n        makeObservable(this, {\n            data: observable,\n            update: action.bound,\n            unmount: action.bound,\n        });\n\n        makePersistable(this, { name, properties: ['data'], storage: window.localStorage }).then(() =>\n            onHydrationDone?.()\n        );\n    }\n\n    update(data: NonNullable<T> | ((previous?: T) => NonNullable<T>)) {\n        this.data = data instanceof Function ? data(this.data) : data;\n    }\n\n    unmount() {\n        stopPersisting(this);\n    }\n}\n","import BaseStore from './BaseStore';\nimport type { ExchangeRatesResponse } from '@deriv/api-types';\n\nexport default class ExchangeRatesStore extends BaseStore<ExchangeRatesResponse['exchange_rates']> {\n    constructor() {\n        super('ExchangeRatesStore');\n    }\n}\n","import BaseStore from './BaseStore';\n\nconst FLAGS = {\n    foo: false,\n    bar: false,\n    baz: false,\n    // Add your flag here 🚀\n} satisfies Record<string, boolean>;\n\nexport default class FeatureFlagsStore extends BaseStore<{ [k in keyof typeof FLAGS]: boolean }> {\n    constructor() {\n        super('FeatureFlagsStore', () => {\n            // Set the default values for the first time.\n            if (!this.data) this.update(FLAGS);\n\n            // Update the store data if a new flag was added or removed.\n            if (this.data && Object.keys(this.data).length !== Object.keys(FLAGS).length) {\n                this.update(old => {\n                    const data = FLAGS;\n\n                    Object.keys(FLAGS).forEach(flag => {\n                        // @ts-expect-error flag key is always present in the object, Hence can ignore the TS error.\n                        if (old[flag] !== undefined) data[flag] = old[flag];\n                    });\n\n                    return data;\n                });\n            }\n        });\n    }\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { ExchangeRatesProvider } from './providers';\nimport StoreContext from './storeContext';\nimport { ExchangeRatesStore, FeatureFlagsStore } from './stores';\nimport type { TCoreStores, TStores } from '../types';\n\nconst StoreProvider = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    const memoizedValue: TStores = useMemo(() => {\n        // If the store is mocked for testing purposes, then return the mocked value.\n        if ('is_mock' in store && store.is_mock) return store as unknown as TStores;\n\n        // Otherwise, instantiate store and return it.\n        return {\n            ...store,\n            exchange_rates: new ExchangeRatesStore(),\n            feature_flags: new FeatureFlagsStore(),\n        };\n    }, [store]);\n\n    useEffect(() => {\n        return () => {\n            Object.values(memoizedValue).forEach(value => {\n                if (typeof value === 'object' && 'unmount' in value) value.unmount();\n            });\n        };\n    }, [memoizedValue]);\n\n    return (\n        <StoreContext.Provider value={memoizedValue}>\n            <ExchangeRatesProvider>{children}</ExchangeRatesProvider>\n        </StoreContext.Provider>\n    );\n};\n\nexport default StoreProvider;\n"],"names":["MobxContent","React","MobxContentProvider","store","children","Provider","value","mobxStores","connect","propsToSelectFn","Component","BaseComponent","own_props","ObservedComponent","prototype","isReactComponent","isClassComponent","props","useObserver","displayName","name","injectStorePropsToComponent","common_store","clock_started","pending","PromiseClass","require","ServerTime","init","resolve","server_time","get","clone","undefined","timePromise","Promise","promise","module","exports","static_hash","this","reject","template","string","content","to_replace","Array","isArray","replace","s","index","createElement","tag_name","attributes","el","document","Object","keys","forEach","attr","textContent","html","setAttribute","getStaticHash","querySelector","getAttribute","split","routesConfig","Page404","lazyLoadReportComponent","makeLazyLoader","moduleLoader","Loading","route_default","component","getTitle","localize","path","routes","reports","is_authenticated","icon_component","positions","default","profit","statement","push","route","Route","exact","render","result","Redirect","to","location","pathname","toLowerCase","is_logging_in","is_logged_in","default_subroute","find","r","has_default_subroute","isEmptyObject","removeBranchName","RouteComponent","redirectToLogin","getLanguage","title","default_title","fallback","Localize","i18n_default_text","Switch","getRoutesConfig","map","idx","key","header","message","is_dialog","redirect_label","redirectOnClick","should_show_refresh","refresh_message","Dialog","is_visible","confirm_button_text","onConfirm","reload","has_close_icon","PageErrorContainer","error_header","error_messages","redirect_urls","trade","redirect_labels","buttonOnClick","withRouter","client","common","error","has_error","passthrough","getDateTo","partial_fetch_time","date_to","today","toMoment","startOf","unix","epochToMoment","add","subtract","getDateFrom","should_load_partially","date_from","shouldSendDateFrom","Errors","errors","attribute","has","indexOf","hasOwnProperty","call","input","rules","Error","error_count","rule","is_rule_string","rule_object","options","validator","func","getPreBuildDVRs","error_message","min","max","name1","name2","ruleObject","Validator","getRuleObject","condition","is_valid","is_ok","addFailure","check","i","BaseStore","validation_errors","validation_rules","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","makeObservable","observable","retrieveFromStorage","action","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","bound","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","root_store","local_storage_properties","session_storage_properties","store_name","defineProperty","enumerable","writable","length","setTimeout","setupReactionForLocalStorage","setupReactionForSessionStorage","properties","snapshot","toJS","reduce","p","assign","reaction","saveToStorage","STORAGES","LOCAL_STORAGE","SESSION_STORAGE","storage","JSON","stringify","getSnapshot","localStorage","setItem","sessionStorage","local_storage_snapshot","parse","getItem","session_storage_snapshot","k","propertyName","messages","filter","x","includes","concat","property","intercept","change","newValue","trigger","inputs","isPassed","listener","when","switch_broadcast","then","switchEndSignal","isProduction","console","pre_switch_broadcast","setPreSwitchAccount","has_logged_out","setLogout","initialized_broadcast","setInitialized","is_network_online","is_online","ui","is_dark_mode_on","has_real_account_signup_ended","setRealAccountSignupEnd","loginid","reactions","act","freeze","Symbol","ProfitTableStore","data","has_loaded_all","is_loading","filtered_date_range","client_loginid","fetchOnScroll","debounce","left","fetchNextBatch","total_profit","computed","is_empty","has_selected_date","profitTableResponseHandler","handleScroll","networkStatusChangeListener","onMount","override","totals","accountSwitcherListener","clearTable","clearDateFilter","handleDateChange","previous","current","buy_price","Number","parseFloat","sell_price","shouldFetchNextBatch","WS","profitTable","getDateBoundaries","response","formatted_transactions","profit_table","transactions","transaction","currency","active_symbols","format_string","purchase_time","format","purchase_time_unix","sell_time","payout","profit_loss","formatMoney","display_name","getSymbolDisplayName","getMarketInformation","shortcode","underlying","formatProfitTableTransactions","event","target","scrollTop","left_to_scroll","scrollHeight","clientHeight","forgetAll","bind","wait","toString","date_values","date_range","from","is_batch","formatStatementTransaction","transaction_time","amount","balance","balance_after","should_exclude_currency","action_type","toTitleCase","date","refid","transaction_id","isNaN","desc","longcode","id","contract_id","app_id","withdrawal_details","StatementStore","account_statistics","statementHandler","handleFilterChange","loadAccountStatistics","optional_arguments","filterValue","standpoint","iom","malta","accountStatistics","response_account_statistics","runInAction","ModulesStore","RootStore","core_store","modules","gtm","pushwoosh","notifications","contract_replay","contract_trade","portfolio","chart_barrier_store","configure","enforceActions","websocket","setWebsocket","initStore","createContext","QueryClient","useState","setIsLoading","is_subscribed","setSubscribed","setError","setData","subscriber","useRef","useWS","subscribe","useCallback","prop","payload","e","unsubscribe","useEffect","useContext","StoreContext","ExchangeRatesProvider","observer","useSubscription","update","useStore","exchange_rates","base_currency","prev","merge","onHydrationDone","unmount","makePersistable","window","Function","stopPersisting","ExchangeRatesStore","FLAGS","foo","bar","baz","FeatureFlagsStore","old","flag","memoizedValue","useMemo","is_mock","feature_flags","values"],"sourceRoot":""}