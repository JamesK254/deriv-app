{"version":3,"file":"trader/js/trader.contract.d3cb1419be4de223f400.js","mappings":"yWAMMA,EAAiB,SAAH,GAOd,IANFC,EAAM,EAANA,OACAC,EAAO,EAAPA,QACAC,EAAS,EAATA,UACAC,EAAc,EAAdA,eACAC,EAAe,EAAfA,gBAAe,IACfC,oBAEMC,OAFa,IAAG,GAAI,GAEoBC,EAAAA,EAAAA,UAAS,yCAA2C,GAElG,OAAIL,EAEI,kBAAC,EAAAM,OAAM,CACHC,MAAOT,IAAUO,EAAAA,EAAAA,UAAS,sBAC1BG,YAAU,EACVC,oBAAqBR,IAAkBI,EAAAA,EAAAA,UAAS,MAChDK,UAAWR,GAAoB,kBAAMS,SAASC,QAAQ,GAErDb,IAAWM,EAAAA,EAAAA,UAAS,2DAK7B,kBAAC,EAAAQ,mBAAkB,CACfC,aAAchB,QAAAA,EAAU,GACxBiB,eAAgBhB,EAAU,CAACA,EAASK,GAAmB,GACvDY,cAAe,CAACC,EAAAA,OAAOC,OACvBC,gBAAiB,CAAClB,IAAkBI,EAAAA,EAAAA,UAAS,YAC7Ce,cAAelB,GAAoB,kBAAMS,SAASC,QAAQ,GAGtE,EAEAf,EAAewB,UAAY,CACvBvB,OAAQwB,IAAAA,OACRtB,UAAWsB,IAAAA,KACXvB,QAASuB,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,OAAkBA,IAAAA,SAChErB,eAAgBqB,IAAAA,OAChBpB,gBAAiBoB,IAAAA,KACjBnB,oBAAqBmB,IAAAA,KACrBC,KAAMD,IAAAA,QAGV,MC/CA,ED+CA,C,8RE1CME,GAA2BC,EAAAA,EAAAA,KAAS,YAA4B,IAAzBf,EAAS,EAATA,UAAWgB,EAAO,EAAPA,QAC5CC,GAAOC,EAAAA,EAAAA,MAAPD,GACAE,EAAyFF,EAAzFE,WAAYC,EAA6EH,EAA7EG,UAAWC,EAAkEJ,EAAlEI,WAAmDvB,EAAemB,EAAtDK,sCAE3C,OACI,kBAAC,EAAA1B,OAAM,CACHC,OAAOF,EAAAA,EAAAA,UAAS,uBAChBI,qBAAqBJ,EAAAA,EAAAA,UAAS,6BAA8B,CAAE4B,eAAgBC,EAAAA,eAC9EC,oBAAoB9B,EAAAA,EAAAA,UAAS,oBAC7BK,UAAWA,EACX0B,SAAUV,EACVG,WAAYA,EACZC,UAAWA,EACXC,WAAYA,EACZM,qBAAmB,EACnB7B,WAAYA,GAEZ,kBAAC,EAAA8B,SAAQ,CAACC,kBAAkB,yFAGxC,IAEAf,EAAyBH,UAAY,CACjCK,QAASJ,IAAAA,KACTZ,UAAWY,IAAAA,MAGf,MChCA,EDgCA,C,ikBE7BMkB,EAAoB,SAAH,OAAMC,EAAI,EAAJA,KAAMC,EAAE,EAAFA,GAAIC,EAAK,EAALA,MAAOC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAM,OAClE,yBAAKJ,GAAIA,EAAIK,UAAU,uBAAuB,cAAaL,GACtDD,GAAQ,yBAAKM,UAAU,wBAAwBN,GAChD,yBAAKM,UAAU,wBACX,kBAAC,EAAAC,KAAI,CAACC,KAAK,OAAOC,OAAQ,CAAEC,WAAY,SAAWJ,UAAU,yBACxDJ,GAEL,yBAAKI,UAAU,iCACX,kBAAC,EAAAC,KAAI,CAACI,OAAO,OAAOH,KAAK,MAAMI,YAAY,IAAIC,MAAM,YAAYP,UAAU,yBACtEF,GAEJC,GACG,kBAAC,EAAAE,KAAI,CAACI,OAAO,OAAOH,KAAK,MAAMI,YAAY,IAAIC,MAAM,YAAYP,UAAU,0BACtED,KAKhBF,GACG,yBAAKG,UAAU,6BACX,kBAAC,EAAAC,KAAI,CAACC,KAAK,OAAOM,MAAM,QAAQF,YAAY,KAAKN,UAAU,oCACtDS,EAAAA,EAAAA,YAAWZ,IAEhB,kBAAC,EAAAI,KAAI,CAACC,KAAK,OAAOM,MAAM,QAAQF,YAAY,KAAKN,UAAU,oCACtDU,EAAAA,EAAAA,YAAWb,KAItB,EAGVJ,EAAkBnB,UAAY,CAC1BoB,KAAMnB,IAAAA,KACNoB,GAAIpB,IAAAA,OACJqB,MAAOrB,IAAAA,OACPsB,UAAWtB,IAAAA,OACXuB,MAAOvB,IAAAA,UAAoBoC,UAAU,CAACpC,IAAAA,OAAkBA,IAAAA,OAAkBA,IAAAA,OAC1EwB,OAAQxB,IAAAA,UAAoBoC,UAAU,CAACpC,IAAAA,OAAkBA,IAAAA,UAG7D,U,sDCjBMqC,EAAkB,SAAH,GAA6F,IAAvFC,EAAiB,EAAjBA,kBAAmBC,EAAa,EAAbA,cAAeC,EAAQ,EAARA,SAAUC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAAWC,EAAU,EAAVA,WAEzFC,EAcAL,EAdAK,WACAC,EAaAN,EAbAM,cACAC,EAYAP,EAZAO,SACAC,EAWAR,EAXAQ,yBACAC,EAUAT,EAVAS,gBACAC,EASAV,EATAU,eACAC,EAQAX,EARAW,aACAC,EAOAZ,EAPAY,OACAC,EAMAb,EANAa,WACAC,EAKAd,EALAc,WACAC,EAIAf,EAJAe,YAAW,EAIXf,EAHAgB,gBAAmBC,GAZvB,aAYqC,CAAC,EAAC,GAAhBA,IAAKC,EAAI,EAAJA,KACxBC,EAEAnB,EAFAmB,YACAC,EACApB,EADAoB,4BAGEC,EAAYT,GAAU,EACtBU,GAAqBC,EAAAA,EAAAA,sBAAqBvB,GAC1CwB,GAAgBpB,KAAeqB,EAAAA,EAAAA,uBAAsBnB,MAAmBoB,EAAAA,EAAAA,uBAAsBpB,GAC9FqB,IAAiBF,EAAAA,EAAAA,uBAAsBnB,KAAmBsB,MAAM7B,GAChE8B,GAAwBC,EAAAA,EAAAA,kBAAiBxB,IAAkBF,EAC3D2B,GAAsBN,EAAAA,EAAAA,uBAAsBnB,GAAc,UACvDS,EAAW,YAAID,EAAU,aAAItE,EAAAA,EAAAA,UAAS,UAAQ,UAC9CsE,EAAU,YAAIA,EAAa,GAAItE,EAAAA,EAAAA,UAAS,SAAUA,EAAAA,EAAAA,UAAS,UAUpE,OACI,kBAAC,EAAAwF,iBAAgB,CAACC,aAAaC,EAAAA,EAAAA,aAC3B,yBAAKhD,UAAU,gCACX,kBAAC,EAAiB,CACdL,GAAG,cACHD,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,eAAeQ,KAAM,KACtCN,OAAOtC,EAAAA,EAAAA,UAAS,gBAChBwC,OAAOxC,EAAAA,EAAAA,UAAS,sBAAuB,CAAE4F,UAAWnB,IACpDhC,OAAQiC,GAAO1E,EAAAA,EAAAA,UAAS,wBAAyB,CAAE6F,WAAYnB,SAAUoB,KAE5EC,EAAAA,EAAAA,sBAAqBjC,GAClB,kBAAC,aAAc,KACX,kBAAC,EAAiB,CACdzB,GAAG,sBACHD,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,uBAAuBQ,KAAM,KAC9CN,OAAOtC,EAAAA,EAAAA,UAAS,cAChBwC,MAAO,kBAAC,EAAAwD,MAAK,CAACC,OAAQpC,EAAYE,SAAUA,EAAUmC,eAAa,QAEpEpB,GACC,kBAAC,EAAiB,CACdzC,GAAG,wBACHD,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,sBAAsBQ,KAAM,KAC7CN,OA7BpB6D,EAAAA,EAAAA,YAAW3C,KAAkB4C,EAAAA,EAAAA,kCAAiC5C,IACvDxD,EAAAA,EAAAA,UAAS,sBAChBqG,EAAAA,EAAAA,iBAAgB7C,IAAuBxD,EAAAA,EAAAA,UAAS,gCCxDvB,SAAAwD,GAAa,SAC3CA,EAAc8C,aAAaC,YAAcC,IAAAA,MAAiBC,OAAO,CDwD5DC,CAAsBlD,IAAuBxD,EAAAA,EAAAA,UAAS,gCACnDA,EAAAA,EAAAA,UAAS,8BA0BQwC,MAAO,kBAAC,EAAAwD,MAAK,CAACC,OAAQnB,EAAoBf,SAAUA,OAKhE,kBAAC,aAAc,KACVoB,GACG,kBAAC,EAAiB,CACd9C,GAAG,oBACHD,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,qBAAqBQ,KAAM,KAC5CN,OAAOtC,EAAAA,EAAAA,UAAS,YAChBwC,MAAO8B,EAAa,EAAIiB,EAAsB,GAAH,OAAM9B,EAAQ,YAAIC,KAGpEE,GACG,kBAAC,EAAiB,CACdvB,GAAG,cACHD,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,mBAAmBQ,KAAM,KAC1CN,OAAOqE,EAAAA,EAAAA,IAAgBnD,GACvBhB,OAAOoE,EAAAA,EAAAA,IAAgBpD,IAAkB,QAGhDwB,GACG,kBAAC,EAAiB,CACd3C,GAAG,cACHD,MACIyE,EAAAA,EAAAA,IAAY/C,GACR,kBAAC,EAAA6B,KAAI,CAACvD,KAAK,mBAAmBQ,KAAM,KAEpC,kBAAC,EAAA+C,KAAI,CAACvD,KAAK,oBAAoBQ,KAAM,KAG7CN,OAAOqE,EAAAA,EAAAA,IAAgBnD,GACvBhB,OAAOoE,EAAAA,EAAAA,IAAgBpD,IAAkB,QAGhD6B,GACG,kBAAC,EAAiB,CACdhD,GAAG,cACHD,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,mBAAmBQ,KAAM,KAC1CN,OAAOtC,EAAAA,EAAAA,UAAS,oBAChBwC,MAAO,UAAGoC,EAA2B,aAAIkC,EAAAA,EAAAA,wBAAuB/C,KAAe,UAK9FgD,EAAAA,EAAAA,gBAAejD,IACZ,kBAAC,aAAc,KACV,CAACK,EAAcQ,GAAaqC,KAAI,SAACC,EAASC,GAAK,OAC5C,kBAAC,EAAiB,CACd7E,GAAE,sBAAiB6E,EAAQ,GAC3B9E,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,mBAAmBQ,KAAM,KAC1CuE,IAAKF,EACL3E,MAAO6B,IAAiB8C,GAAUjH,EAAAA,EAAAA,UAAS,iBAAkBA,EAAAA,EAAAA,UAAS,eACtEwC,MAAOyE,GACT,KAId,kBAAC,EAAiB,CACd5E,GAAG,sBACHD,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,sBAAsBQ,KAAM,KAC7CN,OAAOtC,EAAAA,EAAAA,UAAS,cAChBwC,OAAO4E,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,eAAchD,KAAgB,UAEnDwC,EAAAA,EAAAA,IAAY/C,IACV,kBAAC,EAAiB,CACdzB,GAAG,sBACHD,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,sBAAsBQ,KAAM,KAC7CN,OAAOtC,EAAAA,EAAAA,UAAS,cAChBwC,OAAO8E,EAAAA,EAAAA,IAAiBtD,IAA6B,MACrDvB,QAAQ2E,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,eAAcpD,KAAqB,SAG7DmB,MAAMzB,IACJ,kBAAC,EAAiB,CACdtB,GAAG,qBACHD,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,qBAAqBQ,KAAM,KAC5CN,OAAOtC,EAAAA,EAAAA,UAAS,aAChBwC,OAAO8E,EAAAA,EAAAA,IAAiB3D,IAAc,MACtClB,QAAQ2E,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,eAAcnD,KAAoB,SAG5DkB,MAAM7B,IACJ,kBAAC,EAAiB,CACdlB,GAAG,qBACHD,KAAM,kBAAC,EAAAuD,KAAI,CAACvD,KAAK,qBAAqBa,MAAO4B,EAAY,QAAU,MAAOjC,KAAM,KAChFN,OAAOtC,EAAAA,EAAAA,UAAS,aAChBwC,OAAO4E,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,eAAc9D,KAAuB,SAMhF,EAEAD,EAAgBtC,UAAY,CACxBuC,kBAAmBtC,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAC1DuC,cAAevC,IAAAA,OACfoD,WAAYpD,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SACnDwC,SAAUxC,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SACjDyC,cAAezC,IAAAA,OACf0C,UAAW1C,IAAAA,OACX2C,WAAY3C,IAAAA,MAGhB,UExLA,IAAMsG,EAAkB,SAAH,GAAmC,IAA7BxD,EAAQ,EAARA,SAAQ,IAAEyD,QAAAA,OAAO,IAAG,KAAE,EAC7C,OAAKA,EAAQC,OAYT,kBAAC,EAAAjC,iBAAgB,CAACC,aAAaC,EAAAA,EAAAA,aAC3B,yBAAKhD,UAAU,gCACV8E,EAAQR,KAAI,SAACU,EAAMP,GAAG,OACnB,kBAAC,EAAiB,CACdA,IAAKA,EACL9E,GAAE,2BAAsB8E,GACxB7E,MAAOoF,EAAKC,aACZpF,WAAYmF,EAAKE,WACjBpF,MACqC,IAAjCqF,KAAKC,KAAKJ,EAAKK,cACX,kBAAC,aAAc,MACTL,EAAKK,aAAe,GAAK,qCAC3B,kBAAC,EAAA/B,MAAK,CAACC,OAAQyB,EAAKK,aAAchE,SAAUA,IAC3C2D,EAAKlF,OACF,kBAAC,aAAc,KACX,6BACA,kCAAQkF,EAAKlF,MAAK,QAK9BxC,EAAAA,EAAAA,UAAS,cAGnB,MAlCV,yBAAK0C,UAAU,yBACX,kBAAC,EAAAiD,KAAI,CAACvD,KAAK,QAAQQ,KAAM,GAAIK,MAAM,cACnC,wBAAIP,UAAU,iCAAgC1C,EAAAA,EAAAA,UAAS,eACvD,kBAAC,EAAA2C,KAAI,CAACO,MAAM,SAASF,YAAY,IAAIC,MAAM,iBAAiBL,KAAK,QAC5D5C,EAAAA,EAAAA,UAAS,2DAmC9B,EAEAuH,EAAgBvG,UAAY,CACxB+C,SAAU9C,IAAAA,OACVuG,QAASvG,IAAAA,OAGb,U,4hDCjDA,IAAM+G,EAAgB,SAAH,GASb,IARFC,EAAuB,EAAvBA,wBACAC,EAAU,EAAVA,WACAC,EAAc,EAAdA,eACAC,EAAa,EAAbA,cAEAC,GADuB,EAAvBC,wBACS,EAATD,WACAE,EAAgB,EAAhBA,iBACGC,EAAK,OAER,EAAkCA,EAAMhF,cAAhCiF,EAAW,EAAXA,YAAa1E,EAAQ,EAARA,SACwC,IAAlB2E,IAAAA,SAAe,IAAG,GAAtDC,EAAc,KAAEC,EAAgB,KAEjCC,EAAyB,SAAArB,GAAO,OAAIA,EAAQsB,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAEpB,WAAamB,EAAEnB,UAAU,GAAC,EAE7Fc,IAAAA,WAAgB,WACNT,EAAwBR,QAAUQ,EAAwBR,OAASkB,EAAelB,QACpFmB,EAAiBC,EAAuBZ,GAChD,GAAG,CAACA,EAAyBU,IAW7B,OAAKT,EAEAE,GAAkBD,GAAmBE,EAQtC,yBAAK3F,UAAU,2BACX,kBAAC,EAAAuG,KAAI,CAACC,KAAG,EAACxG,UAAU,uBAAuByG,eApB5B,SAAAC,GACnBb,EAAiBa,GACbA,GACAC,EAAAA,GAAGC,sBAAsBb,GAAac,MAAK,SAAAC,GACvCZ,EAAiBC,EAAuBW,EAASvB,yBACrD,GAER,GAcY,yBAAK3F,OAAOtC,EAAAA,EAAAA,UAAS,YACjB,kBAAC,EAAoBwI,IAEzB,yBAAKlG,OAAOtC,EAAAA,EAAAA,UAAS,YACjB,kBAAC,EAAe,CAAC+D,SAAUA,EAAUyD,QAASmB,OAZtD,yBAAKjG,UAAU,2BACX,kBAAC,EAAoB8F,IALT,IAqB5B,EAEAR,EAAchH,UAAY,CACtBwC,cAAevC,IAAAA,OACfgH,wBAAyBhH,IAAAA,MACzBiH,WAAYjH,IAAAA,KACZkH,eAAgBlH,IAAAA,KAChBmH,cAAenH,IAAAA,KACfqH,wBAAyBrH,IAAAA,KACzBoH,UAAWpH,IAAAA,KACXsH,iBAAkBtH,IAAAA,MAGtB,MCrEA,EDqEA,E,iZE9DO,IAAMwI,EAAyB,SAAH,GAAkD,IAA5CrB,EAAa,EAAbA,cAAesB,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aACxDC,EAAiBC,EAAAA,iBAAiBC,aAAa,CACjDH,aAAAA,IAGEI,EAAYC,SAASC,eAAe,4BAE1C,OAAKF,EAEEG,IAAAA,aACH,yBAAKxH,UAAU,uBACX,6BACQkH,EAAc,CAClBlH,UAAWyH,IAAW,iCAAkC,CACpD,gDAAiD/B,MAGpDsB,IAGTK,GAbmB,IAe3B,EAEAN,EAAuBzI,UAAY,CAC/BoH,cAAenH,IAAAA,KACfyI,SAAUzI,IAAAA,KACV0I,aAAc1I,IAAAA,MAGX,IAAMmJ,EAA0B,SAAH,GAA+C,IAAzCV,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAcU,EAAU,EAAVA,WACxDT,EAAiBC,EAAAA,iBAAiBC,aAAa,CACjDH,aAAAA,EACAU,WAAAA,IAGJ,OAAO,wBAAST,EAAiBF,EACrC,EAEAU,EAAwBpJ,UAAY,CAChC0I,SAAUzI,IAAAA,KACV0I,aAAc1I,IAAAA,KACdoJ,WAAYpJ,IAAAA,MC/ChB,IAAMqJ,EAA8B,SAAH,OAAMC,EAAgB,EAAhBA,iBAAgB,OACnD,yBAAK7H,UAAU,gCACX,kBAAC,EAAAC,KAAI,CAACO,MAAM,SAASsH,GAAG,IAAI9H,UAAU,sCAAsCK,OAAO,QAC9EwH,GAEH,EAGVD,EAA4BtJ,UAAY,CACpCyJ,OAAQxJ,IAAAA,QAGZ,U,ymCCJA,IAAMyJ,GAAqBtJ,EAAAA,EAAAA,KACvB,YAqBM,IApBFoC,EAAa,EAAbA,cACAmH,EAAe,EAAfA,gBACA5G,EAAQ,EAARA,SACAoE,EAAc,EAAdA,eACAyC,EAAY,EAAZA,aACAC,EAAgB,EAAhBA,iBACAC,EAAS,EAATA,UACA1C,EAAa,EAAbA,cACAxE,EAAU,EAAVA,WACA0E,EAAuB,EAAvBA,wBACAyC,EAAiB,EAAjBA,kBACA1C,EAAS,EAATA,UACA2C,EAAa,EAAbA,cACAC,EAAW,EAAXA,YACAZ,EAAU,EAAVA,WACAV,EAAY,EAAZA,aACAuB,EAAM,EAANA,OACAC,EAAW,EAAXA,YACAC,EAAM,EAANA,OACAC,EAAyB,EAAzBA,0BAEA,GAA+B9J,EAAAA,EAAAA,MAAvBD,EAAE,EAAFA,GAAIgK,EAAc,EAAdA,eACJC,GAAmBC,EAAAA,EAAAA,KAAnBD,eAEJE,EAMAnK,EANAmK,SACAC,EAKApK,EALAoK,cACAC,EAIArK,EAJAqK,YACAC,EAGAtK,EAHAsK,iCACAC,EAEAvK,EAFAuK,gBACAC,EACAxK,EADAwK,0BAEIC,EAAoBT,EAApBS,gBACkD,KAAVC,EAAAA,EAAAA,YAAU,GAAnDC,EAAS,KAAEC,EAA0B,KAEpC9H,EAA6BZ,EAA7BY,OAAQmG,EAAqB/G,EAArB+G,iBACV4B,KAAYC,EAAAA,EAAAA,YAAW5I,GACvBmE,GAAe0E,EAAAA,EAAAA,sBACjBd,GACAe,EAAAA,EAAAA,IAAqB9I,EAAc+I,WAAWC,YAG5CC,GAAYC,EAAAA,EAAAA,kBAAiBlJ,EAAcgJ,YAC3CG,GAAuBvE,GAAkBqE,GAAarE,EAEtDwE,EACF,kBAAC,EAAAC,aAAaC,OAAM,CAChBtJ,cAAeA,EACfmE,aAAcA,EACdoF,cAAeA,EAAAA,GACfC,uBAAwBA,EAAAA,GACxBL,qBAAqBM,EAAAA,EAAAA,cAAeN,EACpC7B,UAAWA,EACXC,kBAAmBA,EACnBoB,QAASA,EACTlB,YAAaA,EACbE,YAAaA,IAIf+B,EACF,kBAAC,EAAAL,aAAaM,KAAI,CACd1B,SAAUA,EACVjI,cAAeA,EACfmH,gBAAiBA,EACjB5G,SAAUA,EACV2H,cAAeA,EACfqB,cAAeA,EAAAA,GACfhB,gBAAiBA,EACjB5D,eAAgBA,EAChB2C,UAAWA,EACX1C,cAAeA,EACf+D,QAASA,EACT9D,UAAWA,EACXzE,WAAYA,EACZ+I,oBAAqBA,EACrBhB,YAAaA,EACbR,YAAaA,EACbU,gBAAiBA,EACjBD,iCAAkCA,EAClCR,OAAQA,EACRU,0BAA2BA,IAI7BsB,GACF,kBAAC,EAAAP,aAAaQ,OAAM,CAChB7J,cAAeA,EACfuJ,cAAeA,EAAAA,GACf3E,cAAeA,EACf2C,kBAAmBA,EACnBC,cAAeA,EACfC,YAAaA,EACbE,YAAaA,EACbC,OAAQA,IAIVkC,GACF,kBAAC,aAAc,KACVV,EACAM,GAIHK,GACF,kBAAC,EAAAV,aAAY,CACTrJ,cAAeA,EACfuJ,cAAeA,EAAAA,GACf3E,cAAeA,EACfoF,YAAapJ,EACbqJ,4BAA4B,GAE5B,yBACI/K,UAAWyH,IAAW,mBAAoB,CACtC,0BAA2B/F,EAAS,IAAM8G,EAC1C,wBAAyB9G,EAAS,IAAM8G,EACxC,yCAA0CL,GAAoBqB,IAElEwB,IAAKzB,GAEJpB,KAAqBuB,EAAAA,EAAAA,YAAW5I,IAC7B,yBACId,UAAWyH,IAAW,CAClB,wCAAwC8C,EAAAA,EAAAA,cAAef,KAG3D,kBAAC,EAA2B,CAAC3B,iBAAkBA,KAGtD+C,GACAF,KAKPO,GACFxB,GAAW/D,GAAiBD,GAAkBvE,GAAcyE,GAAaC,EAE7E,OACI,kBAAC,aAAc,KACX,kBAAC,EAAAsF,eAAc,KAAEL,IACjB,kBAAC,EAAAM,cAAa,KACV,kBAACzD,EAAuB,CACpBC,WAAYsD,GAAuBtD,OAAavE,EAChD6D,aAAcgE,GAAuBhE,OAAe7D,GAEnD6H,IACG,kBAAC,EAAAG,YAAYC,YAAW,CAACC,QAAS3C,EAA2BT,aAAcA,IAE9E2C,KAKrB,IAGJ7C,EAAmB1J,UAAY,CAC3B+C,SAAU9C,IAAAA,OACVkH,eAAgBlH,IAAAA,KAChBqH,wBAAyBrH,IAAAA,KACzB2J,aAAc3J,IAAAA,KACdoH,UAAWpH,IAAAA,KACX+J,cAAe/J,IAAAA,KACfgK,YAAahK,IAAAA,MAEjB,U,+hCChKA,IAAMgN,GAAiB7M,EAAAA,EAAAA,KACnB,YAgBM,MAfFoC,EAAa,EAAbA,cACAmH,EAAe,EAAfA,gBACA1C,EAAuB,EAAvBA,wBACAE,EAAc,EAAdA,eACA4C,EAAiB,EAAjBA,kBACAmD,EAAa,EAAbA,cACArD,EAAgB,EAAhBA,iBACAzC,EAAa,EAAbA,cACAC,EAAS,EAATA,UACAzE,EAAU,EAAVA,WACA0E,EAAuB,EAAvBA,wBACA0C,EAAa,EAAbA,cACAC,EAAW,EAAXA,YACAG,EAAM,EAANA,OACA7C,EAAgB,EAAhBA,iBAEA,GAAuBhH,EAAAA,EAAAA,MAAf4M,EAAM,EAANA,OAAQ7M,EAAE,EAAFA,GACR6J,EAAgBgD,EAAhBhD,YACAL,EAAcxJ,EAAdwJ,UACA/G,EAA+CP,EAA/CO,SAAUqK,EAAqC5K,EAArC4K,wBAAyBjC,EAAY3I,EAAZ2I,QACrCkC,EAAsB3F,IAAAA,SACtB4F,EAA2B5F,IAAAA,SACqD,IAArBA,IAAAA,UAAe,GAAM,GAA/E6F,EAA0B,KAAEC,EAA0B,KACvD7K,IACFwC,EAAAA,EAAAA,YAAW3C,IAAmB2E,GAAmBC,GAAkBC,EAE7D+F,EADA,IAGJK,EACF,kBAAC,EAAa,CACVjL,cAAeA,EACfyE,wBAAyBA,EACzB1E,mBAAmB6I,EAAAA,EAAAA,YAAW5I,GAC9B2E,eAAgBA,EAChB+F,cAAeA,EACf9F,cAAeA,EACfE,wBAAyBA,EACzBoG,SAAO,EACPrG,UAAWA,EACX5E,UAAUkL,EAAAA,EAAAA,iBAAgBnL,GAC1BE,eAAekL,EAAAA,EAAAA,sBAAoBC,EAAAA,EAAAA,mBAAkBrL,IACrDG,UAAWA,EACXuE,aACMiE,GAAW/D,GAAiBxE,GAAcyE,GAAaF,GAAkBG,EAE/EC,iBAAkBA,EAClB3E,WAAYA,IAIpB,IAAKJ,EAAe,OAAO,KAG3B,IAEMsL,EAFkBtL,EAAc4H,QAAU5H,EAAcuL,WAG1D,kBAAC,aAAc,KACX,kBAAC,EAAkB,CACfvL,cAAeA,EACfmH,gBAAiBA,EACjB5G,SAAUA,EACVoE,eAAgBA,EAChB2C,UAAWA,EACXD,iBAAkBA,EAClBzC,cAAeA,EACfC,UAAWA,EACXzE,WAAYA,EACZmH,kBAAmBA,EACnBzC,wBAAyBA,EACzBsC,aAAc2D,EACdvD,cAAeA,EACfC,YAAaA,EACbZ,WAAY,kBAAMmE,GAA2B,EAAK,EAClD7E,aAAc,kBAAM6E,GAA2B,EAAM,EACrDrD,YAAaA,EACbC,OAAQA,EACRC,0BAA2B,kBAAMmD,GAA4BD,EAA2B,IAE5F,kBAAC,EAAAX,eAAc,KAAEa,IAGrB,yBAAK/L,UAAU,iBACX,kBAAC,IAAmB,CAACwL,cAAeA,EAAec,MAAO,KAI5DC,EACF,kBAACC,EAAA,EAAa,CAACC,GAAIZ,EAA4Ba,QAAS,IAAKjF,WAAW,+BACpE,yBACI9H,GAAG,qBACHK,UAAWyH,IAAW,kBAAmB,CACrC,2CACMiC,EAAAA,EAAAA,YAAW5I,KACX4E,GAAiBxE,GAAcyE,GAAaF,GAAkBG,KAC5D5C,EAAAA,EAAAA,YACR,iCAAkC0C,IAAiB1C,EAAAA,EAAAA,YACnD,sCAAuC0C,IAAiB1C,EAAAA,EAAAA,cAAc0G,EAAAA,EAAAA,YAAW5I,KAErF6L,MAAO,CACHC,UACIf,GACAF,EAAoBkB,SACpBjB,EAAyBiB,SAAO,0BACbjB,EAAyBiB,QAAQC,aAAY,gBAAQnB,EAAoBkB,QAAQC,aAAY,SAExH9B,IAAKW,GAEL,yBAAK3L,UAAU,wBAAwBgL,IAAKY,GACvCQ,GAEJP,GACG,kBAAC,EAAAV,cAAa,KACV,yBAAKxL,GAAG,4BACJ,kBAACoH,EAAsB,CAACrB,cAAeA,GAClCqG,OAS7B,OACI,kBAAC,aAAc,KACX,kBAAC,EAAAb,eAAc,KAAEqB,GACjB,kBAAC,EAAApB,cAAa,KACV,yBACIwB,MAAO,CACHI,OAAwC,QAAlC,EAAEnB,EAAyBiB,eAAO,aAAhC,EAAkCC,eAG9C,kBAAC,EAAAE,kBAAiB,CAACC,cAAc,OAAOlK,aAAc6I,EAAyBiB,SAC1EN,KAMzB,IAGJhB,EAAejN,UAAY,CACvBmH,eAAgBlH,IAAAA,KAChBmH,cAAenH,IAAAA,KACf2C,WAAY3C,IAAAA,KACZqH,wBAAyBrH,IAAAA,KACzBoH,UAAWpH,IAAAA,KACXsH,iBAAkBtH,IAAAA,MAGtB,MC3KA,GD2Ke2O,EAAAA,EAAAA,YAAW3B,G,4xCEtK1B,IAAM4B,GAAkB,SAAH,GAA0B,IAApBrM,EAAa,EAAbA,cAEoC,KAApBkF,IAAAA,UAAe,GAAK,GAApDkC,EAAY,KAAEkF,EAAc,KAMnC,OACI,yBAAKpN,UAAU,qBACX,kBAAC,EAAAiD,KAAI,CAACvD,KAAK,iBAAiBM,UAAU,yBAAyBE,KAAM,KACrE,yBAAKF,UAAU,6BACX,kBAAC,EAAAC,KAAI,CACDC,KAAK,KACLF,UAAWyH,IAAW,yBAA0B,CAC5C,oCAAqCS,KAGxCpH,EAAcuM,UACZ,IAENvM,EAAcuM,SAAStI,OApBR,KAqBZ,kBAAC,EAAA9E,KAAI,CAAC6H,GAAG,IAAIwF,KAAK,IAAIpN,KAAK,KAAKoL,QAlB3B,WACjB8B,GAAgBlF,EACpB,EAgBuEqF,GAAC,GACnDrF,GAAe5K,EAAAA,EAAAA,UAAS,cAAeA,EAAAA,EAAAA,UAAS,eAMzE,EAEA6P,GAAgB7O,UAAY,CACxBwC,cAAevC,IAAAA,OACf8O,SAAU9O,IAAAA,OACV2C,WAAY3C,IAAAA,MAGhB,UAAeG,EAAAA,GAAAA,UAASyO,ICtCxB,IAAMK,GAAgB,SAAH,WAAMxQ,QAAAA,OAAO,IAAG,KAAE,EAAEyQ,EAAY,EAAZA,aAAY,OAC9CzQ,EACG,yBAAKgD,UAAU,WACX,yBAAKA,UAAU,gBACX,yBAAK0N,MAAM,KAAKX,OAAO,KAAKY,QAAQ,aAChC,uBAAGC,KAAK,OAAOC,SAAS,WACpB,4BAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,IAAIJ,KAAK,YACjC,0BACIA,KAAK,OACLC,SAAS,UACTI,EAAE,oLAKlB,yBAAKjO,UAAU,gBAAgBhD,GAC/B,yBAAKgD,UAAU,gBAAgBsL,QAASmC,GACpC,kBAAC,EAAAxK,KAAI,CAACvD,KAAK,cAhBZ,IAmBV,EAEL8N,GAAclP,UAAY,CACtBtB,QAASuB,IAAAA,OACTkP,aAAclP,IAAAA,MAGlB,YC3BA,IAAM2P,GAAU,SAAH,GAAsD,IAAhDpN,EAAa,EAAbA,cAAeqN,EAAa,EAAbA,cAAeC,EAAW,EAAXA,YACvCC,IAAavN,EAAcuM,SACjC,OACI,kBAAC,KAAO,CAAC5P,WAAY4Q,EAAUrO,UAAU,qBAAqBsO,QAAQ,wBAC/DxN,EAAcM,eACb,yBAAKpB,UAAU,YACX,kBAAC,GAAe,CAACc,cAAeA,KAGxC,kBAAC,GAAa,CAAC9D,QAASmR,EAAeV,aAAcW,IAGjE,EAEAF,GAAQ5P,UAAY,CAChBwC,cAAevC,IAAAA,OACf4P,cAAe5P,IAAAA,OACf6P,YAAa7P,IAAAA,MAGjB,MCxBA,GDwBA,G,+HElBagQ,IAAe7P,EAAAA,EAAAA,KAAS,WACjC,IACQ8P,GADoB3P,EAAAA,EAAAA,MAApB4P,gBACAD,eACA1N,EAA4E0N,EAA5E1N,cAAe4N,EAA6DF,EAA7DE,YAAaC,EAAgDH,EAAhDG,eAAgBC,EAAgCJ,EAAhCI,kBAAmBC,EAAaL,EAAbK,SAEvE,OACI,kBAACC,GAAA,EAAM,CACHF,kBAAmBA,EACnBC,SAAUA,EACV/N,cAAeA,EACf4N,YAAaA,EACbC,eAAgBA,GAG5B,IAEaI,IAAgBrQ,EAAAA,EAAAA,KAAS,WAClC,IAAQ+P,GAAoB5P,EAAAA,EAAAA,MAApB4P,gBACAvN,GAAe4H,EAAAA,EAAAA,KAAf5H,WACAsN,EAAmEC,EAAnED,eAAoCJ,EAA+BK,EAAnDO,mBAAiCb,EAAkBM,EAAlBN,cACjDrN,EAAkB0N,EAAlB1N,cAER,OACI,kBAAC,GAAO,CACJA,cAAeA,EACfqN,cAAeA,EACfC,YAAaA,EACblN,WAAYA,GAGxB,IAGa+N,GAAkB,WAAH,OAAS,kBAAC,KAAU,CAACf,QAAS,kBAACa,GAAa,MAAKG,kBAAkB,GAAS,EAC3FC,GAAqB,WAAH,OAAS,kBAAC,KAAa,CAACC,OAAQ,kBAACb,GAAY,OAAO,E,gsDCzBnF,IAAMc,GAA4BrJ,IAAAA,MAC9B,gBAAqBsJ,EAAe,EAAjCC,iBAAsCzJ,EAAK,gBAC1C,kBAACwJ,EAAe,SAAUxJ,GAAK,IAAE0J,wBAAoBpM,IAAe,IAExE,SAACqM,EAAWC,GAAS,OAAKD,EAAUD,qBAAuBE,EAAUF,kBAAkB,IAE3FH,GAA0BM,YAAc,4BAExC,Y,00CCcA,IAAMC,IAAiBlR,EAAAA,EAAAA,KAAS,YAAqB,IAAlBqH,EAAW,EAAXA,YAC/B,GAAwClH,EAAAA,EAAAA,MAAhC4M,EAAM,EAANA,OAAQgD,EAAe,EAAfA,gBAAiB7P,EAAE,EAAFA,GACzB4P,EAAmBC,EAAnBD,eAEJrG,EAUAsG,EAVAtG,iBACAE,EASAoG,EATApG,kBACAwH,EAQApB,EARAoB,mBACAvH,EAOAmG,EAPAnG,cACAC,EAMAkG,EANAlG,YACAuH,EAKArB,EALAqB,QACAC,EAIAtB,EAJAsB,UACAC,EAGAvB,EAHAuB,kBACAC,EAEAxB,EAFAwB,iBACAC,EACAzB,EADAyB,oBAEIpP,EAA+E0N,EAA/E1N,cAAemH,EAAgEuG,EAAhEvG,gBAAiB1C,EAA+CiJ,EAA/CjJ,wBAAyBqJ,EAAsBJ,EAAtBI,kBACzDuB,EAAmB1E,EAAnB0E,eACiB3E,EAAoF5M,EAArGwR,gBAA0DC,EAA2CzR,EAArE0R,yBAAgDzK,EAAqBjH,EAArBiH,iBAEhC,KAArBG,IAAAA,UAAe,GAAM,GAAjDvI,EAAU,KAAE8S,EAAY,KACzBzL,GAAU0L,EAAAA,EAAAA,cAEhBxK,IAAAA,WAAgB,WACZ,IAAMyK,GAAmB,SAASC,KAAK9S,SAAS+S,UAAU,GAI1D,OAHAb,EAAQ/J,GAAe0K,GACvBF,GAAa,GAEN,WACHA,GAAa,GACbR,GACJ,CAEJ,GAAG,CAAChK,EAAanI,SAAUkS,EAASC,IAQpC,IAAKjP,EAAcgJ,WAAY,OAAO,KAEtC,IAAMrE,GAAiBlD,EAAAA,EAAAA,uBAAsBzB,EAAcM,eACrDsE,GAAgBrC,EAAAA,EAAAA,sBAAqBvC,EAAcM,eACnDuE,GAAY/C,EAAAA,EAAAA,kBAAiB9B,EAAcM,eAC3CF,GAAa0P,EAAAA,EAAAA,mBAAkB9P,EAAcM,eAC7CwE,GAA0BpD,EAAAA,EAAAA,uBAAsB1B,EAAcM,eAE9DyP,EACF,kBAAC,EAAc,CACX/P,cAAeA,EACfmH,gBAAiBA,EACjB1C,wBAAyBA,EACzBE,eAAgBA,EAChBwK,iBAAkBA,EAClBzE,cAAeA,EACfrD,iBAAkBA,EAClBzC,cAAeA,EACfC,UAAWA,EACX0C,kBAAmBA,EACnBwH,mBAAoBA,EACpB3O,WAAYA,EACZ0E,wBAAyBA,EACzB0C,cAAeA,EACfC,YAAaA,EACbG,OAAQsH,EACRnK,iBAAkBA,IAa1B,OACI,kBAAC,EAAAiL,YAAW,CAACrT,WAAYA,EAAYuC,UAAU,2BAA2BsO,QAAQ,4BAC9E,kBAAC,EAAAnD,cAAa,KACV,kBAACkF,EAAoB,OAEzB,kBAAC5R,EAAA,EAAwB,CACrBd,UAfyB,WACjCmH,EAAQiM,QACZ,EAcYpS,QAZuB,WAC/B,IAAMqS,GAAkBC,EAAAA,EAAAA,QAAO,mBAAoB,CAAEC,QAAQ,IAC7DC,OAAOC,KAAKJ,EAAiB,SACjC,EAUYvT,WAAYyS,IAEhB,kBAAC,EAAAmB,YAAW,CACR1R,GAAG,+BACH5C,QAAQO,EAAAA,EAAAA,UAAS,oBACjBmQ,aA1DS,WAGjB,OAFA8C,GAAa,KACce,EAAAA,EAAAA,eAAc1T,SAAS2T,QAAS3T,SAAS2T,MAAMC,eAC/C1M,EAAQiM,SAAWZ,EAAerL,EACjE,GAwDY,kBAAC,EAAAkI,kBAAiB,CACdhN,UAAU,0BACVyR,aAAalH,EAAAA,EAAAA,aACb0C,cAAc,QAEd,kBAAC,EAAA/B,eAAc,KAAE2F,GACjB,kBAAC,EAAA1F,cAAa,KACV,yBACInL,UAAWyH,IAAW,kCAAmC,CACrD,kDAAkDzE,EAAAA,EAAAA,aAAc0C,KAGnEmL,IAGT,kBAAC,aAAc,CAACa,SAAU,+BACtB,yBACI1R,UAAWyH,IAAW,0BAA2B,CAC7C,0CAA0CzE,EAAAA,EAAAA,aAAc0C,EACxD,sBAAuBxE,KAG3B,kBAAC,EAAAgK,eAAc,KACX,kBAACmF,EAAoB,OAEzB,kBAAC,IAAW,CAACsB,QAASnG,EAAe/N,WAAYwS,IACjD,kBAAC,EAAA/E,eAAc,KACX,kBAAC0G,GAAW,CAACpG,cAAeA,EAAeqG,wBAAyBpM,KAExE,kBAAC,EAAA0F,cAAa,KACTyD,EACG,kBAAC,aAAc,KACX,kBAACG,GAAa,MACd,kBAAC,EAAA5H,iBAAgB,CAACnH,UAAU,6CACxB,kBAACuO,GAAY,MACb,kBAACqD,GAAW,QAIpB,kBAACA,GAAW,CACRpG,cAAeA,EACfqG,wBAAyBpM,SAUjE,IAEAmK,GAAetR,UAAY,CACvByH,YAAaxH,IAAAA,QAGjB,YAIA,IAAMqT,IAAclT,EAAAA,EAAAA,KAAS,YAAiC,IA6ChDoT,EA7CkBD,EAAuB,EAAvBA,wBACtB1T,GAAQ2K,EAAAA,EAAAA,KACd,GAAwCjK,EAAAA,EAAAA,MAAhC4P,EAAe,EAAfA,gBAAiBhD,EAAM,EAANA,OAAQ7M,EAAE,EAAFA,GACzB4P,EAA0DC,EAA1DD,eAAgBuD,EAA0CtD,EAA1CsD,YAAaC,EAA6BvD,EAA7BuD,iBAAkBC,EAAWxD,EAAXwD,OAEnDC,EAOA1D,EAPA0D,+BACAC,EAMA3D,EANA2D,gBACQC,EAKR5D,EALA6D,OACAzD,EAIAJ,EAJAI,kBACA0D,EAGA9D,EAHA8D,eACAC,EAEA/D,EAFA+D,cACAzR,EACA0N,EADA1N,cAEgBiH,EAA0BjH,EAAtCgJ,WAAoB0I,EAAkB1R,EAAlB0R,cACtBC,EAAwC,UAAhBV,GAA2C,mBAAhBA,EACjDW,EAA4DjH,EAA5DiH,oBAAqBC,EAAuClH,EAAvCkH,iBAAkBC,EAAqBnH,EAArBmH,iBACtBpH,EAAuE5M,EAAxFwR,gBAAgCyC,EAAwDjU,EAAxDiU,wBAAyBC,EAA+BlU,EAA/BkU,2BACzDC,EAAoDZ,EAApDY,UAAWC,EAAyCb,EAAzCa,WAAYC,EAA6Bd,EAA7Bc,YAAaC,EAAgBf,EAAhBe,YAQtCC,EAAkD,UADlCC,EAAAA,EAAAA,qBAAoBV,GACKW,KACzCC,EAAW,CACbC,SAAUZ,EAAiBa,cAC3BC,MAAOjI,IAAkB2H,EAA2B,OAAS,QAC7DO,SAAUb,EAA0B,SAAW,OAC/Cc,UAAWb,EACXc,kBAAkB,EAClBC,8BAA8B,GAE5BC,EAAkBrB,EAAwBN,EAAgB2B,qBAAkB1Q,EAC5E2Q,EAAYvB,EAAgBA,EAAcuB,UAAY,GACpDC,EAAyD7V,EAAzD6V,SAAUC,EAA+C9V,EAA/C8V,YAAaC,EAAkC/V,EAAlC+V,cAAeC,EAAmBhW,EAAnBgW,eAExCC,EAAiCC,GAAAA,EAAWjC,aAA4B,EAA5BA,EAA8B5T,MAE1E8V,EAAwB,WAC1B,OAAO/J,EAAAA,EAAAA,cAAeqE,CAC1B,EAcM2F,GAAmBC,EAAAA,EAAAA,aAAYvB,GAErC,OACI,kBAACwB,EAAA,GAAU,CACPC,SAAUpC,EACVqC,cAAeL,IAA0BnF,GAAqB,KAC9DyF,qBAAsB,KACtBC,UAAW7B,EACX8B,SAAU/B,EACVd,OAAQA,GAAU,KAClBjP,UAAUA,EAAAA,EAAAA,YACV+R,yBAAyBxK,EAAAA,EAAAA,aACzByK,oBAAoB,EACpB9B,YAAaA,EACb+B,WAAYf,EACZgB,cAAelB,EACfmB,oBAAqBhB,EACrBiB,WAAWpS,EAAAA,EAAAA,YAAa,OAAII,EAC5BiS,SAASrS,EAAAA,EAAAA,YAAa,OAAII,EAC1BkS,iBAAkBrB,EAClBX,SAAUA,EACViC,WAAYtC,EACZuC,cAAe1B,EACf2B,oBAAqBzD,EACrBjK,OAAQA,EACR2N,SAAU3B,EACV4B,WAAY1G,GACZ2G,mBAAoBhD,EACpBiD,cAEIhE,GAA2BkB,GAAaE,EAAcsB,EAE1DuB,yBAAyB,EACzBC,aA5CEjE,EAAe,CACjBtL,KAAKxD,EAAAA,EAAAA,YAAa,GAAK,IACvBgT,OAAQ1B,IAA0B,IAAM,MAGxCtR,EAAAA,EAAAA,cACA8O,EAAakE,OAAS,IAGnBlE,GAoCHmE,mBAAmBjT,EAAAA,EAAAA,YACnBkT,uBAC8D,aAA1DhK,EAAAA,EAAAA,sBAAoBC,EAAAA,EAAAA,mBAAkBrL,KAA0D,SAAzBA,EAAc4H,OAEzFyN,gCAAiCtE,EACjCuE,aAActV,GAEbyR,EAAcjO,KAAI,gBAAG+R,EAAc,EAAdA,eAAgBC,EAAa,EAAbA,cAAeC,EAAS,EAATA,UAAS,OAC1D,kBAAC,KAAW,CACR9R,IAAK8R,EACLD,cAAeA,EACfE,qBAAsBH,EACtBI,yBAA0BnC,KAC5B,IAELzC,KAA6BU,GAC1B,kBAAC,GAAyB,IACtBhD,iBAAkB6E,EAClB3P,IAAK2N,EAA6B3N,IAClC+G,cAAeA,EACf0H,YAAaA,EACbwD,wBAAsB,EACtBlH,mBAAoB0C,GAChBE,IAKxB,IAEAR,GAAYtT,UAAY,CACpBuT,wBAAyBtT,IAAAA,MCjT7B,IAAMoY,GAAgB,CAAC,qBAAsB,2BAEvCC,IAAWlY,EAAAA,EAAAA,KAAS,YAAwB,IAArBmY,EAAK,EAALA,MAAO/R,EAAO,EAAPA,QACxB2J,GAAoB5P,EAAAA,EAAAA,MAApB4P,gBAEJO,EAMAP,EANAO,mBACAb,EAKAM,EALAN,cACA2I,EAIArI,EAJAqI,WACAC,EAGAtI,EAHAsI,UAC+BhH,EAE/BtB,EAFAuI,8BAC4BlH,EAC5BrB,EADAwI,2BAWJ,OATAjR,IAAAA,WAAgB,WAGZ,OAFA8J,GAAS+G,EAAMK,OAAOnR,YAAajB,GAE5B,WACHkK,IACAe,GACJ,CACJ,GAAG,CAACD,EAASC,EAAWf,EAAoBlK,EAAS+R,EAAMK,OAAOnR,cAE9DrD,MAAMmU,EAAMK,OAAOnR,aACZ,kBAAC,EAAAoR,SAAQ,CAACC,GAAG,SAIpB,kBAAC,aAAc,KACVL,EACG,kBAAC,UAAc,CACX/Z,QAASmR,EACTlR,UAAW0Z,GAAcU,SAASP,GAClC5Z,eACIyZ,GAAcU,SAASP,IAAcxZ,EAAAA,EAAAA,UAAS,OAAQA,EAAAA,EAAAA,UAAS,sBAEnEH,gBAAiB,kBAAM2H,EAAQwS,KAAKpZ,EAAAA,OAAOC,MAAM,EACjDf,qBAAqB,IAGzB,kBAACoP,EAAA,EAAa,CACVC,IAAKsK,EACLrK,QAAS,IACTjF,WAAY,CACR8P,MAAO,kBACPC,UAAW,uBACXC,KAAM,kBAEVC,eAAa,GAEb,kBAAC,GAAc,CAAC3R,aAAc8Q,EAAMK,OAAOnR,YAAatB,KAAMoS,EAAMK,OAAOnR,eAK/F,IAEA6Q,GAAStY,UAAY,CACjBwG,QAASvG,IAAAA,OACTsY,MAAOtY,IAAAA,QAGX,MCpEA,IDoEe2O,EAAAA,EAAAA,YAAW0J,G","sources":["webpack://@deriv/trader/./src/App/Components/Elements/Errors/error-component.jsx","webpack://@deriv/trader/./src/App/Components/Elements/Errors/index.js","webpack://@deriv/trader/./src/App/Components/Elements/Modals/UnsupportedContractModal/unsupported-contract-modal.jsx","webpack://@deriv/trader/./src/App/Components/Elements/Modals/UnsupportedContractModal/index.js","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-audit-item.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-details.jsx","webpack://@deriv/trader/./src/Stores/Modules/Trading/Helpers/logic.js","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-history.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/contract-audit.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractAudit/index.js","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/swipeable-components.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/market-closed-contract-overlay.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/contract-drawer-card.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/contract-drawer.jsx","webpack://@deriv/trader/./src/App/Components/Elements/ContractDrawer/index.js","webpack://@deriv/trader/./src/Modules/Contract/Components/InfoBox/info-box-longcode.jsx","webpack://@deriv/trader/./src/Modules/Contract/Components/contract-error.jsx","webpack://@deriv/trader/./src/Modules/Contract/Components/InfoBox/info-box.jsx","webpack://@deriv/trader/./src/Modules/Contract/Components/InfoBox/index.js","webpack://@deriv/trader/./src/Modules/Contract/Containers/contract-replay-widget.jsx","webpack://@deriv/trader/./src/Modules/SmartChart/Components/Markers/delayed-accu-barriers-marker.tsx","webpack://@deriv/trader/./src/Modules/Contract/Containers/contract-replay.jsx","webpack://@deriv/trader/./src/Modules/Contract/Containers/contract.jsx","webpack://@deriv/trader/./src/Modules/Contract/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dialog, PageErrorContainer } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    is_dialog,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}) => {\n    const refresh_message = should_show_refresh ? localize('Please refresh this page to continue.') : '';\n\n    if (is_dialog) {\n        return (\n            <Dialog\n                title={header || localize('There was an error')}\n                is_visible\n                confirm_button_text={redirect_label || localize('Ok')}\n                onConfirm={redirectOnClick || (() => location.reload())}\n            >\n                {message || localize('Sorry, an error occured while processing your request.')}\n            </Dialog>\n        );\n    }\n    return (\n        <PageErrorContainer\n            error_header={header ?? ''}\n            error_messages={message ? [message, refresh_message] : []}\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label || localize('Refresh')]}\n            buttonOnClick={redirectOnClick || (() => location.reload())}\n        />\n    );\n};\n\nErrorComponent.propTypes = {\n    header: PropTypes.string,\n    is_dialog: PropTypes.bool,\n    message: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    redirect_label: PropTypes.string,\n    redirectOnClick: PropTypes.func,\n    should_show_refresh: PropTypes.bool,\n    type: PropTypes.string,\n};\n\nexport default ErrorComponent;\n","import ErrorComponent from './error-component.jsx';\n\nexport default ErrorComponent;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Dialog } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { website_name } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nconst UnsupportedContractModal = observer(({ onConfirm, onClose }) => {\n    const { ui } = useStore();\n    const { disableApp, enableApp, is_loading, is_unsupported_contract_modal_visible: is_visible } = ui;\n\n    return (\n        <Dialog\n            title={localize('We’re working on it')}\n            confirm_button_text={localize('Stay on {{website_domain}}', { website_domain: website_name })}\n            cancel_button_text={localize('Go to Binary.com')}\n            onConfirm={onConfirm}\n            onCancel={onClose}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading}\n            is_closed_on_cancel\n            is_visible={is_visible}\n        >\n            <Localize i18n_default_text='You’ve selected a trade type that is currently unsupported, but we’re working on it.' />\n        </Dialog>\n    );\n});\n\nUnsupportedContractModal.propTypes = {\n    onClose: PropTypes.func,\n    onConfirm: PropTypes.func,\n};\n\nexport default UnsupportedContractModal;\n","import UnsupportedContractModal from './unsupported-contract-modal.jsx';\n\nexport default UnsupportedContractModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { formatDate, formatTime } from '@deriv/shared';\nimport { Text } from '@deriv/components';\n\nconst ContractAuditItem = ({ icon, id, label, timestamp, value, value2 }) => (\n    <div id={id} className='contract-audit__grid' data-testid={id}>\n        {icon && <div className='contract-audit__icon'>{icon}</div>}\n        <div className='contract-audit__item'>\n            <Text size='xxxs' styles={{ lineHeight: 'unset' }} className='contract-audit__label'>\n                {label}\n            </Text>\n            <div className='contract-audit__value-wrapper'>\n                <Text weight='bold' size='xxs' line_height='m' color='prominent' className='contract-audit__value'>\n                    {value}\n                </Text>\n                {value2 && (\n                    <Text weight='bold' size='xxs' line_height='m' color='prominent' className='contract-audit__value2'>\n                        {value2}\n                    </Text>\n                )}\n            </div>\n        </div>\n        {timestamp && (\n            <div className='contract-audit__timestamp'>\n                <Text size='xxxs' align='right' line_height='xs' className='contract-audit__timestamp-value'>\n                    {formatDate(timestamp)}\n                </Text>\n                <Text size='xxxs' align='right' line_height='xs' className='contract-audit__timestamp-value'>\n                    {formatTime(timestamp)}\n                </Text>\n            </div>\n        )}\n    </div>\n);\n\nContractAuditItem.propTypes = {\n    icon: PropTypes.node,\n    id: PropTypes.string,\n    label: PropTypes.string,\n    timestamp: PropTypes.string,\n    value: PropTypes.PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.node]),\n    value2: PropTypes.PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nexport default ContractAuditItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Money, Icon, ThemedScrollbars } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport {\n    epochToMoment,\n    getCancellationPrice,\n    getCurrencyDisplayCode,\n    isAccumulatorContract,\n    isMobile,\n    isMultiplierContract,\n    isSmartTraderContract,\n    hasTwoBarriers,\n    isTurbosContract,\n    isUserSold,\n    isEndedBeforeCancellationExpired,\n    isUserCancelled,\n    toGMTFormat,\n} from '@deriv/shared';\nimport {\n    addCommaToNumber,\n    getBarrierLabel,\n    getBarrierValue,\n    isDigitType,\n} from 'App/Components/Elements/PositionsDrawer/helpers';\nimport ContractAuditItem from './contract-audit-item.jsx';\nimport { isCancellationExpired } from 'Stores/Modules/Trading/Helpers/logic';\n\nconst ContractDetails = ({ contract_end_time, contract_info, duration, duration_unit, exit_spot, is_vanilla }) => {\n    const {\n        commission,\n        contract_type,\n        currency,\n        entry_spot_display_value,\n        entry_tick_time,\n        exit_tick_time,\n        high_barrier,\n        profit,\n        date_start,\n        tick_count,\n        tick_passed,\n        transaction_ids: { buy, sell } = {},\n        low_barrier,\n        display_number_of_contracts,\n    } = contract_info;\n\n    const is_profit = profit >= 0;\n    const cancellation_price = getCancellationPrice(contract_info);\n    const show_barrier = !is_vanilla && !isAccumulatorContract(contract_type) && !isSmartTraderContract(contract_type);\n    const show_duration = !isAccumulatorContract(contract_type) || !isNaN(contract_end_time);\n    const show_payout_per_point = isTurbosContract(contract_type) || is_vanilla;\n    const ticks_duration_text = isAccumulatorContract(contract_type)\n        ? `${tick_passed}/${tick_count} ${localize('ticks')}`\n        : `${tick_count} ${tick_count < 2 ? localize('tick') : localize('ticks')}`;\n\n    const getLabel = () => {\n        if (isUserSold(contract_info) && isEndedBeforeCancellationExpired(contract_info))\n            return localize('Deal cancellation');\n        if (isUserCancelled(contract_info)) return localize('Deal cancellation (executed)');\n        if (isCancellationExpired(contract_info)) return localize('Deal cancellation (expired)');\n        return localize('Deal cancellation (active)');\n    };\n\n    return (\n        <ThemedScrollbars is_bypassed={isMobile()}>\n            <div className='contract-audit__tabs-content'>\n                <ContractAuditItem\n                    id='dt_id_label'\n                    icon={<Icon icon='IcContractId' size={24} />}\n                    label={localize('Reference ID')}\n                    value={localize('{{buy_value}} (Buy)', { buy_value: buy })}\n                    value2={sell ? localize('{{sell_value}} (Sell)', { sell_value: sell }) : undefined}\n                />\n                {isMultiplierContract(contract_type) ? (\n                    <React.Fragment>\n                        <ContractAuditItem\n                            id='dt_commission_label'\n                            icon={<Icon icon='IcContractCommission' size={24} />}\n                            label={localize('Commission')}\n                            value={<Money amount={commission} currency={currency} show_currency />}\n                        />\n                        {!!cancellation_price && (\n                            <ContractAuditItem\n                                id='dt_cancellation_label'\n                                icon={<Icon icon='IcContractSafeguard' size={24} />}\n                                label={getLabel()}\n                                value={<Money amount={cancellation_price} currency={currency} />}\n                            />\n                        )}\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        {show_duration && (\n                            <ContractAuditItem\n                                id='dt_duration_label'\n                                icon={<Icon icon='IcContractDuration' size={24} />}\n                                label={localize('Duration')}\n                                value={tick_count > 0 ? ticks_duration_text : `${duration} ${duration_unit}`}\n                            />\n                        )}\n                        {is_vanilla && (\n                            <ContractAuditItem\n                                id='dt_bt_label'\n                                icon={<Icon icon='IcContractStrike' size={24} />}\n                                label={getBarrierLabel(contract_info)}\n                                value={getBarrierValue(contract_info) || ' - '}\n                            />\n                        )}\n                        {show_barrier && (\n                            <ContractAuditItem\n                                id='dt_bt_label'\n                                icon={\n                                    isDigitType(contract_type) ? (\n                                        <Icon icon='IcContractTarget' size={24} />\n                                    ) : (\n                                        <Icon icon='IcContractBarrier' size={24} />\n                                    )\n                                }\n                                label={getBarrierLabel(contract_info)}\n                                value={getBarrierValue(contract_info) || ' - '}\n                            />\n                        )}\n                        {show_payout_per_point && (\n                            <ContractAuditItem\n                                id='dt_bt_label'\n                                icon={<Icon icon='IcContractPayout' size={24} />}\n                                label={localize('Payout per point')}\n                                value={`${display_number_of_contracts} ${getCurrencyDisplayCode(currency)}` || ' - '}\n                            />\n                        )}\n                    </React.Fragment>\n                )}\n                {hasTwoBarriers(contract_type) && (\n                    <React.Fragment>\n                        {[high_barrier, low_barrier].map((barrier, index) => (\n                            <ContractAuditItem\n                                id={`dt_bt_label_${index + 1}`}\n                                icon={<Icon icon='IcContractStrike' size={24} />}\n                                key={barrier}\n                                label={high_barrier === barrier ? localize('High barrier') : localize('Low barrier')}\n                                value={barrier}\n                            />\n                        ))}\n                    </React.Fragment>\n                )}\n                <ContractAuditItem\n                    id='dt_start_time_label'\n                    icon={<Icon icon='IcContractStartTime' size={24} />}\n                    label={localize('Start time')}\n                    value={toGMTFormat(epochToMoment(date_start)) || ' - '}\n                />\n                {!isDigitType(contract_type) && (\n                    <ContractAuditItem\n                        id='dt_entry_spot_label'\n                        icon={<Icon icon='IcContractEntrySpot' size={24} />}\n                        label={localize('Entry spot')}\n                        value={addCommaToNumber(entry_spot_display_value) || ' - '}\n                        value2={toGMTFormat(epochToMoment(entry_tick_time)) || ' - '}\n                    />\n                )}\n                {!isNaN(exit_spot) && (\n                    <ContractAuditItem\n                        id='dt_exit_spot_label'\n                        icon={<Icon icon='IcContractExitSpot' size={24} />}\n                        label={localize('Exit spot')}\n                        value={addCommaToNumber(exit_spot) || ' - '}\n                        value2={toGMTFormat(epochToMoment(exit_tick_time)) || ' - '}\n                    />\n                )}\n                {!isNaN(contract_end_time) && (\n                    <ContractAuditItem\n                        id='dt_exit_time_label'\n                        icon={<Icon icon='IcContractExitTime' color={is_profit ? 'green' : 'red'} size={24} />}\n                        label={localize('Exit time')}\n                        value={toGMTFormat(epochToMoment(contract_end_time)) || ' - '}\n                    />\n                )}\n            </div>\n        </ThemedScrollbars>\n    );\n};\n\nContractDetails.propTypes = {\n    contract_end_time: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    contract_info: PropTypes.object,\n    date_start: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    duration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    duration_unit: PropTypes.string,\n    exit_spot: PropTypes.string,\n    is_vanilla: PropTypes.bool,\n};\n\nexport default ContractDetails;\n","import ServerTime from '_common/base/server_time';\n\nexport const isCancellationExpired = contract_info =>\n    !!(contract_info.cancellation.date_expiry < ServerTime.get().unix());\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Icon, Money, ThemedScrollbars, Text } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\n\nimport { localize } from '@deriv/translations';\nimport ContractAuditItem from './contract-audit-item.jsx';\n\nconst ContractHistory = ({ currency, history = [] }) => {\n    if (!history.length) {\n        return (\n            <div className='contract-audit__empty'>\n                <Icon icon='IcBox' size={48} color='secondary' />\n                <h4 className='contract-audit__empty-header'>{localize('No history')}</h4>\n                <Text align='center' line_height='s' color='less-prominent' size='xxs'>\n                    {localize('You have yet to update either take profit or stop loss')}\n                </Text>\n            </div>\n        );\n    }\n    return (\n        <ThemedScrollbars is_bypassed={isMobile()}>\n            <div className='contract-audit__tabs-content'>\n                {history.map((item, key) => (\n                    <ContractAuditItem\n                        key={key}\n                        id={`dt_history_label_${key}`}\n                        label={item.display_name}\n                        timestamp={+item.order_date}\n                        value={\n                            Math.abs(+item.order_amount) !== 0 ? (\n                                <React.Fragment>\n                                    {+item.order_amount < 0 && <strong>-</strong>}\n                                    <Money amount={item.order_amount} currency={currency} />\n                                    {item.value && (\n                                        <React.Fragment>\n                                            <br />\n                                            <span>({item.value})</span>\n                                        </React.Fragment>\n                                    )}\n                                </React.Fragment>\n                            ) : (\n                                localize('Cancelled')\n                            )\n                        }\n                    />\n                ))}\n            </div>\n        </ThemedScrollbars>\n    );\n};\n\nContractHistory.propTypes = {\n    currency: PropTypes.string,\n    history: PropTypes.array,\n};\n\nexport default ContractHistory;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Tabs } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { WS } from '@deriv/shared';\nimport ContractDetails from './contract-details';\nimport ContractHistory from './contract-history.jsx';\n\nconst ContractAudit = ({\n    contract_update_history,\n    has_result,\n    is_accumulator,\n    is_multiplier,\n    is_smarttrader_contract,\n    is_turbos,\n    toggleHistoryTab,\n    ...props\n}) => {\n    const { contract_id, currency } = props.contract_info;\n    const [update_history, setUpdateHistory] = React.useState([]);\n\n    const getSortedUpdateHistory = history => history.sort((a, b) => b.order_date - a.order_date);\n\n    React.useEffect(() => {\n        if (!!contract_update_history.length && contract_update_history.length > update_history.length)\n            setUpdateHistory(getSortedUpdateHistory(contract_update_history));\n    }, [contract_update_history, update_history]);\n\n    const onTabItemClick = tab_index => {\n        toggleHistoryTab(tab_index);\n        if (tab_index) {\n            WS.contractUpdateHistory(contract_id).then(response => {\n                setUpdateHistory(getSortedUpdateHistory(response.contract_update_history));\n            });\n        }\n    };\n\n    if (!has_result) return null;\n\n    if (!is_multiplier && !is_accumulator && !is_turbos) {\n        return (\n            <div className='contract-audit__wrapper'>\n                <ContractDetails {...props} />\n            </div>\n        );\n    }\n    return (\n        <div className='contract-audit__wrapper'>\n            <Tabs top className='contract-audit__tabs' onTabItemClick={onTabItemClick}>\n                <div label={localize('Details')}>\n                    <ContractDetails {...props} />\n                </div>\n                <div label={localize('History')}>\n                    <ContractHistory currency={currency} history={update_history} />\n                </div>\n            </Tabs>\n        </div>\n    );\n};\n\nContractAudit.propTypes = {\n    contract_info: PropTypes.object,\n    contract_update_history: PropTypes.array,\n    has_result: PropTypes.bool,\n    is_accumulator: PropTypes.bool,\n    is_multiplier: PropTypes.bool,\n    is_smarttrader_contract: PropTypes.bool,\n    is_turbos: PropTypes.bool,\n    toggleHistoryTab: PropTypes.func,\n};\n\nexport default ContractAudit;\n","import ContractAudit from './contract-audit.jsx';\n\nexport default ContractAudit;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SwipeableWrapper } from '@deriv/components';\n\n/**\n * Swipeable components\n */\nexport const SwipeableContractAudit = ({ is_multiplier, children, onSwipedDown }) => {\n    const swipe_handlers = SwipeableWrapper.useSwipeable({\n        onSwipedDown,\n    });\n\n    const target_el = document.getElementById('dt_contract_drawer_audit');\n\n    if (!target_el) return null;\n\n    return ReactDOM.createPortal(\n        <div className='contract-audit-card'>\n            <div\n                {...swipe_handlers}\n                className={classNames('contract-audit-card__container', {\n                    'contract-audit-card__container--is-multiplier': is_multiplier,\n                })}\n            >\n                {children}\n            </div>\n        </div>,\n        target_el\n    );\n};\n\nSwipeableContractAudit.propTypes = {\n    is_multiplier: PropTypes.bool,\n    children: PropTypes.node,\n    onSwipedDown: PropTypes.func,\n};\n\nexport const SwipeableContractDrawer = ({ children, onSwipedDown, onSwipedUp }) => {\n    const swipe_handlers = SwipeableWrapper.useSwipeable({\n        onSwipedDown,\n        onSwipedUp,\n    });\n\n    return <div {...swipe_handlers}>{children}</div>;\n};\n\nSwipeableContractDrawer.propTypes = {\n    children: PropTypes.node,\n    onSwipedDown: PropTypes.func,\n    onSwipedUp: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from '@deriv/components';\n\nconst MarketClosedContractOverlay = ({ validation_error }) => (\n    <div className='contract-card__market-closed'>\n        <Text align='center' as='p' className='contract-card__market-closed__title' weight='bold'>\n            {validation_error}\n        </Text>\n    </div>\n);\n\nMarketClosedContractOverlay.propTypes = {\n    symbol: PropTypes.string,\n};\n\nexport default MarketClosedContractOverlay;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { DesktopWrapper, MobileWrapper, Collapsible, ContractCard, useHover } from '@deriv/components';\nimport { isCryptoContract, isDesktop, getEndTime, getSymbolDisplayName } from '@deriv/shared';\nimport { getCardLabels, getContractTypeDisplay } from 'Constants/contract';\nimport { getMarketInformation } from 'Utils/Helpers/market-underlying';\nimport { SwipeableContractDrawer } from './swipeable-components.jsx';\nimport MarketClosedContractOverlay from './market-closed-contract-overlay.jsx';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { observer, useStore } from '@deriv/stores';\n\nconst ContractDrawerCard = observer(\n    ({\n        contract_info,\n        contract_update,\n        currency,\n        is_accumulator,\n        is_collapsed,\n        is_market_closed,\n        is_mobile,\n        is_multiplier,\n        is_vanilla,\n        is_smarttrader_contract,\n        is_sell_requested,\n        is_turbos,\n        onClickCancel,\n        onClickSell,\n        onSwipedUp,\n        onSwipedDown,\n        result,\n        server_time,\n        status,\n        toggleContractAuditDrawer,\n    }) => {\n        const { ui, contract_trade } = useStore();\n        const { active_symbols } = useTraderStore();\n        const {\n            addToast,\n            current_focus,\n            removeToast,\n            should_show_cancellation_warning,\n            setCurrentFocus,\n            toggleCancellationWarning,\n        } = ui;\n        const { getContractById } = contract_trade;\n        const [hover_ref, should_hide_closed_overlay] = useHover();\n\n        const { profit, validation_error } = contract_info;\n        const is_sold = !!getEndTime(contract_info);\n        const display_name = getSymbolDisplayName(\n            active_symbols,\n            getMarketInformation(contract_info.shortcode).underlying\n        );\n\n        const is_crypto = isCryptoContract(contract_info.underlying);\n        const has_progress_slider = !is_multiplier || (is_crypto && is_multiplier);\n\n        const card_header = (\n            <ContractCard.Header\n                contract_info={contract_info}\n                display_name={display_name}\n                getCardLabels={getCardLabels}\n                getContractTypeDisplay={getContractTypeDisplay}\n                has_progress_slider={isDesktop() && has_progress_slider}\n                is_mobile={is_mobile}\n                is_sell_requested={is_sell_requested}\n                is_sold={is_sold}\n                onClickSell={onClickSell}\n                server_time={server_time}\n            />\n        );\n\n        const card_body = (\n            <ContractCard.Body\n                addToast={addToast}\n                contract_info={contract_info}\n                contract_update={contract_update}\n                currency={currency}\n                current_focus={current_focus}\n                getCardLabels={getCardLabels}\n                getContractById={getContractById}\n                is_accumulator={is_accumulator}\n                is_mobile={is_mobile}\n                is_multiplier={is_multiplier}\n                is_sold={is_sold}\n                is_turbos={is_turbos}\n                is_vanilla={is_vanilla}\n                has_progress_slider={has_progress_slider}\n                removeToast={removeToast}\n                server_time={server_time}\n                setCurrentFocus={setCurrentFocus}\n                should_show_cancellation_warning={should_show_cancellation_warning}\n                status={status}\n                toggleCancellationWarning={toggleCancellationWarning}\n            />\n        );\n\n        const card_footer = (\n            <ContractCard.Footer\n                contract_info={contract_info}\n                getCardLabels={getCardLabels}\n                is_multiplier={is_multiplier}\n                is_sell_requested={is_sell_requested}\n                onClickCancel={onClickCancel}\n                onClickSell={onClickSell}\n                server_time={server_time}\n                status={status}\n            />\n        );\n\n        const contract_el = (\n            <React.Fragment>\n                {card_header}\n                {card_body}\n            </React.Fragment>\n        );\n\n        const contract_card = (\n            <ContractCard\n                contract_info={contract_info}\n                getCardLabels={getCardLabels}\n                is_multiplier={is_multiplier}\n                profit_loss={profit}\n                should_show_result_overlay={false}\n            >\n                <div\n                    className={classNames('dc-contract-card', {\n                        'dc-contract-card--green': profit > 0 && !result,\n                        'dc-contract-card--red': profit < 0 && !result,\n                        'contract-card__market-closed--disabled': is_market_closed && should_hide_closed_overlay,\n                    })}\n                    ref={hover_ref}\n                >\n                    {is_market_closed && !getEndTime(contract_info) && (\n                        <div\n                            className={classNames({\n                                'contract-card__market-closed--hidden': isDesktop() && should_hide_closed_overlay,\n                            })}\n                        >\n                            <MarketClosedContractOverlay validation_error={validation_error} />\n                        </div>\n                    )}\n                    {contract_el}\n                    {card_footer}\n                </div>\n            </ContractCard>\n        );\n\n        const has_swipeable_drawer =\n            is_sold || is_multiplier || is_accumulator || is_vanilla || is_turbos || is_smarttrader_contract;\n\n        return (\n            <React.Fragment>\n                <DesktopWrapper>{contract_card}</DesktopWrapper>\n                <MobileWrapper>\n                    <SwipeableContractDrawer\n                        onSwipedUp={has_swipeable_drawer ? onSwipedUp : undefined}\n                        onSwipedDown={has_swipeable_drawer ? onSwipedDown : undefined}\n                    >\n                        {has_swipeable_drawer && (\n                            <Collapsible.ArrowButton onClick={toggleContractAuditDrawer} is_collapsed={is_collapsed} />\n                        )}\n                        {contract_card}\n                    </SwipeableContractDrawer>\n                </MobileWrapper>\n            </React.Fragment>\n        );\n    }\n);\n\nContractDrawerCard.propTypes = {\n    currency: PropTypes.string,\n    is_accumulator: PropTypes.bool,\n    is_smarttrader_contract: PropTypes.bool,\n    is_collapsed: PropTypes.bool,\n    is_turbos: PropTypes.bool,\n    onClickCancel: PropTypes.func,\n    onClickSell: PropTypes.func,\n};\nexport default ContractDrawerCard;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { CSSTransition } from 'react-transition-group';\nimport { DesktopWrapper, MobileWrapper, Div100vhContainer } from '@deriv/components';\nimport {\n    isUserSold,\n    isMobile,\n    getDurationPeriod,\n    getDurationTime,\n    getDurationUnitText,\n    getEndTime,\n} from '@deriv/shared';\nimport ContractAudit from 'App/Components/Elements/ContractAudit';\nimport { PositionsCardLoader } from 'App/Components/Elements/ContentLoader';\nimport ContractDrawerCard from './contract-drawer-card';\nimport { SwipeableContractAudit } from './swipeable-components.jsx';\nimport { observer, useStore } from '@deriv/stores';\n\nconst ContractDrawer = observer(\n    ({\n        contract_info,\n        contract_update,\n        contract_update_history,\n        is_accumulator,\n        is_sell_requested,\n        is_dark_theme,\n        is_market_closed,\n        is_multiplier,\n        is_turbos,\n        is_vanilla,\n        is_smarttrader_contract,\n        onClickCancel,\n        onClickSell,\n        status,\n        toggleHistoryTab,\n    }) => {\n        const { common, ui } = useStore();\n        const { server_time } = common;\n        const { is_mobile } = ui;\n        const { currency, exit_tick_display_value, is_sold } = contract_info;\n        const contract_drawer_ref = React.useRef();\n        const contract_drawer_card_ref = React.useRef();\n        const [should_show_contract_audit, setShouldShowContractAudit] = React.useState(false);\n        const exit_spot =\n            isUserSold(contract_info) && !is_accumulator && !is_multiplier && !is_turbos\n                ? '-'\n                : exit_tick_display_value;\n\n        const contract_audit = (\n            <ContractAudit\n                contract_info={contract_info}\n                contract_update_history={contract_update_history}\n                contract_end_time={getEndTime(contract_info)}\n                is_accumulator={is_accumulator}\n                is_dark_theme={is_dark_theme}\n                is_multiplier={is_multiplier}\n                is_smarttrader_contract={is_smarttrader_contract}\n                is_open\n                is_turbos={is_turbos}\n                duration={getDurationTime(contract_info)}\n                duration_unit={getDurationUnitText(getDurationPeriod(contract_info))}\n                exit_spot={exit_spot}\n                has_result={\n                    !!is_sold || is_multiplier || is_vanilla || is_turbos || is_accumulator || is_smarttrader_contract\n                }\n                toggleHistoryTab={toggleHistoryTab}\n                is_vanilla={is_vanilla}\n            />\n        );\n\n        if (!contract_info) return null;\n\n        // For non-binary contract, the status is always null, so we check for is_expired in contract_info\n        const fallback_result = contract_info.status || contract_info.is_expired;\n\n        const body_content = fallback_result ? (\n            <React.Fragment>\n                <ContractDrawerCard\n                    contract_info={contract_info}\n                    contract_update={contract_update}\n                    currency={currency}\n                    is_accumulator={is_accumulator}\n                    is_mobile={is_mobile}\n                    is_market_closed={is_market_closed}\n                    is_multiplier={is_multiplier}\n                    is_turbos={is_turbos}\n                    is_vanilla={is_vanilla}\n                    is_sell_requested={is_sell_requested}\n                    is_smarttrader_contract={is_smarttrader_contract}\n                    is_collapsed={should_show_contract_audit}\n                    onClickCancel={onClickCancel}\n                    onClickSell={onClickSell}\n                    onSwipedUp={() => setShouldShowContractAudit(true)}\n                    onSwipedDown={() => setShouldShowContractAudit(false)}\n                    server_time={server_time}\n                    status={status}\n                    toggleContractAuditDrawer={() => setShouldShowContractAudit(!should_show_contract_audit)}\n                />\n                <DesktopWrapper>{contract_audit}</DesktopWrapper>\n            </React.Fragment>\n        ) : (\n            <div className='contract-card'>\n                <PositionsCardLoader is_dark_theme={is_dark_theme} speed={2} />\n            </div>\n        );\n\n        const contract_drawer = (\n            <CSSTransition in={should_show_contract_audit} timeout={250} classNames='contract-drawer__transition'>\n                <div\n                    id='dt_contract_drawer'\n                    className={classNames('contract-drawer', {\n                        'contract-drawer--with-collapsible-btn':\n                            !!getEndTime(contract_info) ||\n                            ((is_multiplier || is_vanilla || is_turbos || is_accumulator || is_smarttrader_contract) &&\n                                isMobile()),\n                        'contract-drawer--is-multiplier': is_multiplier && isMobile(),\n                        'contract-drawer--is-multiplier-sold': is_multiplier && isMobile() && getEndTime(contract_info),\n                    })}\n                    style={{\n                        transform:\n                            should_show_contract_audit &&\n                            contract_drawer_ref.current &&\n                            contract_drawer_card_ref.current &&\n                            `translateY(calc(${contract_drawer_card_ref.current.clientHeight}px - ${contract_drawer_ref.current.clientHeight}px))`,\n                    }}\n                    ref={contract_drawer_ref}\n                >\n                    <div className='contract-drawer__body' ref={contract_drawer_card_ref}>\n                        {body_content}\n                    </div>\n                    {should_show_contract_audit && (\n                        <MobileWrapper>\n                            <div id='dt_contract_drawer_audit'>\n                                <SwipeableContractAudit is_multiplier={is_multiplier}>\n                                    {contract_audit}\n                                </SwipeableContractAudit>\n                            </div>\n                        </MobileWrapper>\n                    )}\n                </div>\n            </CSSTransition>\n        );\n\n        return (\n            <React.Fragment>\n                <DesktopWrapper>{contract_drawer}</DesktopWrapper>\n                <MobileWrapper>\n                    <div\n                        style={{\n                            height: contract_drawer_card_ref.current?.clientHeight,\n                        }}\n                    >\n                        <Div100vhContainer height_offset='40px' is_bypassed={!contract_drawer_card_ref.current}>\n                            {contract_drawer}\n                        </Div100vhContainer>\n                    </div>\n                </MobileWrapper>\n            </React.Fragment>\n        );\n    }\n);\n\nContractDrawer.propTypes = {\n    is_accumulator: PropTypes.bool,\n    is_multiplier: PropTypes.bool,\n    is_vanilla: PropTypes.bool,\n    is_smarttrader_contract: PropTypes.bool,\n    is_turbos: PropTypes.bool,\n    toggleHistoryTab: PropTypes.func,\n};\n\nexport default withRouter(ContractDrawer);\n","import ContractDrawer from './contract-drawer.jsx';\n\nexport default ContractDrawer;\n","import { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\nconst InfoBoxLongcode = ({ contract_info }) => {\n    const max_longcode_length = 150;\n    const [is_collapsed, setIsCollapsed] = React.useState(true);\n\n    const handleToggle = () => {\n        setIsCollapsed(!is_collapsed);\n    };\n\n    return (\n        <div className='info-box-longcode'>\n            <Icon icon='IcContractFlag' className='info-box-longcode-icon' size={24} />\n            <div className='info-box-longcode-wrapper'>\n                <Text\n                    size='xs'\n                    className={classNames('info-box-longcode-text', {\n                        'info-box-longcode-text--collapsed': is_collapsed,\n                    })}\n                >\n                    {contract_info.longcode}\n                </Text>\n                {` `}\n                {contract_info.longcode.length > max_longcode_length && (\n                    <Text as='a' href='#' size='xs' onClick={handleToggle} c>\n                        {is_collapsed ? localize('View more') : localize('View less')}\n                    </Text>\n                )}\n            </div>\n        </div>\n    );\n};\n\nInfoBoxLongcode.propTypes = {\n    contract_info: PropTypes.object,\n    longcode: PropTypes.string,\n    is_vanilla: PropTypes.bool,\n};\n\nexport default observer(InfoBoxLongcode);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Icon } from '@deriv/components';\n\n// TODO: move to App/Components, Refactor svg, consider other types, more features;\n// when a general design and more icons for all messages is ready\nconst ContractError = ({ message = '', onClickClose }) =>\n    !message ? null : (\n        <div className='message'>\n            <div className='message-icon'>\n                <svg width='16' height='16' viewBox='0 0 16 16'>\n                    <g fill='none' fillRule='evenodd'>\n                        <circle cx='8' cy='8' r='8' fill='#F44336' />\n                        <path\n                            fill='#FFF'\n                            fillRule='nonzero'\n                            d='M8 7.293l3.146-3.147a.5.5 0 0 1 .708.708L8.707 8l3.147 3.146a.5.5 0 0 1-.708.708L8 8.707l-3.146 3.147a.5.5 0 0 1-.708-.708L7.293 8 4.146 4.854a.5.5 0 1 1 .708-.708L8 7.293z'\n                        />\n                    </g>\n                </svg>\n            </div>\n            <div className='message-text'>{message}</div>\n            <div className='message-close' onClick={onClickClose}>\n                <Icon icon='IcCross' />\n            </div>\n        </div>\n    );\n\nContractError.propTypes = {\n    message: PropTypes.string,\n    onClickClose: PropTypes.func,\n};\n\nexport default ContractError;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { SlideIn } from 'App/Components/Animations';\nimport InfoBoxLongcode from './info-box-longcode.jsx';\nimport ContractError from '../contract-error.jsx';\n\nconst InfoBox = ({ contract_info, error_message, removeError }) => {\n    const is_ready = !!contract_info.longcode;\n    return (\n        <SlideIn is_visible={is_ready} className='info-box-container' keyname='info-box-container'>\n            {!!contract_info.contract_type && (\n                <div className='info-box'>\n                    <InfoBoxLongcode contract_info={contract_info} />\n                </div>\n            )}\n            <ContractError message={error_message} onClickClose={removeError} />\n        </SlideIn>\n    );\n};\n\nInfoBox.propTypes = {\n    contract_info: PropTypes.object,\n    error_message: PropTypes.string,\n    removeError: PropTypes.func,\n};\n\nexport default InfoBox;\n","import InfoBox from './info-box.jsx';\n\nexport default InfoBox;\n","import React from 'react';\nimport Digits from 'Modules/Contract/Components/Digits';\nimport InfoBox from 'Modules/Contract/Components/InfoBox';\nimport BottomWidgets from '../../SmartChart/Components/bottom-widgets.jsx';\nimport TopWidgets from '../../SmartChart/Components/top-widgets.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nexport const DigitsWidget = observer(() => {\n    const { contract_replay } = useStore();\n    const { contract_store } = contract_replay;\n    const { contract_info, digits_info, display_status, is_digit_contract, is_ended } = contract_store;\n\n    return (\n        <Digits\n            is_digit_contract={is_digit_contract}\n            is_ended={is_ended}\n            contract_info={contract_info}\n            digits_info={digits_info}\n            display_status={display_status}\n        />\n    );\n});\n\nexport const InfoBoxWidget = observer(() => {\n    const { contract_replay } = useStore();\n    const { is_vanilla } = useTraderStore();\n    const { contract_store, removeErrorMessage: removeError, error_message } = contract_replay;\n    const { contract_info } = contract_store;\n\n    return (\n        <InfoBox\n            contract_info={contract_info}\n            error_message={error_message}\n            removeError={removeError}\n            is_vanilla={is_vanilla}\n        />\n    );\n});\n\n// Chart widgets passed into SmartCharts\nexport const ChartTopWidgets = () => <TopWidgets InfoBox={<InfoBoxWidget />} is_title_enabled={false} />;\nexport const ChartBottomWidgets = () => <BottomWidgets Widget={<DigitsWidget />} />;\n","import { TContractInfo } from '@deriv/shared';\nimport React from 'react';\n\ntype TDelayedAccuBarriersMarkerProps = {\n    epoch_array: number[];\n    contract_info: TContractInfo;\n    granularity?: number;\n    is_dark_theme?: boolean;\n    is_in_contract_details?: boolean;\n    marker_component: React.ComponentType<\n        Omit<TDelayedAccuBarriersMarkerProps, 'previous_spot_time' | 'marker_component'>\n    >;\n    previous_spot_time: number | null;\n    price_array: number[];\n    type: string;\n};\n\nconst DelayedAccuBarriersMarker = React.memo(\n    ({ marker_component: MarkerComponent, ...props }: TDelayedAccuBarriersMarkerProps) => (\n        <MarkerComponent {...{ ...props, previous_spot_time: undefined }} />\n    ), // barrier range will get updated only when previous_spot_time changes:\n    (prevProps, nextProps) => prevProps.previous_spot_time === nextProps.previous_spot_time\n);\nDelayedAccuBarriersMarker.displayName = 'DelayedAccuBarriersMarker';\n\nexport default DelayedAccuBarriersMarker;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n    DesktopWrapper,\n    Div100vhContainer,\n    MobileWrapper,\n    PageOverlay,\n    SwipeableWrapper,\n    FadeWrapper,\n    usePrevious,\n} from '@deriv/components';\nimport {\n    getDurationPeriod,\n    getDurationUnitText,\n    getPlatformRedirect,\n    isAccumulatorContract,\n    isDesktop,\n    isEmptyObject,\n    isMobile,\n    isMultiplierContract,\n    isTurbosContract,\n    isVanillaContract,\n    isSmartTraderContract,\n    urlFor,\n} from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport ChartLoader from 'App/Components/Elements/chart-loader.jsx';\nimport ContractDrawer from 'App/Components/Elements/ContractDrawer';\nimport UnsupportedContractModal from 'App/Components/Elements/Modals/UnsupportedContractModal';\nimport { SmartChart } from 'Modules/SmartChart';\nimport { ChartBottomWidgets, ChartTopWidgets, DigitsWidget, InfoBoxWidget } from './contract-replay-widget.jsx';\nimport ChartMarker from 'Modules/SmartChart/Components/Markers/marker.jsx';\nimport DelayedAccuBarriersMarker from 'Modules/SmartChart/Components/Markers/delayed-accu-barriers-marker';\nimport allMarkers from 'Modules/SmartChart/Components/all-markers.jsx';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\n\nconst ContractReplay = observer(({ contract_id }) => {\n    const { common, contract_replay, ui } = useStore();\n    const { contract_store } = contract_replay;\n    const {\n        is_market_closed,\n        is_sell_requested,\n        is_valid_to_cancel,\n        onClickCancel,\n        onClickSell,\n        onMount,\n        onUnmount,\n        indicative_status,\n        is_chart_loading,\n        is_forward_starting,\n    } = contract_replay;\n    const { contract_info, contract_update, contract_update_history, is_digit_contract } = contract_store;\n    const { routeBackInApp } = common;\n    const { is_dark_mode_on: is_dark_theme, notification_messages_ui: NotificationMessages, toggleHistoryTab } = ui;\n\n    const [is_visible, setIsVisible] = React.useState(false);\n    const history = useHistory();\n\n    React.useEffect(() => {\n        const url_contract_id = +/[^/]*$/.exec(location.pathname)[0];\n        onMount(contract_id || url_contract_id);\n        setIsVisible(true);\n\n        return () => {\n            setIsVisible(false);\n            onUnmount();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [contract_id, location, onMount, onUnmount]);\n\n    const onClickClose = () => {\n        setIsVisible(false);\n        const is_from_table_row = !isEmptyObject(location.state) ? location.state.from_table_row : false;\n        return is_from_table_row ? history.goBack() : routeBackInApp(history);\n    };\n\n    if (!contract_info.underlying) return null;\n\n    const is_accumulator = isAccumulatorContract(contract_info.contract_type);\n    const is_multiplier = isMultiplierContract(contract_info.contract_type);\n    const is_turbos = isTurbosContract(contract_info.contract_type);\n    const is_vanilla = isVanillaContract(contract_info.contract_type);\n    const is_smarttrader_contract = isSmartTraderContract(contract_info.contract_type);\n\n    const contract_drawer_el = (\n        <ContractDrawer\n            contract_info={contract_info}\n            contract_update={contract_update}\n            contract_update_history={contract_update_history}\n            is_accumulator={is_accumulator}\n            is_chart_loading={is_chart_loading}\n            is_dark_theme={is_dark_theme}\n            is_market_closed={is_market_closed}\n            is_multiplier={is_multiplier}\n            is_turbos={is_turbos}\n            is_sell_requested={is_sell_requested}\n            is_valid_to_cancel={is_valid_to_cancel}\n            is_vanilla={is_vanilla}\n            is_smarttrader_contract={is_smarttrader_contract}\n            onClickCancel={onClickCancel}\n            onClickSell={onClickSell}\n            status={indicative_status}\n            toggleHistoryTab={toggleHistoryTab}\n        />\n    );\n\n    const unsupportedContractOnConfirm = () => {\n        history.goBack();\n    };\n\n    const unsupportedContractOnClose = () => {\n        const statementws_url = urlFor('user/statementws', { legacy: true });\n        window.open(statementws_url, '_blank');\n    };\n\n    return (\n        <FadeWrapper is_visible={is_visible} className='contract-details-wrapper' keyname='contract-details-wrapper'>\n            <MobileWrapper>\n                <NotificationMessages />\n            </MobileWrapper>\n            <UnsupportedContractModal\n                onConfirm={unsupportedContractOnConfirm}\n                onClose={unsupportedContractOnClose}\n                is_visible={is_forward_starting}\n            />\n            <PageOverlay\n                id='dt_contract_replay_container'\n                header={localize('Contract details')}\n                onClickClose={onClickClose}\n            >\n                <Div100vhContainer\n                    className='trade-container__replay'\n                    is_disabled={isDesktop()}\n                    height_offset='80px' // * 80px = header + contract details header heights in mobile\n                >\n                    <DesktopWrapper>{contract_drawer_el}</DesktopWrapper>\n                    <MobileWrapper>\n                        <div\n                            className={classNames('contract-drawer__mobile-wrapper', {\n                                'contract-drawer__mobile-wrapper--is-multiplier': isMobile() && is_multiplier,\n                            })}\n                        >\n                            {contract_drawer_el}\n                        </div>\n                    </MobileWrapper>\n                    <React.Suspense fallback={<div />}>\n                        <div\n                            className={classNames('replay-chart__container', {\n                                'replay-chart__container--is-multiplier': isMobile() && is_multiplier,\n                                'vanilla-trade-chart': is_vanilla,\n                            })}\n                        >\n                            <DesktopWrapper>\n                                <NotificationMessages />\n                            </DesktopWrapper>\n                            <ChartLoader is_dark={is_dark_theme} is_visible={is_chart_loading} />\n                            <DesktopWrapper>\n                                <ReplayChart is_dark_theme={is_dark_theme} is_accumulator_contract={is_accumulator} />\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                {is_digit_contract ? (\n                                    <React.Fragment>\n                                        <InfoBoxWidget />\n                                        <SwipeableWrapper className='replay-chart__container-swipeable-wrapper'>\n                                            <DigitsWidget />\n                                            <ReplayChart />\n                                        </SwipeableWrapper>\n                                    </React.Fragment>\n                                ) : (\n                                    <ReplayChart\n                                        is_dark_theme={is_dark_theme}\n                                        is_accumulator_contract={is_accumulator}\n                                    />\n                                )}\n                            </MobileWrapper>\n                        </div>\n                    </React.Suspense>\n                </Div100vhContainer>\n            </PageOverlay>\n        </FadeWrapper>\n    );\n});\n\nContractReplay.propTypes = {\n    contract_id: PropTypes.number,\n};\n\nexport default ContractReplay;\n\n// CHART -----------------------------------------\n\nconst ReplayChart = observer(({ is_accumulator_contract }) => {\n    const trade = useTraderStore();\n    const { contract_replay, common, ui } = useStore();\n    const { contract_store, chart_state, chartStateChange, margin } = contract_replay;\n    const {\n        accumulator_previous_spot_time,\n        contract_config,\n        marker: accumulators_barriers_marker,\n        is_digit_contract,\n        barriers_array,\n        markers_array,\n        contract_info,\n    } = contract_store;\n    const { underlying: symbol, audit_details } = contract_info;\n    const allow_scroll_to_epoch = chart_state === 'READY' || chart_state === 'SCROLL_TO_LEFT';\n    const { app_routing_history, current_language, is_socket_opened } = common;\n    const { is_dark_mode_on: is_dark_theme, is_chart_layout_default, is_chart_countdown_visible } = ui;\n    const { end_epoch, chart_type, start_epoch, granularity } = contract_config;\n    /**\n     * TODO: remove forcing light theme once DBot supports dark theme\n     * DBot does not support for dark theme since till now,\n     * as a result, if any user come to report detail pages\n     * from DBot, we should force it to have light theme\n     */\n    const from_platform = getPlatformRedirect(app_routing_history);\n    const should_force_light_theme = from_platform.name === 'DBot';\n    const settings = {\n        language: current_language.toLowerCase(),\n        theme: is_dark_theme && !should_force_light_theme ? 'dark' : 'light',\n        position: is_chart_layout_default ? 'bottom' : 'left',\n        countdown: is_chart_countdown_visible,\n        assetInformation: false, // ui.is_chart_asset_info_visible,\n        isHighestLowestMarkerEnabled: false, // TODO: Pending UI\n    };\n    const scroll_to_epoch = allow_scroll_to_epoch ? contract_config.scroll_to_epoch : undefined;\n    const all_ticks = audit_details ? audit_details.all_ticks : [];\n    const { wsForget, wsSubscribe, wsSendRequest, wsForgetStream } = trade;\n\n    const accu_barriers_marker_component = allMarkers[accumulators_barriers_marker?.type];\n\n    const isBottomWidgetVisible = () => {\n        return isDesktop() && is_digit_contract;\n    };\n\n    const getChartYAxisMargin = () => {\n        const chart_margin = {\n            top: isMobile() ? 96 : 148,\n            bottom: isBottomWidgetVisible() ? 128 : 112,\n        };\n\n        if (isMobile()) {\n            chart_margin.bottom = 48;\n        }\n\n        return chart_margin;\n    };\n    const prev_start_epoch = usePrevious(start_epoch);\n\n    return (\n        <SmartChart\n            barriers={barriers_array}\n            bottomWidgets={isBottomWidgetVisible() ? ChartBottomWidgets : null}\n            chartControlsWidgets={null}\n            chartType={chart_type}\n            endEpoch={end_epoch}\n            margin={margin || null}\n            isMobile={isMobile()}\n            enabledNavigationWidget={isDesktop()}\n            enabledChartFooter={false}\n            granularity={granularity}\n            requestAPI={wsSendRequest}\n            requestForget={wsForget}\n            requestForgetStream={wsForgetStream}\n            crosshair={isMobile() ? 0 : undefined}\n            maxTick={isMobile() ? 8 : undefined}\n            requestSubscribe={wsSubscribe}\n            settings={settings}\n            startEpoch={start_epoch}\n            scrollToEpoch={scroll_to_epoch}\n            stateChangeListener={chartStateChange}\n            symbol={symbol}\n            allTicks={all_ticks}\n            topWidgets={ChartTopWidgets}\n            isConnectionOpened={is_socket_opened}\n            isStaticChart={\n                // forcing chart reload when start_epoch changes to an earlier epoch for ACCU closed contract:\n                is_accumulator_contract && end_epoch && start_epoch < prev_start_epoch\n            }\n            shouldFetchTradingTimes={false}\n            yAxisMargin={getChartYAxisMargin()}\n            anchorChartToLeft={isMobile()}\n            shouldFetchTickHistory={\n                getDurationUnitText(getDurationPeriod(contract_info)) !== 'seconds' || contract_info.status === 'open'\n            }\n            shouldDrawTicksFromContractInfo={is_accumulator_contract}\n            contractInfo={contract_info}\n        >\n            {markers_array.map(({ content_config, marker_config, react_key }) => (\n                <ChartMarker\n                    key={react_key}\n                    marker_config={marker_config}\n                    marker_content_props={content_config}\n                    is_bottom_widget_visible={isBottomWidgetVisible()}\n                />\n            ))}\n            {is_accumulator_contract && !!markers_array && (\n                <DelayedAccuBarriersMarker\n                    marker_component={accu_barriers_marker_component}\n                    key={accumulators_barriers_marker.key}\n                    is_dark_theme={is_dark_theme}\n                    granularity={granularity}\n                    is_in_contract_details\n                    previous_spot_time={accumulator_previous_spot_time}\n                    {...accumulators_barriers_marker}\n                />\n            )}\n        </SmartChart>\n    );\n});\n\nReplayChart.propTypes = {\n    is_accumulator_contract: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Redirect, withRouter } from 'react-router';\nimport { CSSTransition } from 'react-transition-group';\nimport { routes } from '@deriv/shared';\nimport ErrorComponent from 'App/Components/Elements/Errors';\nimport { localize } from '@deriv/translations';\nimport ContractReplay from './contract-replay.jsx';\nimport { observer, useStore } from '@deriv/stores';\n\nconst dialog_errors = ['GetProposalFailure', 'ContractValidationError'];\n\nconst Contract = observer(({ match, history }) => {\n    const { contract_replay } = useStore();\n    const {\n        removeErrorMessage,\n        error_message,\n        error_code,\n        has_error,\n        removeAccountSwitcherListener: onUnmount,\n        setAccountSwitcherListener: onMount,\n    } = contract_replay;\n    React.useEffect(() => {\n        onMount(+match.params.contract_id, history);\n\n        return () => {\n            removeErrorMessage();\n            onUnmount();\n        };\n    }, [onMount, onUnmount, removeErrorMessage, history, match.params.contract_id]);\n\n    if (isNaN(match.params.contract_id)) {\n        return <Redirect to='/404' />;\n    }\n\n    return (\n        <React.Fragment>\n            {has_error ? (\n                <ErrorComponent\n                    message={error_message}\n                    is_dialog={dialog_errors.includes(error_code)}\n                    redirect_label={\n                        dialog_errors.includes(error_code) ? localize('Ok') : localize('Go back to trading')\n                    }\n                    redirectOnClick={() => history.push(routes.trade)}\n                    should_show_refresh={false}\n                />\n            ) : (\n                <CSSTransition\n                    in={!has_error}\n                    timeout={400}\n                    classNames={{\n                        enter: 'contract--enter',\n                        enterDone: 'contract--enter-done',\n                        exit: 'contract--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <ContractReplay contract_id={+match.params.contract_id} key={+match.params.contract_id} />\n                </CSSTransition>\n            )}\n        </React.Fragment>\n    );\n});\n\nContract.propTypes = {\n    history: PropTypes.object,\n    match: PropTypes.object,\n};\n\nexport default withRouter(Contract);\n","import Contract from './Containers/contract.jsx';\n\nexport default Contract;\n"],"names":["ErrorComponent","header","message","is_dialog","redirect_label","redirectOnClick","should_show_refresh","refresh_message","localize","Dialog","title","is_visible","confirm_button_text","onConfirm","location","reload","PageErrorContainer","error_header","error_messages","redirect_urls","routes","trade","redirect_labels","buttonOnClick","propTypes","PropTypes","type","UnsupportedContractModal","observer","onClose","ui","useStore","disableApp","enableApp","is_loading","is_unsupported_contract_modal_visible","website_domain","website_name","cancel_button_text","onCancel","is_closed_on_cancel","Localize","i18n_default_text","ContractAuditItem","icon","id","label","timestamp","value","value2","className","Text","size","styles","lineHeight","weight","line_height","color","align","formatDate","formatTime","oneOfType","ContractDetails","contract_end_time","contract_info","duration","duration_unit","exit_spot","is_vanilla","commission","contract_type","currency","entry_spot_display_value","entry_tick_time","exit_tick_time","high_barrier","profit","date_start","tick_count","tick_passed","transaction_ids","buy","sell","low_barrier","display_number_of_contracts","is_profit","cancellation_price","getCancellationPrice","show_barrier","isAccumulatorContract","isSmartTraderContract","show_duration","isNaN","show_payout_per_point","isTurbosContract","ticks_duration_text","ThemedScrollbars","is_bypassed","isMobile","Icon","buy_value","sell_value","undefined","isMultiplierContract","Money","amount","show_currency","isUserSold","isEndedBeforeCancellationExpired","isUserCancelled","cancellation","date_expiry","ServerTime","unix","isCancellationExpired","getBarrierLabel","getBarrierValue","isDigitType","getCurrencyDisplayCode","hasTwoBarriers","map","barrier","index","key","toGMTFormat","epochToMoment","addCommaToNumber","ContractHistory","history","length","item","display_name","order_date","Math","abs","order_amount","ContractAudit","contract_update_history","has_result","is_accumulator","is_multiplier","is_turbos","is_smarttrader_contract","toggleHistoryTab","props","contract_id","React","update_history","setUpdateHistory","getSortedUpdateHistory","sort","a","b","Tabs","top","onTabItemClick","tab_index","WS","contractUpdateHistory","then","response","SwipeableContractAudit","children","onSwipedDown","swipe_handlers","SwipeableWrapper","useSwipeable","target_el","document","getElementById","ReactDOM","classNames","SwipeableContractDrawer","onSwipedUp","MarketClosedContractOverlay","validation_error","as","symbol","ContractDrawerCard","contract_update","is_collapsed","is_market_closed","is_mobile","is_sell_requested","onClickCancel","onClickSell","result","server_time","status","toggleContractAuditDrawer","contract_trade","active_symbols","useTraderStore","addToast","current_focus","removeToast","should_show_cancellation_warning","setCurrentFocus","toggleCancellationWarning","getContractById","useHover","hover_ref","should_hide_closed_overlay","is_sold","getEndTime","getSymbolDisplayName","getMarketInformation","shortcode","underlying","is_crypto","isCryptoContract","has_progress_slider","card_header","ContractCard","Header","getCardLabels","getContractTypeDisplay","isDesktop","card_body","Body","card_footer","Footer","contract_el","contract_card","profit_loss","should_show_result_overlay","ref","has_swipeable_drawer","DesktopWrapper","MobileWrapper","Collapsible","ArrowButton","onClick","ContractDrawer","is_dark_theme","common","exit_tick_display_value","contract_drawer_ref","contract_drawer_card_ref","should_show_contract_audit","setShouldShowContractAudit","contract_audit","is_open","getDurationTime","getDurationUnitText","getDurationPeriod","body_content","is_expired","speed","contract_drawer","CSSTransition","in","timeout","style","transform","current","clientHeight","height","Div100vhContainer","height_offset","withRouter","InfoBoxLongcode","setIsCollapsed","longcode","href","c","ContractError","onClickClose","width","viewBox","fill","fillRule","cx","cy","r","d","InfoBox","error_message","removeError","is_ready","keyname","DigitsWidget","contract_store","contract_replay","digits_info","display_status","is_digit_contract","is_ended","Digits","InfoBoxWidget","removeErrorMessage","ChartTopWidgets","is_title_enabled","ChartBottomWidgets","Widget","DelayedAccuBarriersMarker","MarkerComponent","marker_component","previous_spot_time","prevProps","nextProps","displayName","ContractReplay","is_valid_to_cancel","onMount","onUnmount","indicative_status","is_chart_loading","is_forward_starting","routeBackInApp","is_dark_mode_on","NotificationMessages","notification_messages_ui","setIsVisible","useHistory","url_contract_id","exec","pathname","isVanillaContract","contract_drawer_el","FadeWrapper","goBack","statementws_url","urlFor","legacy","window","open","PageOverlay","isEmptyObject","state","from_table_row","is_disabled","fallback","is_dark","ReplayChart","is_accumulator_contract","chart_margin","chart_state","chartStateChange","margin","accumulator_previous_spot_time","contract_config","accumulators_barriers_marker","marker","barriers_array","markers_array","audit_details","allow_scroll_to_epoch","app_routing_history","current_language","is_socket_opened","is_chart_layout_default","is_chart_countdown_visible","end_epoch","chart_type","start_epoch","granularity","should_force_light_theme","getPlatformRedirect","name","settings","language","toLowerCase","theme","position","countdown","assetInformation","isHighestLowestMarkerEnabled","scroll_to_epoch","all_ticks","wsForget","wsSubscribe","wsSendRequest","wsForgetStream","accu_barriers_marker_component","allMarkers","isBottomWidgetVisible","prev_start_epoch","usePrevious","SmartChart","barriers","bottomWidgets","chartControlsWidgets","chartType","endEpoch","enabledNavigationWidget","enabledChartFooter","requestAPI","requestForget","requestForgetStream","crosshair","maxTick","requestSubscribe","startEpoch","scrollToEpoch","stateChangeListener","allTicks","topWidgets","isConnectionOpened","isStaticChart","shouldFetchTradingTimes","yAxisMargin","bottom","anchorChartToLeft","shouldFetchTickHistory","shouldDrawTicksFromContractInfo","contractInfo","content_config","marker_config","react_key","marker_content_props","is_bottom_widget_visible","is_in_contract_details","dialog_errors","Contract","match","error_code","has_error","removeAccountSwitcherListener","setAccountSwitcherListener","params","Redirect","to","includes","push","enter","enterDone","exit","unmountOnExit"],"sourceRoot":""}